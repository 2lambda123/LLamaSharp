{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>LLamaSharp is the C#/.NET binding of llama.cpp. It provides APIs to inference the LLaMa Models and deploy it on native environment or Web. It could help C# developers to deploy the LLM (Large Language Model) locally and integrate with C# apps.</p>"},{"location":"#main-features","title":"Main features","text":"<ul> <li>Model inference</li> <li>Model quantization</li> <li>Generating embeddings</li> <li>Interactive/Instruct/Stateless executor mode</li> <li>Chat session APIs</li> <li>Save/load the state</li> <li>Integration with other applications like BotSharp and semantic-kernel</li> </ul>"},{"location":"#essential-insights-for-novice-learners","title":"Essential insights for novice learners","text":"<p>If you are new to LLM, here're some tips for you to help you to get start with <code>LLamaSharp</code>. If you are experienced in this field, we'd still recommend you to take a few minutes to read it because somethings performs differently compared to cpp/python.</p> <ol> <li>Tha main ability of LLamaSharp is to provide an efficient way to run inference of LLM (Large Language Model) locally (and fine-tune model in the future). The model weights, however, needs to be downloaded from other resources, like huggingface.</li> <li>Since LLamaSharp supports multiple platforms, The nuget package is splitted to <code>LLamaSharp</code> and <code>LLama.Backend</code>. After installing <code>LLamaSharp</code>, please install one of <code>LLama.Backend.Cpu</code>, <code>LLama.Backend.Cuda11</code> and <code>LLama.Backend.Cuda12</code>. If you use the source code, dynamic libraries could be found in <code>LLama/Runtimes</code>. Then rename the one you want to use to <code>libllama.dll</code>.</li> <li><code>LLaMa</code> originally refers to the weights released by Meta (Facebook Research). After that, many models are fine-tuned based on it, such as <code>Vicuna</code>, <code>GPT4All</code>, and <code>Pyglion</code>. Though all of these models are supported by LLamaSharp, some steps are necessary with different file formats. There're mainly three kinds of files, which are <code>.pth</code>, <code>.bin (ggml)</code>, <code>.bin (quantized)</code>. If you have the <code>.bin (quantized)</code> file, it could be used directly by LLamaSharp. If you have the <code>.bin (ggml)</code> file, you could use it directly but get higher inference speed after the quantization. If you have the <code>.pth</code> file, you need to follow the instructions in llama.cpp to convert it to <code>.bin (ggml)</code> file at first.</li> <li>LLamaSharp supports GPU acceleration, but it requires cuda installation. Please install cuda 11 or cuda 12 on your system before using LLamaSharp to enable GPU. If you have another cuda version, you could compile llama.cpp from source to get the dll. For building from source, please refer to issue #5.</li> </ol>"},{"location":"#welcome-to-join-the-development","title":"Welcome to join the development!","text":"<p>Community effort is always one of the most important things in open-source projects. Any contribution in any way is welcomed here. For example, the following things mean a lot for LLamaSharp:</p> <ol> <li>Open an issue when you find something wrong.</li> <li>Open an PR if you've fixed something. Even if just correcting a typo, it also makes great sense.</li> <li>Help to optimize the documentation. </li> <li>Write an example or blog about how to integrate LLamaSharp with your APPs.</li> <li>Ask for a missed feature and discuss with other developers.</li> </ol> <p>If you'd like to get deeply involved in development, please touch us in discord channel or send email to <code>AsakusaRinne@gmail.com</code>. :)</p>"},{"location":"Architecture/","title":"Architecture","text":""},{"location":"Architecture/#architecture-of-main-functions","title":"Architecture of main functions","text":"<p>The figure below shows the core framework structure, which is separated to four levels.</p> <ul> <li>LLamaModel: The holder of a model which directly interact with native library and provide some basic APIs such as tokenization and embedding. Currently it includes three classes: <code>LLamaModel</code>, <code>LLamaEmbedder</code> and <code>LLamaQuantizer</code>.</li> <li>LLamaExecutors: Executors which define the way to run the LLama model. It provides text-to-text APIs to make it easy to use. Currently we provide three kinds of executors: <code>InteractiveExecutor</code>, <code>InstructuExecutor</code> and <code>StatelessExecutor</code>.</li> <li>ChatSession: A wrapping for <code>InteractiveExecutor</code> and <code>LLamaModel</code>, which supports interactive tasks and saving/re-loading sessions. It also provides a flexible way to customize the text process by <code>IHistoryTransform</code>, <code>ITextTransform</code> and <code>ITextStreamTransform</code>.</li> <li>High-level Applications: Some applications that provides higher-level integration. For example, BotSharp provides integration for vector search, Chatbot UI and Web APIs. semantic-kernel provides various APIs for manipulations related with LLM. If you've made an integration, please tell us and add it to the doc!</li> </ul> <p></p>"},{"location":"Architecture/#recommended-usings","title":"Recommended usings","text":"<p>Since <code>LLamaModel</code> interact with native library, it's not recommended to use the methods of it directly unless you know what you are doing. So does the <code>NativeApi</code>, which is not included in the arcitecher figure above.</p> <p><code>ChatSession</code> is recommended to be used when you want to build an application similar to ChatGPT, or the ChatBot, because it works best with <code>InteractiveExecutor</code>. Though other executors are also allowed to passed as a parameter to initialize a <code>ChatSession</code>, it's not encouraged if you are new to LLamaSharp and LLM.</p> <p>High-level applications, such as BotSharp, are supposed to be used when you concentrate on the part not related with LLM. For example, if you want to deploy a chat bot to help you remember your schedules, using BotSharp may be a good choice.</p> <p>Note that the APIs of the high-level applications may not be stable now. Please take it into account when using them.</p>"},{"location":"ContributingGuide/","title":"LLamaSharp Contributing Guide","text":"<p>Hi, welcome to develop LLamaSharp with us together! We are always open for every contributor and any format of contributions! If you want to maintain this library actively together, please contact us to get the write access after some PRs. (Email: AsakusaRinne@gmail.com)</p> <p>In this page, we'd like to introduce how to make contributions here easily. \ud83d\ude0a</p>"},{"location":"ContributingGuide/#compile-the-native-library-from-source","title":"Compile the native library from source","text":"<p>Firstly, please clone the llama.cpp repository and following the instructions in llama.cpp readme to configure your local environment.</p> <p>If you want to support cublas in the compilation, please make sure that you've installed the cuda.</p> <p>When building from source, please add <code>-DBUILD_SHARED_LIBS=ON</code> to the cmake instruction. For example, when building with cublas but without openblas, use the following instruction:</p> <pre><code>cmake .. -DLLAMA_CUBLAS=ON -DBUILD_SHARED_LIBS=ON\n</code></pre> <p>After running <code>cmake --build . --config Release</code>, you could find the <code>llama.dll</code>, <code>llama.so</code> or <code>llama.dylib</code> in your build directory. After pasting it to <code>LLamaSharp/LLama/runtimes</code> and renaming it to <code>libllama.dll</code>, <code>libllama.so</code> or  <code>libllama.dylib</code>, you can use it as the native library in LLamaSharp.</p>"},{"location":"ContributingGuide/#add-a-new-feature-to-llamasharp","title":"Add a new feature to LLamaSharp","text":"<p>After refactoring the framework in <code>v0.4.0</code>, LLamaSharp will try to maintain the backward compatibility. However, in the following cases, break change is okay:</p> <ol> <li>Due to some break changes in llama.cpp, making a break change will help to maintain the good abstraction and friendly user APIs.</li> <li>A very improtant feature cannot be implemented unless refactoring some parts.</li> <li>After some discussions, an agreement was reached that making the break change is reasonable.</li> </ol> <p>If a new feature could be added without introducing any break change, please open a PR rather than open an issue first. We will never refuse the PR but help to improve it, unless it's malicious.</p> <p>When adding the feature, please take care of the namespace and the naming convention. For example, if you are adding an integration for WPF, please put the code under namespace <code>LLama.WPF</code> or <code>LLama.Integration.WPF</code> instead of putting it under the root namespace. The naming convention of LLamaSharp follows the pascal naming convention, but in some parts that are invisible to users, you can do whatever you want.</p>"},{"location":"ContributingGuide/#find-the-problem-and-fix-the-bug","title":"Find the problem and fix the BUG","text":"<p>If the issue is related to the LLM internal behaviors, such as endless generating the response, the best way to find the problem is to do comparison test between llama.cpp and LLamaSharp.</p> <p>You could use exactly the same prompt, the same model and the same parameters to run the inference in llama.cpp and LLamaSharp respectively to see if it's really a problem caused by the implementation in LLamaSharp.</p> <p>If the experiment showed that it worked well in llama.cpp but didn't in LLamaSharp, a the search for the problem could be started. While the reason of the problem could be various, the best way I think is to add log-print in the code of llama.cpp and use it in LLamaSharp after compilation. Thus, when running LLamaSharp, you could see what happened in the native library.</p> <p>After finding out the reason, a painful but happy process comes. When working on the BUG fix, there's only one rule to follow, that is keeping the examples working well. If the modification fixed the BUG but impact on other functions, it would not be a good fix.</p> <p>During the BUG fix process, please don't hesitate to discuss together when you stuck on something.</p>"},{"location":"ContributingGuide/#add-integrations","title":"Add integrations","text":"<p>All kinds of integration are welcomed here! Currently the following integrations are under work or on our schedule:</p> <ol> <li>BotSharp</li> <li>semantic-kernel</li> <li>Unity</li> </ol> <p>Besides, for some other integrations, like <code>ASP.NET core</code>, <code>SQL</code>, <code>Blazor</code> and so on, we'll appreciate it if you could help with that. If the time is limited for you, providing an example for it also means a lot!</p>"},{"location":"ContributingGuide/#add-examples","title":"Add examples","text":"<p>There're mainly two ways to add an example:</p> <ol> <li>Add the example to <code>LLama.Examples</code> of the repository.</li> <li>Put the example in another repositpry and add the link to the readme or docs of LLamaSharp.</li> </ol>"},{"location":"ContributingGuide/#add-documents","title":"Add documents","text":"<p>LLamaSharp uses mkdocs to build the documantation, please follow the tutorial of mkdocs to add or modify documents in LLamaSharp.</p>"},{"location":"GetStarted/","title":"Get Started","text":""},{"location":"GetStarted/#install-packages","title":"Install packages","text":"<p>Firstly, search <code>LLamaSharp</code> in nuget package manager and install it.</p> <pre><code>PM&gt; Install-Package LLamaSharp\n</code></pre> <p>Then, search and install one of the following backends:</p> <pre><code>LLamaSharp.Backend.Cpu\nLLamaSharp.Backend.Cuda11\nLLamaSharp.Backend.Cuda12\n</code></pre> <p>Here's the mapping of them and corresponding model samples provided by <code>LLamaSharp</code>. If you're not sure which model is available for a version, please try our sample model.</p> LLamaSharp.Backend LLamaSharp Verified Model Resources llama.cpp commit id - v0.2.0 This version is not recommended to use. - - v0.2.1 WizardLM, Vicuna (filenames with \"old\") - v0.2.2 v0.2.2, v0.2.3 WizardLM, Vicuna (filenames without \"old\") 63d2046 v0.3.0 v0.3.0 LLamaSharpSamples v0.3.0, WizardLM 7e4ea5b"},{"location":"GetStarted/#download-a-model","title":"Download a model","text":"<p>One of the following models could be okay:</p> <ul> <li>LLaMA \ud83e\udd99</li> <li>Alpaca</li> <li>GPT4All</li> <li>Chinese LLaMA / Alpaca</li> <li>Vigogne (French)</li> <li>Vicuna</li> <li>Koala</li> <li>OpenBuddy \ud83d\udc36 (Multilingual)</li> <li>Pygmalion 7B / Metharme 7B</li> <li>WizardLM</li> </ul> <p>Note that because <code>llama.cpp</code> is under fast development now and often introduce break changes, some model weights on huggingface which works under a version may be invalid with another version. If it's your first time to configure LLamaSharp, we'd like to suggest for using verified model weights in the table above.</p>"},{"location":"GetStarted/#run-the-program","title":"Run the program","text":"<p>Please create a console program with dotnet runtime &gt;= netstandard 2.0 (&gt;= net6.0 is more recommended). Then, paste the following code to <code>program.cs</code>;</p> <pre><code>using LLama.Common;\nusing LLama;\n\nstring modelPath = \"&lt;Your model path&gt;\" // change it to your own model path\nvar prompt = \"Transcript of a dialog, where the User interacts with an Assistant named Bob. Bob is helpful, kind, honest, good at writing, and never fails to answer the User's requests immediately and with precision.\\r\\n\\r\\nUser: Hello, Bob.\\r\\nBob: Hello. How may I help you today?\\r\\nUser: Please tell me the largest city in Europe.\\r\\nBob: Sure. The largest city in Europe is Moscow, the capital of Russia.\\r\\nUser:\"; // use the \"chat-with-bob\" prompt here.\n\n// Initialize a chat session\nvar ex = new InteractiveExecutor(new LLamaModel(new ModelParams(modelPath, contextSize: 1024, seed: 1337, gpuLayerCount: 5)));\nChatSession session = new ChatSession(ex);\n\n// show the prompt\nConsole.WriteLine();\nConsole.Write(prompt);\n\n// run the inference in a loop to chat with LLM\nwhile (true)\n{\n    foreach (var text in session.Chat(prompt, new InferenceParams() { Temperature = 0.6f, AntiPrompts = new List&lt;string&gt; { \"User:\" } }))\n    {\n        Console.Write(text);\n    }\n\n    Console.ForegroundColor = ConsoleColor.Green;\n    prompt = Console.ReadLine();\n    Console.ForegroundColor = ConsoleColor.White;\n}\n</code></pre> <p>After starting it, you'll see the following outputs.</p> <pre><code>Please input your model path: D:\\development\\llama\\weights\\wizard-vicuna-13B.ggmlv3.q4_1.bin\nllama.cpp: loading model from D:\\development\\llama\\weights\\wizard-vicuna-13B.ggmlv3.q4_1.bin\nllama_model_load_internal: format     = ggjt v3 (latest)\nllama_model_load_internal: n_vocab    = 32000\nllama_model_load_internal: n_ctx      = 1024\nllama_model_load_internal: n_embd     = 5120\nllama_model_load_internal: n_mult     = 256\nllama_model_load_internal: n_head     = 40\nllama_model_load_internal: n_layer    = 40\nllama_model_load_internal: n_rot      = 128\nllama_model_load_internal: ftype      = 3 (mostly Q4_1)\nllama_model_load_internal: n_ff       = 13824\nllama_model_load_internal: n_parts    = 1\nllama_model_load_internal: model size = 13B\nllama_model_load_internal: ggml ctx size = 7759.48 MB\nllama_model_load_internal: mem required  = 9807.48 MB (+ 1608.00 MB per state)\n....................................................................................................\nllama_init_from_file: kv self size  =  800.00 MB\n\nTranscript of a dialog, where the User interacts with an Assistant named Bob. Bob is helpful, kind, honest, good at writing, and never fails to answer the User's requests immediately and with precision.\n\nUser: Hello, Bob.\nBob: Hello. How may I help you today?\nUser: Please tell me the largest city in Europe.\nBob: Sure. The largest city in Europe is Moscow, the capital of Russia.\nUser:\n</code></pre> <p>Now, enjoy chatting with LLM!</p>"},{"location":"Tricks/","title":"Tricks for FAQ","text":"<p>Sometimes, your application with LLM and LLamaSharp may have strange behaviors. Before opening an issue to report the BUG, the following tricks may worth a try.</p>"},{"location":"Tricks/#carefully-set-the-anti-prompts","title":"Carefully set the anti-prompts","text":"<p>Anti-prompt can also be called as \"Stop-keyword\", which decides when to stop the response generation. Under interactive mode, the maximum tokens count is always not set, which makes the LLM generates responses infinitively. Therefore, setting anti-prompt correctly helps a lot to avoid the strange behaviors. For example, the prompt file <code>chat-with-bob.txt</code> has the following content:</p> <pre><code>Transcript of a dialog, where the User interacts with an Assistant named Bob. Bob is helpful, kind, honest, good at writing, and never fails to answer the User's requests immediately and with precision.\n\nUser: Hello, Bob.\nBob: Hello. How may I help you today?\nUser: Please tell me the largest city in Europe.\nBob: Sure. The largest city in Europe is Moscow, the capital of Russia.\nUser:\n</code></pre> <p>Therefore, the anti-prompt should be set as \"User:\". If the last line of the prompt is removed, LLM will automatically generate a question (user) and a response (bob) for one time when running the chat session. Therefore, the antiprompt is suggested to be appended to the prompt when starting a chat session.</p> <p>What if an extra line is appended? The string \"User:\" in the prompt will be followed with a char \"\\n\". Thus when running the model, the automatic generation of a pair of question and response may appear because the anti-prompt is \"User:\" but the last token is \"User:\\n\". As for whether it will appear, it's an undefined behavior, which depends on the implementation inside the <code>LLamaExecutor</code>. Anyway, since it may leads to unexpected behaviors, it's recommended to trim your prompt or carefully keep consistent with your anti-prompt.</p>"},{"location":"Tricks/#pay-attention-to-the-length-of-prompt","title":"Pay attention to the length of prompt","text":"<p>Sometimes we want to input a long prompt to execute a task. However, the context size may limit the inference of LLama model. Please ensure the inequality below holds.</p> <p>$$ len(prompt) + len(response) &lt; len(context) $$</p> <p>In this inequality, <code>len(response)</code> refers to the expected tokens for LLM to generate.</p>"},{"location":"Tricks/#try-differenct-executors-with-a-prompt","title":"Try differenct executors with a prompt","text":"<p>Some prompt works well under interactive mode, such as <code>chat-with-bob</code>, some others may work well with instruct mode, such as <code>alpaca</code>. Besides, if your input is quite simple and one-time job, such as \"Q: what is the satellite of the earth? A: \", stateless mode will be a good choice.</p> <p>If your chat bot has bad performance, trying different executor will possibly make it work well.</p>"},{"location":"Tricks/#choose-models-weight-depending-on-you-task","title":"Choose models weight depending on you task","text":"<p>The differences between modes may lead to much different behaviors under the same task. For example, if you're building a chat bot with non-English, a fine-tuned model specially for the language you want to use will have huge effect on the performance.</p>"},{"location":"Tricks/#set-the-layer-count-you-want-to-offload-to-gpu","title":"Set the layer count you want to offload to GPU","text":"<p>Currently, the <code>GpuLayerCount</code> param, which decides the number of layer loaded into GPU, is set to 20 by default. However, if you have some efficient GPUs, setting it as a larger number will attain faster inference.</p>"},{"location":"ChatSession/basic-usages/","title":"Basic usages of ChatSession","text":"<p><code>ChatSession</code> is a higher-level absatrction than the executors. In the context of a chat application like ChatGPT, a \"chat session\" refers to an interactive conversation or exchange of messages between the user and the chatbot. It represents a continuous flow of communication where the user enters input or asks questions, and the chatbot responds accordingly. A chat session typically starts when the user initiates a conversation with the chatbot and continues until the interaction comes to a natural end or is explicitly terminated by either the user or the system. During a chat session, the chatbot maintains the context of the conversation, remembers previous messages, and generates appropriate responses based on the user's inputs and the ongoing dialogue.</p>"},{"location":"ChatSession/basic-usages/#initialize-a-session","title":"Initialize a session","text":"<p>Currently, the only parameter that is accepted is an <code>ILLamaExecutor</code>, because this is the only parameter that we're sure to exist in all the future versions. Since it's the high-level absatrction, we're conservative to the API designs. In the future, there may be more kinds of constructors added.</p> <pre><code>InteractiveExecutor ex = new(new LLamaModel(new ModelParams(modelPath)));\nChatSession session = new ChatSession(ex);\n</code></pre>"},{"location":"ChatSession/basic-usages/#chat-with-the-bot","title":"Chat with the bot","text":"<p>There'll be two kinds of input accepted by the <code>Chat</code> API, which are <code>ChatHistory</code> and <code>String</code>. The API with string is quite similar to that of the executors. Meanwhile, the API with <code>ChatHistory</code> is aimed to provide more flexible usages. For example, you have had a chat with the bot in session A before you open the session B. Now session B has no memory for what you said before. Therefore, you can feed the history of A to B.</p> <pre><code>string prompt = \"What is C#?\";\n\nforeach (var text in session.Chat(prompt, new InferenceParams() { Temperature = 0.6f, AntiPrompts = new List&lt;string&gt; { \"User:\" } })) // the inference params should be changed depending on your statement\n{\n    Console.Write(text);\n}\n</code></pre>"},{"location":"ChatSession/basic-usages/#get-the-history","title":"Get the history","text":"<p>Currently <code>History</code> is a property of <code>ChatSession</code>.</p> <pre><code>foreach(var rec in session.History.Messages)\n{\n    Console.WriteLine($\"{rec.AuthorRole}: {rec.Content}\");\n}\n</code></pre>"},{"location":"ChatSession/save-load-session/","title":"Save/Load Chat Session","text":"<p>Generally, the chat session could be switched, which requires the ability of loading and saving session.</p> <p>When building a chat bot app, it's NOT encouraged to initialize many chat sessions and keep them in memory to wait for being switched, because the memory comsumption of both CPU and GPU is expensive. It's recommended to save the current session before switching to a new session, and load the file when switching back to the session.</p> <p>The API is also quite simple, the files will be saved into a directory you specified. If the path does not exist, a new directory will be created.</p> <pre><code>string savePath = \"&lt;save dir&gt;\";\nsession.SaveSession(savePath);\n\nsession.LoadSession(savePath);\n</code></pre>"},{"location":"ChatSession/transforms/","title":"Transforms in Chat Session","text":"<p>There's three important elements in <code>ChatSession</code>, which are input, output and history. Besides, there're some conversions between them. Since the process of them under different conditions varies, LLamaSharp hands over this part of the power to the users.</p> <p>Currently, there're three kinds of process that could be customized, as introduced below.</p>"},{"location":"ChatSession/transforms/#input-transform","title":"Input transform","text":"<p>In general, the input of the chat API is a text (without stream), therefore <code>ChatSession</code> processes it in a pipeline. If you want to use your customized transform, you need to define a transform that implements <code>ITextTransform</code> and add it to the pipeline of <code>ChatSession</code>.</p> <pre><code>public interface ITextTransform\n{\n    string Transform(string text);\n}\n</code></pre> <pre><code>public class MyInputTransform1 : ITextTransform\n{\n    public string Transform(string text)\n    {\n        return $\"Question: {text}\\n\";\n    }\n}\n\npublic class MyInputTransform2 : ITextTransform\n{\n    public string Transform(string text)\n    {\n        return text + \"Answer: \";\n    }\n}\n\nsession.AddInputTransform(new MyInputTransform1()).AddInputTransform(new MyInputTransform2());\n</code></pre>"},{"location":"ChatSession/transforms/#output-transform","title":"Output transform","text":"<p>Different from the input, the output of chat API is a text stream. Therefore you need to process it word by word, instead of getting the full text at once.</p> <p>The interface of it has an <code>IEnumerable&lt;string&gt;</code> as input, which is actually a yield sequence.</p> <pre><code>public interface ITextStreamTransform\n{\n    IEnumerable&lt;string&gt; Transform(IEnumerable&lt;string&gt; tokens);\n    IAsyncEnumerable&lt;string&gt; TransformAsync(IAsyncEnumerable&lt;string&gt; tokens);\n}\n</code></pre> <p>When implementing it, you could throw a not-implemented exception in one of them if you only need to use the chat API in synchronously or asynchronously.</p> <p>Different from the input transform pipeline, the output transform only supports one transform.</p> <pre><code>session.WithOutputTransform(new MyOutputTransform());\n</code></pre> <p>Here's an example of how to implement the interface. In this example, the transform detects wether there's some keywords in the response and removes them.</p> <pre><code>/// &lt;summary&gt;\n/// A text output transform that removes the keywords from the response.\n/// &lt;/summary&gt;\npublic class KeywordTextOutputStreamTransform : ITextStreamTransform\n{\n    HashSet&lt;string&gt; _keywords;\n    int _maxKeywordLength;\n    bool _removeAllMatchedTokens;\n\n    /// &lt;summary&gt;\n    /// \n    /// &lt;/summary&gt;\n    /// &lt;param name=\"keywords\"&gt;Keywords that you want to remove from the response.&lt;/param&gt;\n    /// &lt;param name=\"redundancyLength\"&gt;The extra length when searching for the keyword. For example, if your only keyword is \"highlight\", \n    /// maybe the token you get is \"\\r\\nhighligt\". In this condition, if redundancyLength=0, the token cannot be successfully matched because the length of \"\\r\\nhighligt\" (10)\n    /// has already exceeded the maximum length of the keywords (8). On the contrary, setting redundancyLengyh &gt;= 2 leads to successful match.\n    /// The larger the redundancyLength is, the lower the processing speed. But as an experience, it won't introduce too much performance impact when redundancyLength &lt;= 5 &lt;/param&gt;\n    /// &lt;param name=\"removeAllMatchedTokens\"&gt;If set to true, when getting a matched keyword, all the related tokens will be removed. Otherwise only the part of keyword will be removed.&lt;/param&gt;\n    public KeywordTextOutputStreamTransform(IEnumerable&lt;string&gt; keywords, int redundancyLength = 3, bool removeAllMatchedTokens = false)\n    {\n        _keywords = new(keywords);\n        _maxKeywordLength = keywords.Select(x =&gt; x.Length).Max() + redundancyLength;\n        _removeAllMatchedTokens = removeAllMatchedTokens;\n    }\n    /// &lt;inheritdoc /&gt;\n    public IEnumerable&lt;string&gt; Transform(IEnumerable&lt;string&gt; tokens)\n    {\n        var window = new Queue&lt;string&gt;();\n\n        foreach (var s in tokens)\n        {\n            window.Enqueue(s);\n            var current = string.Join(\"\", window);\n            if (_keywords.Any(x =&gt; current.Contains(x)))\n            {\n                var matchedKeyword = _keywords.First(x =&gt; current.Contains(x));\n                int total = window.Count;\n                for (int i = 0; i &lt; total; i++)\n                {\n                    window.Dequeue();\n                }\n                if (!_removeAllMatchedTokens)\n                {\n                    yield return current.Replace(matchedKeyword, \"\");\n                }\n            }\n            if (current.Length &gt;= _maxKeywordLength)\n            {\n                if (_keywords.Any(x =&gt; current.Contains(x)))\n                {\n                    var matchedKeyword = _keywords.First(x =&gt; current.Contains(x));\n                    int total = window.Count;\n                    for (int i = 0; i &lt; total; i++)\n                    {\n                        window.Dequeue();\n                    }\n                    if (!_removeAllMatchedTokens)\n                    {\n                        yield return current.Replace(matchedKeyword, \"\");\n                    }\n                }\n                else\n                {\n                    int total = window.Count;\n                    for (int i = 0; i &lt; total; i++)\n                    {\n                        yield return window.Dequeue();\n                    }\n                }\n            }\n        }\n        int totalCount = window.Count;\n        for (int i = 0; i &lt; totalCount; i++)\n        {\n            yield return window.Dequeue();\n        }\n    }\n    /// &lt;inheritdoc /&gt;\n    public async IAsyncEnumerable&lt;string&gt; TransformAsync(IAsyncEnumerable&lt;string&gt; tokens)\n    {\n        throw new NotImplementedException(); // This is implemented in `LLamaTransforms` but we ignore it here.\n    }\n}\n</code></pre>"},{"location":"ChatSession/transforms/#history-transform","title":"History transform","text":"<p>The chat history could be converted to or from a text, which is exactly what the interface of it.</p> <pre><code>public interface IHistoryTransform\n{\n    string HistoryToText(ChatHistory history);\n    ChatHistory TextToHistory(AuthorRole role, string text);\n}\n</code></pre> <p>Similar to the output transform, the history transform is added in the following way:</p> <pre><code>session.WithHistoryTransform(new MyHistoryTransform());\n</code></pre> <p>The implementation is quite flexible, depending on what you want the history message to be like. Here's an example, which is the default history transform in LLamaSharp.</p> <pre><code>/// &lt;summary&gt;\n/// The default history transform.\n/// Uses plain text with the following format:\n/// [Author]: [Message]\n/// &lt;/summary&gt;\npublic class DefaultHistoryTransform : IHistoryTransform\n{\n    private readonly string defaultUserName = \"User\";\n    private readonly string defaultAssistantName = \"Assistant\";\n    private readonly string defaultSystemName = \"System\";\n    private readonly string defaultUnknownName = \"??\";\n\n    string _userName;\n    string _assistantName;\n    string _systemName;\n    string _unknownName;\n    bool _isInstructMode;\n    public DefaultHistoryTransform(string? userName = null, string? assistantName = null, \n        string? systemName = null, string? unknownName = null, bool isInstructMode = false)\n    {\n        _userName = userName ?? defaultUserName;\n        _assistantName = assistantName ?? defaultAssistantName;\n        _systemName = systemName ?? defaultSystemName;\n        _unknownName = unknownName ?? defaultUnknownName;\n        _isInstructMode = isInstructMode;\n    }\n\n    public virtual string HistoryToText(ChatHistory history)\n    {\n        StringBuilder sb = new();\n        foreach (var message in history.Messages)\n        {\n            if (message.AuthorRole == AuthorRole.User)\n            {\n                sb.AppendLine($\"{_userName}: {message.Content}\");\n            }\n            else if (message.AuthorRole == AuthorRole.System)\n            {\n                sb.AppendLine($\"{_systemName}: {message.Content}\");\n            }\n            else if (message.AuthorRole == AuthorRole.Unknown)\n            {\n                sb.AppendLine($\"{_unknownName}: {message.Content}\");\n            }\n            else if (message.AuthorRole == AuthorRole.Assistant)\n            {\n                sb.AppendLine($\"{_assistantName}: {message.Content}\");\n            }\n        }\n        return sb.ToString();\n    }\n\n    public virtual ChatHistory TextToHistory(AuthorRole role, string text)\n    {\n        ChatHistory history = new ChatHistory();\n        history.AddMessage(role, TrimNamesFromText(text, role));\n        return history;\n    }\n\n    public virtual string TrimNamesFromText(string text, AuthorRole role)\n    {\n        if (role == AuthorRole.User &amp;&amp; text.StartsWith($\"{_userName}:\"))\n        {\n            text = text.Substring($\"{_userName}:\".Length).TrimStart();\n        }\n        else if (role == AuthorRole.Assistant &amp;&amp; text.EndsWith($\"{_assistantName}:\"))\n        {\n            text = text.Substring(0, text.Length - $\"{_assistantName}:\".Length).TrimEnd();\n        }\n        if (_isInstructMode &amp;&amp; role == AuthorRole.Assistant &amp;&amp; text.EndsWith(\"\\n&gt; \"))\n        {\n            text = text.Substring(0, text.Length - \"\\n&gt; \".Length).TrimEnd();\n        }\n        return text;\n    }\n}\n</code></pre>"},{"location":"Examples/ChatSessionStripRoleName/","title":"Use chat session and strip role names","text":"<pre><code>using LLama.Common;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\npublic class ChatSessionStripRoleName\n{\n    public static void Run()\n    {\n        Console.Write(\"Please input your model path: \");\n        string modelPath = Console.ReadLine();\n        var prompt = File.ReadAllText(\"Assets/chat-with-bob.txt\").Trim();\n        InteractiveExecutor ex = new(new LLamaModel(new ModelParams(modelPath, contextSize: 1024, seed: 1337, gpuLayerCount: 5)));\n        ChatSession session = new ChatSession(ex).WithOutputTransform(new LLamaTransforms.KeywordTextOutputStreamTransform(new string[] { \"User:\", \"Bob:\" }, redundancyLength: 8));\n\n        Console.ForegroundColor = ConsoleColor.Yellow;\n        Console.WriteLine(\"The chat session has started. The role names won't be printed.\");\n        Console.ForegroundColor = ConsoleColor.White;\n\n        while (true)\n        {\n            foreach (var text in session.Chat(prompt, new InferenceParams() { Temperature = 0.6f, AntiPrompts = new List&lt;string&gt; { \"User:\" } }))\n            {\n                Console.Write(text);\n            }\n\n            Console.ForegroundColor = ConsoleColor.Green;\n            prompt = Console.ReadLine();\n            Console.ForegroundColor = ConsoleColor.White;\n        }\n    }\n}\n</code></pre>"},{"location":"Examples/ChatSessionWithRoleName/","title":"Use chat session without removing role names","text":"<pre><code>using LLama.Common;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\npublic class ChatSessionWithRoleName\n{\n    public static void Run()\n    {\n        Console.Write(\"Please input your model path: \");\n        string modelPath = Console.ReadLine();\n        var prompt = File.ReadAllText(\"Assets/chat-with-bob.txt\").Trim();\n        InteractiveExecutor ex = new(new LLamaModel(new ModelParams(modelPath, contextSize: 1024, seed: 1337, gpuLayerCount: 5)));\n        ChatSession session = new ChatSession(ex); // The only change is to remove the transform for the output text stream.\n\n        Console.ForegroundColor = ConsoleColor.Yellow;\n        Console.WriteLine(\"The chat session has started. In this example, the prompt is printed for better visual result.\");\n        Console.ForegroundColor = ConsoleColor.White;\n\n        // show the prompt\n        Console.Write(prompt);\n        while (true)\n        {\n            foreach (var text in session.Chat(prompt, new InferenceParams() { Temperature = 0.6f, AntiPrompts = new List&lt;string&gt; { \"User:\" } }))\n            {\n                Console.Write(text);\n            }\n\n            Console.ForegroundColor = ConsoleColor.Green;\n            prompt = Console.ReadLine();\n            Console.ForegroundColor = ConsoleColor.White;\n        }\n    }\n}\n</code></pre>"},{"location":"Examples/GetEmbeddings/","title":"Get embeddings","text":"<pre><code>using LLama.Common;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\npublic class GetEmbeddings\n{\n    public static void Run()\n    {\n        Console.Write(\"Please input your model path: \");\n        string modelPath = Console.ReadLine();\n        var embedder = new LLamaEmbedder(new ModelParams(modelPath));\n\n        while (true)\n        {\n            Console.Write(\"Please input your text: \");\n            Console.ForegroundColor = ConsoleColor.Green;\n            var text = Console.ReadLine();\n            Console.ForegroundColor = ConsoleColor.White;\n\n            Console.WriteLine(string.Join(\", \", embedder.GetEmbeddings(text)));\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre>"},{"location":"Examples/InstructModeExecute/","title":"Use instruct executor","text":"<pre><code>using LLama.Common;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\npublic class InstructModeExecute\n{\n    public static void Run()\n    {\n        Console.Write(\"Please input your model path: \");\n        string modelPath = Console.ReadLine();\n        var prompt = File.ReadAllText(\"Assets/dan.txt\").Trim();\n\n        InstructExecutor ex = new(new LLamaModel(new ModelParams(modelPath, contextSize: 1024)));\n\n        Console.ForegroundColor = ConsoleColor.Yellow;\n        Console.WriteLine(\"The executor has been enabled. In this example, the LLM will follow your instructions. For example, you can input \\\"Write a story about a fox who want to \" +\n            \"make friend with human, no less than 200 words.\\\"\");\n        Console.ForegroundColor = ConsoleColor.White;\n\n        var inferenceParams = new InferenceParams() { Temperature = 0.8f, MaxTokens = 300 };\n\n        while (true)\n        {\n            foreach (var text in ex.Infer(prompt, inferenceParams))\n            {\n                Console.Write(text);\n            }\n            Console.ForegroundColor = ConsoleColor.Green;\n            prompt = Console.ReadLine();\n            Console.ForegroundColor = ConsoleColor.White;\n        }\n    }\n}\n</code></pre>"},{"location":"Examples/InteractiveModeExecute/","title":"Use interactive executor","text":"<pre><code>using LLama.Common;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\npublic class InteractiveModeExecute\n{\n    public async static Task Run()\n    {\n        Console.Write(\"Please input your model path: \");\n        string modelPath = Console.ReadLine();\n        var prompt = File.ReadAllText(\"Assets/chat-with-bob.txt\").Trim();\n\n        InteractiveExecutor ex = new(new LLamaModel(new ModelParams(modelPath, contextSize: 256)));\n\n        Console.ForegroundColor = ConsoleColor.Yellow;\n        Console.WriteLine(\"The executor has been enabled. In this example, the prompt is printed, the maximum tokens is set to 64 and the context size is 256. (an example for small scale usage)\");\n        Console.ForegroundColor = ConsoleColor.White;\n\n        Console.Write(prompt);\n\n        var inferenceParams = new InferenceParams() { Temperature = 0.6f, AntiPrompts = new List&lt;string&gt; { \"User:\" }, MaxTokens = 64 };\n\n        while (true)\n        {\n            await foreach (var text in ex.InferAsync(prompt, inferenceParams))\n            {\n                Console.Write(text);\n            }\n            Console.ForegroundColor = ConsoleColor.Green;\n            prompt = Console.ReadLine();\n            Console.ForegroundColor = ConsoleColor.White;\n        }\n    }\n}\n</code></pre>"},{"location":"Examples/LoadAndSaveSession/","title":"Load and save chat session","text":"<pre><code>using LLama.Common;\nusing LLama.OldVersion;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\npublic class SaveAndLoadSession\n{\n    public static void Run()\n    {\n        Console.Write(\"Please input your model path: \");\n        string modelPath = Console.ReadLine();\n        var prompt = File.ReadAllText(\"Assets/chat-with-bob.txt\").Trim();\n        InteractiveExecutor ex = new(new LLamaModel(new ModelParams(modelPath, contextSize: 1024, seed: 1337, gpuLayerCount: 5)));\n        ChatSession session = new ChatSession(ex); // The only change is to remove the transform for the output text stream.\n\n        Console.ForegroundColor = ConsoleColor.Yellow;\n        Console.WriteLine(\"The chat session has started. In this example, the prompt is printed for better visual result. Input \\\"save\\\" to save and reload the session.\");\n        Console.ForegroundColor = ConsoleColor.White;\n\n        // show the prompt\n        Console.Write(prompt);\n        while (true)\n        {\n            foreach (var text in session.Chat(prompt, new InferenceParams() { Temperature = 0.6f, AntiPrompts = new List&lt;string&gt; { \"User:\" } }))\n            {\n                Console.Write(text);\n            }\n\n            Console.ForegroundColor = ConsoleColor.Green;\n            prompt = Console.ReadLine();\n            Console.ForegroundColor = ConsoleColor.White;\n            if (prompt == \"save\")\n            {\n                Console.Write(\"Preparing to save the state, please input the path you want to save it: \");\n                Console.ForegroundColor = ConsoleColor.Green;\n                var statePath = Console.ReadLine();\n                session.SaveSession(statePath);\n                Console.ForegroundColor = ConsoleColor.White;\n                Console.ForegroundColor = ConsoleColor.Yellow;\n                Console.WriteLine(\"Saved session!\");\n                Console.ForegroundColor = ConsoleColor.White;\n\n                ex.Model.Dispose();\n                ex = new(new LLamaModel(new ModelParams(modelPath, contextSize: 1024, seed: 1337, gpuLayerCount: 5)));\n                session = new ChatSession(ex).WithOutputTransform(new LLamaTransforms.KeywordTextOutputStreamTransform(new string[] { \"User:\", \"Bob:\" }, redundancyLength: 8));\n                session.LoadSession(statePath);\n\n                Console.ForegroundColor = ConsoleColor.Yellow;\n                Console.WriteLine(\"Loaded session!\");\n                Console.ForegroundColor = ConsoleColor.White;\n\n                Console.Write(\"Now you can continue your session: \");\n                Console.ForegroundColor = ConsoleColor.Green;\n                prompt = Console.ReadLine();\n                Console.ForegroundColor = ConsoleColor.White;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Examples/LoadAndSaveState/","title":"Load and save model/exeutor state","text":"<pre><code>using LLama.Common;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\npublic class LoadAndSaveState\n{\n    public static void Run()\n    {\n        Console.Write(\"Please input your model path: \");\n        string modelPath = Console.ReadLine();\n        var prompt = File.ReadAllText(\"Assets/chat-with-bob.txt\").Trim();\n\n        InteractiveExecutor ex = new(new LLamaModel(new ModelParams(modelPath, contextSize: 256)));\n\n        Console.ForegroundColor = ConsoleColor.Yellow;\n        Console.WriteLine(\"The executor has been enabled. In this example, the prompt is printed, the maximum tokens is set to 64 and the context size is 256. (an example for small scale usage)\");\n        Console.ForegroundColor = ConsoleColor.White;\n\n        Console.Write(prompt);\n\n        var inferenceParams = new InferenceParams() { Temperature = 0.6f, AntiPrompts = new List&lt;string&gt; { \"User:\" } };\n\n        while (true)\n        {\n            foreach (var text in ex.Infer(prompt, inferenceParams))\n            {\n                Console.Write(text);\n            }\n\n            prompt = Console.ReadLine();\n            if (prompt == \"save\")\n            {\n                Console.Write(\"Your path to save model state: \");\n                string modelStatePath = Console.ReadLine();\n                ex.Model.SaveState(modelStatePath);\n\n                Console.Write(\"Your path to save executor state: \");\n                string executorStatePath = Console.ReadLine();\n                ex.SaveState(executorStatePath);\n\n                Console.ForegroundColor = ConsoleColor.Yellow;\n                Console.WriteLine(\"All states saved!\");\n                Console.ForegroundColor = ConsoleColor.White;\n\n                var model = ex.Model;\n                model.LoadState(modelStatePath);\n                ex = new InteractiveExecutor(model);\n                ex.LoadState(executorStatePath);\n                Console.ForegroundColor = ConsoleColor.Yellow;\n                Console.WriteLine(\"Loaded state!\");\n                Console.ForegroundColor = ConsoleColor.White;\n\n                Console.Write(\"Now you can continue your session: \");\n                Console.ForegroundColor = ConsoleColor.Green;\n                prompt = Console.ReadLine();\n                Console.ForegroundColor = ConsoleColor.White;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Examples/QuantizeModel/","title":"Quantize model","text":"<pre><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class QuantizeModel\n{\n    public static void Run()\n    {\n        Console.Write(\"Please input your original model path: \");\n        var inputPath = Console.ReadLine();\n        Console.Write(\"Please input your output model path: \");\n        var outputPath = Console.ReadLine();\n        Console.Write(\"Please input the quantize type (one of q4_0, q4_1, q5_0, q5_1, q8_0): \");\n        var quantizeType = Console.ReadLine();\n        if (LLamaQuantizer.Quantize(inputPath, outputPath, quantizeType))\n        {\n            Console.WriteLine(\"Quantization succeed!\");\n        }\n        else\n        {\n            Console.WriteLine(\"Quantization failed!\");\n        }\n    }\n}\n</code></pre>"},{"location":"Examples/StatelessModeExecute/","title":"Use stateless exeutor","text":"<pre><code>using LLama.Common;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\npublic class StatelessModeExecute\n{\n    public static void Run()\n    {\n        Console.Write(\"Please input your model path: \");\n        string modelPath = Console.ReadLine();\n\n        StatelessExecutor ex = new(new LLamaModel(new ModelParams(modelPath, contextSize: 256)));\n\n        Console.ForegroundColor = ConsoleColor.Yellow;\n        Console.WriteLine(\"The executor has been enabled. In this example, the inference is an one-time job. That says, the previous input and response has \" +\n            \"no impact on the current response. Now you can ask it questions. Note that in this example, no prompt was set for LLM and the maximum response tokens is 50. \" +\n            \"It may not perform well because of lack of prompt. This is also an example that could indicate the improtance of prompt in LLM. To improve it, you can add \" +\n            \"a prompt for it yourself!\");\n        Console.ForegroundColor = ConsoleColor.White;\n\n        var inferenceParams = new InferenceParams() { Temperature = 0.6f, AntiPrompts = new List&lt;string&gt; { \"Question:\", \"#\", \"Question: \", \".\\n\" }, MaxTokens = 50 };\n\n        while (true)\n        {\n            Console.Write(\"\\nQuestion: \");\n            Console.ForegroundColor = ConsoleColor.Green;\n            string prompt = Console.ReadLine();\n            Console.ForegroundColor = ConsoleColor.White; \n            Console.Write(\"Answer: \");\n            prompt = $\"Question: {prompt.Trim()} Answer: \";\n            foreach (var text in ex.Infer(prompt, inferenceParams))\n            {\n                Console.Write(text);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"HighLevelApps/bot-sharp/","title":"The Usage of BotSharp Integration","text":"<p>The document is under work, please have a wait. Thank you for your support! :)</p>"},{"location":"LLamaExecutors/differences/","title":"Differences of Executors","text":""},{"location":"LLamaExecutors/differences/#differences-between-the-executors","title":"Differences between the executors","text":"<p>There're currently three kinds of executors provided, which are <code>InteractiveExecutor</code>, <code>InstructExecutor</code> and <code>StatelessExecutor</code>.</p> <p>In a word, <code>InteractiveExecutor</code> is suitable for getting answer of your questions from LLM continuously. <code>InstructExecutor</code> let LLM execute your instructions, such as \"continue writing\". <code>StatelessExecutor</code> is best for one-time job because the previous inference has no impact on the current inference.</p>"},{"location":"LLamaExecutors/differences/#interactive-mode-instruct-mode","title":"Interactive mode &amp; Instruct mode","text":"<p>Both of them are taking \"completing the prompt\" as the goal to generate the response. For example, if you input <code>Long long ago, there was a fox who wanted to make friend with humen. One day</code>, then the LLM will continue to write the story.</p> <p>Under interactive mode, you serve a role of user and the LLM serves the role of assistant. Then it will help you with your question or request. </p> <p>Under instruct mode, you give LLM some instructions and it follows.</p> <p>Though the behaviors of them sounds similar, it could introduce many differences depending on your prompt. For example, \"chat-with-bob\" has good performance under interactive mode and <code>alpaca</code> does well with instruct mode.</p> <pre><code>// chat-with-bob\n\nTranscript of a dialog, where the User interacts with an Assistant named Bob. Bob is helpful, kind, honest, good at writing, and never fails to answer the User's requests immediately and with precision.\n\nUser: Hello, Bob.\nBob: Hello. How may I help you today?\nUser: Please tell me the largest city in Europe.\nBob: Sure. The largest city in Europe is Moscow, the capital of Russia.\nUser:\n</code></pre> <pre><code>// alpaca\n\nBelow is an instruction that describes a task. Write a response that appropriately completes the request.\n</code></pre> <p>Therefore, please modify the prompt correspondingly when switching from one mode to the other.</p>"},{"location":"LLamaExecutors/differences/#stateful-mode-and-stateless-mode","title":"Stateful mode and Stateless mode.","text":"<p>Despite the differences between interactive mode and instruct mode, both of them are stateful mode. That is, your previous question/instruction will impact on the current response from LLM. On the contrary, the steteless executor does not have such a \"memory\". No matter how many times you talk to it, it will only concentrate on what you say in this time.</p> <p>Since the stateless executor has no memory of conversations before, you need to input your question with the whole prompt into it to get the better answer.</p> <p>For example, if you feed <code>Q: Who is Trump? A:</code> to the steteless executor, it may give the following answer with the antiprompt <code>Q:</code>.</p> <pre><code>Donald J. Trump, born June 14, 1946, is an American businessman, television personality, politician and the 45th President of the United States (2017-2021). # Anexo:Torneo de Hamburgo 2022 (individual masculino)\n\n## Presentaci\u00f3n previa\n\n* Defensor del t\u00edtulo:  Daniil Medv\u00e9dev\n</code></pre> <p>It seems that things went well at first. However, after answering the question itself, LLM began to talk about some other things until the answer reached the token count limit. The reason of this strange behavior is the anti-prompt cannot be match. With the input, LLM cannot decide whether to append a string \"A: \" at the end of the response.</p> <p>As an improvement, let's take the following text as the input:</p> <pre><code>Q: What is the capital of the USA? A: Washingtong. Q: What is the sum of 1 and 2? A: 3. Q: Who is Trump? A: \n</code></pre> <p>Then, I got the following answer with the anti-prompt <code>Q:</code>.</p> <pre><code>45th president of the United States.\n</code></pre> <p>At this time, by repeating the same mode of <code>Q: xxx? A: xxx.</code>, LLM outputs the anti-prompt we want to help to decide where to dtop the generation.</p>"},{"location":"LLamaExecutors/parameters/","title":"Inference Parameters","text":"<p>Different from <code>LLamaModel</code>, when using an exeuctor, <code>InferenceParams</code> is passed to the <code>Infer</code> method instead of constructor. This is because executors only define the ways to run the model, therefore in each run, you can change the settings for this time inference.</p>"},{"location":"LLamaExecutors/parameters/#inferenceparams","title":"InferenceParams","text":"<p>Namespace: LLama.Common</p> <pre><code>public class InferenceParams\n</code></pre> <p>Inheritance Object \u2192 InferenceParams</p>"},{"location":"LLamaExecutors/parameters/#properties","title":"Properties","text":""},{"location":"LLamaExecutors/parameters/#tokenskeep","title":"TokensKeep","text":"<p>number of tokens to keep from initial prompt</p> <pre><code>public int TokensKeep { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"LLamaExecutors/parameters/#maxtokens","title":"MaxTokens","text":"<p>how many new tokens to predict (n_predict), set to -1 to inifinitely generate response  until it complete.</p> <pre><code>public int MaxTokens { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"LLamaExecutors/parameters/#logitbias","title":"LogitBias","text":"<p>logit bias for specific tokens</p> <pre><code>public Dictionary&lt;int, float&gt; LogitBias { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_2","title":"Property Value","text":"<p>Dictionary&lt;Int32, Single&gt;</p>"},{"location":"LLamaExecutors/parameters/#antiprompts","title":"AntiPrompts","text":"<p>Sequences where the model will stop generating further tokens.</p> <pre><code>public IEnumerable&lt;string&gt; AntiPrompts { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_3","title":"Property Value","text":"<p>IEnumerable&lt;String&gt;</p>"},{"location":"LLamaExecutors/parameters/#pathsession","title":"PathSession","text":"<p>path to file for saving/loading model eval state</p> <pre><code>public string PathSession { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_4","title":"Property Value","text":"<p>String</p>"},{"location":"LLamaExecutors/parameters/#inputsuffix","title":"InputSuffix","text":"<p>string to suffix user inputs with</p> <pre><code>public string InputSuffix { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_5","title":"Property Value","text":"<p>String</p>"},{"location":"LLamaExecutors/parameters/#inputprefix","title":"InputPrefix","text":"<p>string to prefix user inputs with</p> <pre><code>public string InputPrefix { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_6","title":"Property Value","text":"<p>String</p>"},{"location":"LLamaExecutors/parameters/#topk","title":"TopK","text":"<p>0 or lower to use vocab size</p> <pre><code>public int TopK { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_7","title":"Property Value","text":"<p>Int32</p>"},{"location":"LLamaExecutors/parameters/#topp","title":"TopP","text":"<p>1.0 = disabled</p> <pre><code>public float TopP { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_8","title":"Property Value","text":"<p>Single</p>"},{"location":"LLamaExecutors/parameters/#tfsz","title":"TfsZ","text":"<p>1.0 = disabled</p> <pre><code>public float TfsZ { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_9","title":"Property Value","text":"<p>Single</p>"},{"location":"LLamaExecutors/parameters/#typicalp","title":"TypicalP","text":"<p>1.0 = disabled</p> <pre><code>public float TypicalP { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_10","title":"Property Value","text":"<p>Single</p>"},{"location":"LLamaExecutors/parameters/#temperature","title":"Temperature","text":"<p>1.0 = disabled</p> <pre><code>public float Temperature { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_11","title":"Property Value","text":"<p>Single</p>"},{"location":"LLamaExecutors/parameters/#repeatpenalty","title":"RepeatPenalty","text":"<p>1.0 = disabled</p> <pre><code>public float RepeatPenalty { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_12","title":"Property Value","text":"<p>Single</p>"},{"location":"LLamaExecutors/parameters/#repeatlasttokenscount","title":"RepeatLastTokensCount","text":"<p>last n tokens to penalize (0 = disable penalty, -1 = context size) (repeat_last_n)</p> <pre><code>public int RepeatLastTokensCount { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_13","title":"Property Value","text":"<p>Int32</p>"},{"location":"LLamaExecutors/parameters/#frequencypenalty","title":"FrequencyPenalty","text":"<p>frequency penalty coefficient  0.0 = disabled</p> <pre><code>public float FrequencyPenalty { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_14","title":"Property Value","text":"<p>Single</p>"},{"location":"LLamaExecutors/parameters/#presencepenalty","title":"PresencePenalty","text":"<p>presence penalty coefficient  0.0 = disabled</p> <pre><code>public float PresencePenalty { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_15","title":"Property Value","text":"<p>Single</p>"},{"location":"LLamaExecutors/parameters/#mirostat","title":"Mirostat","text":"<p>Mirostat uses tokens instead of words.  algorithm described in the paper https://arxiv.org/abs/2007.14966.  0 = disabled, 1 = mirostat, 2 = mirostat 2.0</p> <pre><code>public MiroStateType Mirostat { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_16","title":"Property Value","text":"<p>MiroStateType</p>"},{"location":"LLamaExecutors/parameters/#mirostattau","title":"MirostatTau","text":"<p>target entropy</p> <pre><code>public float MirostatTau { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_17","title":"Property Value","text":"<p>Single</p>"},{"location":"LLamaExecutors/parameters/#mirostateta","title":"MirostatEta","text":"<p>learning rate</p> <pre><code>public float MirostatEta { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_18","title":"Property Value","text":"<p>Single</p>"},{"location":"LLamaExecutors/parameters/#penalizenl","title":"PenalizeNL","text":"<p>consider newlines as a repeatable token (penalize_nl)</p> <pre><code>public bool PenalizeNL { get; set; }\n</code></pre>"},{"location":"LLamaExecutors/parameters/#property-value_19","title":"Property Value","text":"<p>Boolean</p>"},{"location":"LLamaExecutors/save-load-state/","title":"Save/Load State of Executor","text":"<p>Similar to <code>LLamaModel</code>, an executor also has its state, which can be saved and loaded. Note that in most of cases, the state of executor and the state of the model should be loaded and saved at the same time. </p> <p>To decouple the model and executor, we provide APIs to save/load state for model and executor respectively. However, during the inference, the processed information will leave footprint in <code>LLamaModel</code>'s native context. Therefore, if you just load a state from another executor but keep the model unmodified, some strange things may happen. So will loading model state only.</p> <p>Is there a condition that requires to load one of them only? The answer is YES. For example, after resetting the model state, if you don't want the inference starting from the new position, leaving the executor unmodified is okay. But, anyway, this flexible usage may cause some unexpected behaviors, therefore please ensure you know what you're doing before using it in this way.</p> <p>In the future version, we'll open the access for some variables inside the executor to support more flexible usages.</p> <p>The APIs to load/save state of the executors is similar to that of <code>LLamaModel</code>. However, note that <code>StatelessExecutor</code> doesn't have such APIs because it's stateless itself. Besides, the output of <code>GetStateData</code> is an object of type <code>ExecutorBaseState</code>.</p> <pre><code>LLamaModel model = new LLamaModel(new ModelParams(\"&lt;modelPath&gt;\"));\nInteractiveExecutor executor = new InteractiveExecutor(model);\n// do some things...\nexecutor.SaveState(\"executor.st\");\nvar stateData = model.GetStateData();\n\nInteractiveExecutor executor2 = new InteractiveExecutor(model);\nexecutor2.LoadState(stateData);\n// do some things...\n\nInteractiveExecutor executor3 = new InteractiveExecutor(model);\nexecutor3.LoadState(\"executor.st\");\n// do some things...\n</code></pre>"},{"location":"LLamaExecutors/text-to-text-apis/","title":"Text-to-Text APIs of the executors","text":"<p>All the executors implements the interface <code>ILLamaExecutor</code>, which provides two APIs to execute text-to-text tasks.</p> <pre><code>public interface ILLamaExecutor\n{\n    public LLamaModel Model { get; }\n\n    IEnumerable&lt;string&gt; Infer(string text, InferenceParams? inferenceParams = null, CancellationToken token = default);\n\n    IAsyncEnumerable&lt;string&gt; InferAsync(string text, InferenceParams? inferenceParams = null, CancellationToken token = default);\n}\n</code></pre> <p>Just pass the text to the executor with the inference parameters. For the inference parameters, please refer to executor inference parameters doc.</p> <p>The output of both two APIs are yield enumerable. Therefore, when receiving the output, you can directly use <code>foreach</code> to take actions on each word you get by order, instead of waiting for the whole process completed.</p>"},{"location":"LLamaModel/embeddings/","title":"Get Embeddings","text":"<p>Getting the embeddings of a text in LLM is sometimes useful, for example, to train other MLP models.</p> <p>To get the embeddings, please initialize a <code>LLamaEmbedder</code> and then call <code>GetEmbeddings</code>.</p> <pre><code>var embedder = new LLamaEmbedder(new ModelParams(\"&lt;modelPath&gt;\"));\nstring text = \"hello, LLM.\";\nfloat[] embeddings = embedder.GetEmbeddings(text);\n</code></pre> <p>The output is a float array. Note that the length of the array is related with the model you load. If you just want to get a smaller size embedding, please consider changing a model.</p>"},{"location":"LLamaModel/parameters/","title":"LLamaModel Parameters","text":"<p>When initializing a <code>LLamaModel</code> object, there're three parameters, <code>ModelParams Params, string encoding = \"UTF-8\", ILLamaLogger? logger = null</code>.</p> <p>The usage of <code>logger</code> will be further introduced in logger doc. The <code>encoding</code> is the encoding you want to use when dealing with text via this model.</p> <p>The most improtant of all, is the <code>ModelParams</code>, which is defined as below. We'll explain the parameters step by step in this document.</p> <pre><code>public class ModelParams\n{\n    public int ContextSize { get; set; } = 512;\n    public int GpuLayerCount { get; set; } = 20;\n    public int Seed { get; set; } = 1686349486;\n    public bool UseFp16Memory { get; set; } = true;\n    public bool UseMemorymap { get; set; } = true;\n    public bool UseMemoryLock { get; set; } = false;\n    public bool Perplexity { get; set; } = false;\n    public string ModelPath { get; set; }\n    public string LoraAdapter { get; set; } = string.Empty;\n    public string LoraBase { get; set; } = string.Empty;\n    public int Threads { get; set; } = Math.Max(Environment.ProcessorCount / 2, 1);\n    public int BatchSize { get; set; } = 512;\n    public bool ConvertEosToNewLine { get; set; } = false;\n}\n</code></pre>"},{"location":"LLamaModel/parameters/#modelparams","title":"ModelParams","text":"<p>Namespace: LLama.Common</p> <pre><code>public class ModelParams\n</code></pre> <p>Inheritance Object \u2192 ModelParams</p>"},{"location":"LLamaModel/parameters/#properties","title":"Properties","text":""},{"location":"LLamaModel/parameters/#contextsize","title":"ContextSize","text":"<p>Model context size (n_ctx)</p> <pre><code>public int ContextSize { get; set; }\n</code></pre>"},{"location":"LLamaModel/parameters/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"LLamaModel/parameters/#gpulayercount","title":"GpuLayerCount","text":"<p>Number of layers to run in VRAM / GPU memory (n_gpu_layers)</p> <pre><code>public int GpuLayerCount { get; set; }\n</code></pre>"},{"location":"LLamaModel/parameters/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"LLamaModel/parameters/#seed","title":"Seed","text":"<p>Seed for the random number generator (seed)</p> <pre><code>public int Seed { get; set; }\n</code></pre>"},{"location":"LLamaModel/parameters/#property-value_2","title":"Property Value","text":"<p>Int32</p>"},{"location":"LLamaModel/parameters/#usefp16memory","title":"UseFp16Memory","text":"<p>Use f16 instead of f32 for memory kv (memory_f16)</p> <pre><code>public bool UseFp16Memory { get; set; }\n</code></pre>"},{"location":"LLamaModel/parameters/#property-value_3","title":"Property Value","text":"<p>Boolean</p>"},{"location":"LLamaModel/parameters/#usememorymap","title":"UseMemorymap","text":"<p>Use mmap for faster loads (use_mmap)</p> <pre><code>public bool UseMemorymap { get; set; }\n</code></pre>"},{"location":"LLamaModel/parameters/#property-value_4","title":"Property Value","text":"<p>Boolean</p>"},{"location":"LLamaModel/parameters/#usememorylock","title":"UseMemoryLock","text":"<p>Use mlock to keep model in memory (use_mlock)</p> <pre><code>public bool UseMemoryLock { get; set; }\n</code></pre>"},{"location":"LLamaModel/parameters/#property-value_5","title":"Property Value","text":"<p>Boolean</p>"},{"location":"LLamaModel/parameters/#perplexity","title":"Perplexity","text":"<p>Compute perplexity over the prompt (perplexity)</p> <pre><code>public bool Perplexity { get; set; }\n</code></pre>"},{"location":"LLamaModel/parameters/#property-value_6","title":"Property Value","text":"<p>Boolean</p>"},{"location":"LLamaModel/parameters/#modelpath","title":"ModelPath","text":"<p>Model path (model)</p> <pre><code>public string ModelPath { get; set; }\n</code></pre>"},{"location":"LLamaModel/parameters/#property-value_7","title":"Property Value","text":"<p>String</p>"},{"location":"LLamaModel/parameters/#loraadapter","title":"LoraAdapter","text":"<p>lora adapter path (lora_adapter)</p> <pre><code>public string LoraAdapter { get; set; }\n</code></pre>"},{"location":"LLamaModel/parameters/#property-value_8","title":"Property Value","text":"<p>String</p>"},{"location":"LLamaModel/parameters/#lorabase","title":"LoraBase","text":"<p>base model path for the lora adapter (lora_base)</p> <pre><code>public string LoraBase { get; set; }\n</code></pre>"},{"location":"LLamaModel/parameters/#property-value_9","title":"Property Value","text":"<p>String</p>"},{"location":"LLamaModel/parameters/#threads","title":"Threads","text":"<p>Number of threads (-1 = autodetect) (n_threads)</p> <pre><code>public int Threads { get; set; }\n</code></pre>"},{"location":"LLamaModel/parameters/#property-value_10","title":"Property Value","text":"<p>Int32</p>"},{"location":"LLamaModel/parameters/#batchsize","title":"BatchSize","text":"<p>batch size for prompt processing (must be &gt;=32 to use BLAS) (n_batch)</p> <pre><code>public int BatchSize { get; set; }\n</code></pre>"},{"location":"LLamaModel/parameters/#property-value_11","title":"Property Value","text":"<p>Int32</p>"},{"location":"LLamaModel/parameters/#converteostonewline","title":"ConvertEosToNewLine","text":"<p>Whether to convert eos to newline during the inference.</p> <pre><code>public bool ConvertEosToNewLine { get; set; }\n</code></pre>"},{"location":"LLamaModel/parameters/#property-value_12","title":"Property Value","text":"<p>Boolean</p>"},{"location":"LLamaModel/parameters/#embeddingmode","title":"EmbeddingMode","text":"<p>Whether to use embedding mode. (embedding) Note that if this is set to true,   The LLamaModel won't produce text response anymore.</p> <pre><code>public bool EmbeddingMode { get; set; }\n</code></pre>"},{"location":"LLamaModel/parameters/#property-value_13","title":"Property Value","text":"<p>Boolean</p>"},{"location":"LLamaModel/quantization/","title":"Quantization","text":"<p>Quantization is significant to accelerate the model inference. Since there's little accuracy (performance) reduction when quantizing the model, get it easy to quantize it!</p> <p>To quantize the model, please call <code>Quantize</code> from <code>LLamaQuantizer</code>, which is a static method.</p> <pre><code>string srcPath = \"&lt;model.bin&gt;\";\nstring dstPath = \"&lt;model_q4_0.bin&gt;\";\nLLamaQuantizer.Quantize(srcPath, dstPath, \"q4_0\");\n// The following overload is also okay.\n// LLamaQuantizer.Quantize(srcPath, dstPath, LLamaFtype.LLAMA_FTYPE_MOSTLY_Q4_0);\n</code></pre> <p>After calling it, a quantized model file will be saved.</p> <p>There're currently 5 types of quantization supported:</p> <ul> <li>q4_0</li> <li>q4_1</li> <li>q5_0</li> <li>q5_1</li> <li>q8_0</li> </ul>"},{"location":"LLamaModel/save-load-state/","title":"Save/Load State","text":"<p>There're two ways to load state: loading from path and loading from bite array. Therefore, correspondingly, state data can be extracted as byte array or saved to a file.</p> <pre><code>LLamaModel model = new LLamaModel(new ModelParams(\"&lt;modelPath&gt;\"));\n// do some things...\nmodel.SaveState(\"model.st\");\nvar stateData = model.GetStateData();\nmodel.Dispose();\n\nLLamaModel model2 = new LLamaModel(new ModelParams(\"&lt;modelPath&gt;\"));\nmodel2.LoadState(stateData);\n// do some things...\n\nLLamaModel model3 = new LLamaModel(new ModelParams(\"&lt;modelPath&gt;\"));\nmodel3.LoadState(\"model.st\");\n// do some things...\n</code></pre>"},{"location":"LLamaModel/tokenization/","title":"Tokenization/Detokenization","text":"<p>A pair of APIs to make conversion between text and tokens.</p>"},{"location":"LLamaModel/tokenization/#tokenization","title":"Tokenization","text":"<p>The basic usage is to call <code>Tokenize</code> after initializing the model.</p> <pre><code>LLamaModel model = new LLamaModel(new ModelParams(\"&lt;modelPath&gt;\"));\nstring text = \"hello\";\nint[] tokens = model.Tokenize(text).ToArray();\n</code></pre> <p>Depending on different model (or vocab), the output will be various.</p>"},{"location":"LLamaModel/tokenization/#detokenization","title":"Detokenization","text":"<p>Similar to tokenization, just pass an <code>IEnumerable&lt;int&gt;</code> to <code>Detokenize</code> method.</p> <pre><code>LLamaModel model = new LLamaModel(new ModelParams(\"&lt;modelPath&gt;\"));\nint[] tokens = new int[] {125, 2568, 13245};\nstring text = model.Detokenize(tokens);\n</code></pre>"},{"location":"More/log/","title":"The Logger in LLamaSharp","text":"<p>LLamaSharp supports customized logger because it could be used in many kinds of applications, like Winform/WPF, WebAPI and Blazor, so that the preference of logger varies.</p>"},{"location":"More/log/#define-customized-logger","title":"Define customized logger","text":"<p>What you need to do is to implement the <code>ILogger</code> interface. </p> <pre><code>public interface ILLamaLogger\n{\n    public enum LogLevel\n    {\n        Info,\n        Debug,\n        Warning,\n        Error\n    }\n    void Log(string source, string message, LogLevel level);\n}\n</code></pre> <p>The <code>source</code> specifies where the log message is from, which could be a function, a class, etc..</p> <p>The <code>message</code> is the log message itself.</p> <p>The <code>level</code> is the level of the information in the log. As shown above, there're four levels, which are <code>info</code>, <code>debug</code>, <code>warning</code> and <code>error</code> respectively.</p> <p>The following is a simple example of theb logger implementation:</p> <pre><code>public sealed class LLamaDefaultLogger : ILLamaLogger\n{\n    private static readonly Lazy&lt;LLamaDefaultLogger&gt; _instance = new Lazy&lt;LLamaDefaultLogger&gt;(() =&gt; new LLamaDefaultLogger());\n\n    private bool _toConsole = true;\n    private bool _toFile = false;\n\n    private FileStream? _fileStream = null;\n    private StreamWriter _fileWriter = null;\n\n    public static LLamaDefaultLogger Default =&gt; _instance.Value;\n\n    private LLamaDefaultLogger()\n    {\n\n    }\n\n    public LLamaDefaultLogger EnableConsole()\n    {\n        _toConsole = true;\n        return this;\n    }\n\n    public LLamaDefaultLogger DisableConsole()\n    {\n        _toConsole = false;\n        return this;\n    }\n\n    public LLamaDefaultLogger EnableFile(string filename, FileMode mode = FileMode.Append)\n    {\n        _fileStream = new FileStream(filename, mode, FileAccess.Write);\n        _fileWriter = new StreamWriter(_fileStream);\n        _toFile = true;\n        return this;\n    }\n\n    public LLamaDefaultLogger DisableFile(string filename)\n    {\n        if (_fileWriter is not null)\n        {\n            _fileWriter.Close();\n            _fileWriter = null;\n        }\n        if (_fileStream is not null)\n        {\n            _fileStream.Close();\n            _fileStream = null;\n        }\n        _toFile = false;\n        return this;\n    }\n\n    public void Log(string source, string message, LogLevel level)\n    {\n        if (level == LogLevel.Info)\n        {\n            Info(message);\n        }\n        else if (level == LogLevel.Debug)\n        {\n\n        }\n        else if (level == LogLevel.Warning)\n        {\n            Warn(message);\n        }\n        else if (level == LogLevel.Error)\n        {\n            Error(message);\n        }\n    }\n\n    public void Info(string message)\n    {\n        message = MessageFormat(\"info\", message);\n        if (_toConsole)\n        {\n            Console.ForegroundColor = ConsoleColor.White;\n            Console.WriteLine(message);\n            Console.ResetColor();\n        }\n        if (_toFile)\n        {\n            Debug.Assert(_fileStream is not null);\n            Debug.Assert(_fileWriter is not null);\n            _fileWriter.WriteLine(message);\n        }\n    }\n\n    public void Warn(string message)\n    {\n        message = MessageFormat(\"warn\", message);\n        if (_toConsole)\n        {\n            Console.ForegroundColor = ConsoleColor.Yellow;\n            Console.WriteLine(message);\n            Console.ResetColor();\n        }\n        if (_toFile)\n        {\n            Debug.Assert(_fileStream is not null);\n            Debug.Assert(_fileWriter is not null);\n            _fileWriter.WriteLine(message);\n        }\n    }\n\n    public void Error(string message)\n    {\n        message = MessageFormat(\"error\", message);\n        if (_toConsole)\n        {\n            Console.ForegroundColor = ConsoleColor.Red;\n            Console.WriteLine(message);\n            Console.ResetColor();\n        }\n        if (_toFile)\n        {\n            Debug.Assert(_fileStream is not null);\n            Debug.Assert(_fileWriter is not null);\n            _fileWriter.WriteLine(message);\n        }\n    }\n\n    private string MessageFormat(string level, string message)\n    {\n        DateTime now = DateTime.Now;\n        string formattedDate = now.ToString(\"yyyy.MM.dd HH:mm:ss\");\n        return $\"[{formattedDate}][{level}]: {message}\";\n    }\n}\n</code></pre>"},{"location":"NonEnglishUsage/Chinese/","title":"Use LLamaSharp with Chinese","text":"<p>It's supported now but the document is under work. Please wait for some time. Thank you for your support! :)</p>"},{"location":"xmldocs/","title":"LLamaSharp","text":""},{"location":"xmldocs/#llama","title":"LLama","text":"<p>ChatSession</p> <p>InstructExecutor</p> <p>InteractiveExecutor</p> <p>LLamaEmbedder</p> <p>LLamaModel</p> <p>LLamaQuantizer</p> <p>LLamaTransforms</p> <p>ResettableLLamaModel</p> <p>StatefulExecutorBase</p> <p>StatelessExecutor</p>"},{"location":"xmldocs/#llamaabstractions","title":"LLama.Abstractions","text":"<p>IHistoryTransform</p> <p>ILLamaExecutor</p> <p>ITextStreamTransform</p> <p>ITextTransform</p>"},{"location":"xmldocs/#llamacommon","title":"LLama.Common","text":"<p>AuthorRole</p> <p>ChatHistory</p> <p>FixedSizeQueue&lt;T&gt;</p> <p>ILLamaLogger</p> <p>InferenceParams</p> <p>LLamaDefaultLogger</p> <p>MiroStateType</p> <p>ModelParams</p>"},{"location":"xmldocs/#llamaexceptions","title":"LLama.Exceptions","text":"<p>RuntimeError</p>"},{"location":"xmldocs/#llamaextensions","title":"LLama.Extensions","text":"<p>DictionaryExtension</p>"},{"location":"xmldocs/#llamanative","title":"LLama.Native","text":"<p>LLamaContextParams</p> <p>LLamaFtype</p> <p>LLamaTokenData</p> <p>LLamaTokenDataArray</p> <p>LLamaTokenDataArrayNative</p> <p>NativeApi</p> <p>SafeLLamaContextHandle</p> <p>SafeLLamaHandleBase</p>"},{"location":"xmldocs/#llamaoldversion","title":"LLama.OldVersion","text":"<p>ChatCompletion</p> <p>ChatCompletionChoice</p> <p>ChatCompletionChunk</p> <p>ChatCompletionChunkChoice</p> <p>ChatCompletionChunkDelta</p> <p>ChatCompletionMessage</p> <p>ChatMessageRecord</p> <p>ChatRole</p> <p>ChatSession&lt;T&gt;</p> <p>Completion</p> <p>CompletionChoice</p> <p>CompletionChunk</p> <p>CompletionLogprobs</p> <p>CompletionUsage</p> <p>Embedding</p> <p>EmbeddingData</p> <p>EmbeddingUsage</p> <p>IChatModel</p> <p>LLamaEmbedder</p> <p>LLamaModel</p> <p>LLamaParams</p>"},{"location":"xmldocs/llama.abstractions.ihistorytransform/","title":"IHistoryTransform","text":"<p>Namespace: LLama.Abstractions</p> <p>Transform history to plain text and vice versa.</p> <pre><code>public interface IHistoryTransform\n</code></pre>"},{"location":"xmldocs/llama.abstractions.ihistorytransform/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.abstractions.ihistorytransform/#historytotextchathistory","title":"HistoryToText(ChatHistory)","text":"<p>Convert a ChatHistory instance to plain text.</p> <pre><code>string HistoryToText(ChatHistory history)\n</code></pre>"},{"location":"xmldocs/llama.abstractions.ihistorytransform/#parameters","title":"Parameters","text":"<p><code>history</code> ChatHistory The ChatHistory instance</p>"},{"location":"xmldocs/llama.abstractions.ihistorytransform/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.abstractions.ihistorytransform/#texttohistoryauthorrole-string","title":"TextToHistory(AuthorRole, String)","text":"<p>Converts plain text to a ChatHistory instance.</p> <pre><code>ChatHistory TextToHistory(AuthorRole role, string text)\n</code></pre>"},{"location":"xmldocs/llama.abstractions.ihistorytransform/#parameters_1","title":"Parameters","text":"<p><code>role</code> AuthorRole The role for the author.</p> <p><code>text</code> String The chat history as plain text.</p>"},{"location":"xmldocs/llama.abstractions.ihistorytransform/#returns_1","title":"Returns","text":"<p>ChatHistory The updated history.</p>"},{"location":"xmldocs/llama.abstractions.illamaexecutor/","title":"ILLamaExecutor","text":"<p>Namespace: LLama.Abstractions</p> <p>A high level interface for LLama models.</p> <pre><code>public interface ILLamaExecutor\n</code></pre>"},{"location":"xmldocs/llama.abstractions.illamaexecutor/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.abstractions.illamaexecutor/#model","title":"Model","text":"<p>The loaded model for this executor.</p> <pre><code>public abstract LLamaModel Model { get; }\n</code></pre>"},{"location":"xmldocs/llama.abstractions.illamaexecutor/#property-value","title":"Property Value","text":"<p>LLamaModel</p>"},{"location":"xmldocs/llama.abstractions.illamaexecutor/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.abstractions.illamaexecutor/#inferstring-inferenceparams-cancellationtoken","title":"Infer(String, InferenceParams, CancellationToken)","text":"<p>Infers a response from the model.</p> <pre><code>IEnumerable&lt;string&gt; Infer(string text, InferenceParams inferenceParams, CancellationToken token)\n</code></pre>"},{"location":"xmldocs/llama.abstractions.illamaexecutor/#parameters","title":"Parameters","text":"<p><code>text</code> String Your prompt</p> <p><code>inferenceParams</code> InferenceParams Any additional parameters</p> <p><code>token</code> CancellationToken A cancellation token.</p>"},{"location":"xmldocs/llama.abstractions.illamaexecutor/#returns","title":"Returns","text":"<p>IEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.abstractions.illamaexecutor/#inferasyncstring-inferenceparams-cancellationtoken","title":"InferAsync(String, InferenceParams, CancellationToken)","text":"<pre><code>IAsyncEnumerable&lt;string&gt; InferAsync(string text, InferenceParams inferenceParams, CancellationToken token)\n</code></pre>"},{"location":"xmldocs/llama.abstractions.illamaexecutor/#parameters_1","title":"Parameters","text":"<p><code>text</code> String</p> <p><code>inferenceParams</code> InferenceParams</p> <p><code>token</code> CancellationToken</p>"},{"location":"xmldocs/llama.abstractions.illamaexecutor/#returns_1","title":"Returns","text":"<p>IAsyncEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.abstractions.itextstreamtransform/","title":"ITextStreamTransform","text":"<p>Namespace: LLama.Abstractions</p> <p>Takes a stream of tokens and transforms them.</p> <pre><code>public interface ITextStreamTransform\n</code></pre>"},{"location":"xmldocs/llama.abstractions.itextstreamtransform/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.abstractions.itextstreamtransform/#transformienumerablestring","title":"Transform(IEnumerable&lt;String&gt;)","text":"<p>Takes a stream of tokens and transforms them, returning a new stream of tokens.</p> <pre><code>IEnumerable&lt;string&gt; Transform(IEnumerable&lt;string&gt; tokens)\n</code></pre>"},{"location":"xmldocs/llama.abstractions.itextstreamtransform/#parameters","title":"Parameters","text":"<p><code>tokens</code> IEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.abstractions.itextstreamtransform/#returns","title":"Returns","text":"<p>IEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.abstractions.itextstreamtransform/#transformasynciasyncenumerablestring","title":"TransformAsync(IAsyncEnumerable&lt;String&gt;)","text":"<p>Takes a stream of tokens and transforms them, returning a new stream of tokens asynchronously.</p> <pre><code>IAsyncEnumerable&lt;string&gt; TransformAsync(IAsyncEnumerable&lt;string&gt; tokens)\n</code></pre>"},{"location":"xmldocs/llama.abstractions.itextstreamtransform/#parameters_1","title":"Parameters","text":"<p><code>tokens</code> IAsyncEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.abstractions.itextstreamtransform/#returns_1","title":"Returns","text":"<p>IAsyncEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.abstractions.itexttransform/","title":"ITextTransform","text":"<p>Namespace: LLama.Abstractions</p> <p>An interface for text transformations.  These can be used to compose a pipeline of text transformations, such as:  - Tokenization  - Lowercasing  - Punctuation removal  - Trimming  - etc.</p> <pre><code>public interface ITextTransform\n</code></pre>"},{"location":"xmldocs/llama.abstractions.itexttransform/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.abstractions.itexttransform/#transformstring","title":"Transform(String)","text":"<p>Takes a string and transforms it.</p> <pre><code>string Transform(string text)\n</code></pre>"},{"location":"xmldocs/llama.abstractions.itexttransform/#parameters","title":"Parameters","text":"<p><code>text</code> String</p>"},{"location":"xmldocs/llama.abstractions.itexttransform/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.chatsession/","title":"ChatSession","text":"<p>Namespace: LLama</p> <p>The main chat session class.</p> <pre><code>public class ChatSession\n</code></pre> <p>Inheritance Object \u2192 ChatSession</p>"},{"location":"xmldocs/llama.chatsession/#fields","title":"Fields","text":""},{"location":"xmldocs/llama.chatsession/#outputtransform","title":"OutputTransform","text":"<p>The output transform used in this session.</p> <pre><code>public ITextStreamTransform OutputTransform;\n</code></pre>"},{"location":"xmldocs/llama.chatsession/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.chatsession/#executor","title":"Executor","text":"<p>The executor for this session.</p> <pre><code>public ILLamaExecutor Executor { get; }\n</code></pre>"},{"location":"xmldocs/llama.chatsession/#property-value","title":"Property Value","text":"<p>ILLamaExecutor</p>"},{"location":"xmldocs/llama.chatsession/#history","title":"History","text":"<p>The chat history for this session.</p> <pre><code>public ChatHistory History { get; }\n</code></pre>"},{"location":"xmldocs/llama.chatsession/#property-value_1","title":"Property Value","text":"<p>ChatHistory</p>"},{"location":"xmldocs/llama.chatsession/#historytransform","title":"HistoryTransform","text":"<p>The history transform used in this session.</p> <pre><code>public IHistoryTransform HistoryTransform { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.chatsession/#property-value_2","title":"Property Value","text":"<p>IHistoryTransform</p>"},{"location":"xmldocs/llama.chatsession/#inputtransformpipeline","title":"InputTransformPipeline","text":"<p>The input transform pipeline used in this session.</p> <pre><code>public List&lt;ITextTransform&gt; InputTransformPipeline { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.chatsession/#property-value_3","title":"Property Value","text":"<p>List&lt;ITextTransform&gt;</p>"},{"location":"xmldocs/llama.chatsession/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.chatsession/#chatsessionillamaexecutor","title":"ChatSession(ILLamaExecutor)","text":"<pre><code>public ChatSession(ILLamaExecutor executor)\n</code></pre>"},{"location":"xmldocs/llama.chatsession/#parameters","title":"Parameters","text":"<p><code>executor</code> ILLamaExecutor The executor for this session</p>"},{"location":"xmldocs/llama.chatsession/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.chatsession/#withhistorytransformihistorytransform","title":"WithHistoryTransform(IHistoryTransform)","text":"<p>Use a custom history transform.</p> <pre><code>public ChatSession WithHistoryTransform(IHistoryTransform transform)\n</code></pre>"},{"location":"xmldocs/llama.chatsession/#parameters_1","title":"Parameters","text":"<p><code>transform</code> IHistoryTransform</p>"},{"location":"xmldocs/llama.chatsession/#returns","title":"Returns","text":"<p>ChatSession</p>"},{"location":"xmldocs/llama.chatsession/#addinputtransformitexttransform","title":"AddInputTransform(ITextTransform)","text":"<p>Add a text transform to the input transform pipeline.</p> <pre><code>public ChatSession AddInputTransform(ITextTransform transform)\n</code></pre>"},{"location":"xmldocs/llama.chatsession/#parameters_2","title":"Parameters","text":"<p><code>transform</code> ITextTransform</p>"},{"location":"xmldocs/llama.chatsession/#returns_1","title":"Returns","text":"<p>ChatSession</p>"},{"location":"xmldocs/llama.chatsession/#withoutputtransformitextstreamtransform","title":"WithOutputTransform(ITextStreamTransform)","text":"<p>Use a custom output transform.</p> <pre><code>public ChatSession WithOutputTransform(ITextStreamTransform transform)\n</code></pre>"},{"location":"xmldocs/llama.chatsession/#parameters_3","title":"Parameters","text":"<p><code>transform</code> ITextStreamTransform</p>"},{"location":"xmldocs/llama.chatsession/#returns_2","title":"Returns","text":"<p>ChatSession</p>"},{"location":"xmldocs/llama.chatsession/#savesessionstring","title":"SaveSession(String)","text":"<pre><code>public void SaveSession(string path)\n</code></pre>"},{"location":"xmldocs/llama.chatsession/#parameters_4","title":"Parameters","text":"<p><code>path</code> String The directory name to save the session. If the directory does not exist, a new directory will be created.</p>"},{"location":"xmldocs/llama.chatsession/#loadsessionstring","title":"LoadSession(String)","text":"<pre><code>public void LoadSession(string path)\n</code></pre>"},{"location":"xmldocs/llama.chatsession/#parameters_5","title":"Parameters","text":"<p><code>path</code> String The directory name to load the session.</p>"},{"location":"xmldocs/llama.chatsession/#chatchathistory-inferenceparams-cancellationtoken","title":"Chat(ChatHistory, InferenceParams, CancellationToken)","text":"<p>Get the response from the LLama model with chat histories.</p> <pre><code>public IEnumerable&lt;string&gt; Chat(ChatHistory history, InferenceParams inferenceParams, CancellationToken cancellationToken)\n</code></pre>"},{"location":"xmldocs/llama.chatsession/#parameters_6","title":"Parameters","text":"<p><code>history</code> ChatHistory</p> <p><code>inferenceParams</code> InferenceParams</p> <p><code>cancellationToken</code> CancellationToken</p>"},{"location":"xmldocs/llama.chatsession/#returns_3","title":"Returns","text":"<p>IEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.chatsession/#chatstring-inferenceparams-cancellationtoken","title":"Chat(String, InferenceParams, CancellationToken)","text":"<p>Get the response from the LLama model. Note that prompt could not only be the preset words,   but also the question you want to ask.</p> <pre><code>public IEnumerable&lt;string&gt; Chat(string prompt, InferenceParams inferenceParams, CancellationToken cancellationToken)\n</code></pre>"},{"location":"xmldocs/llama.chatsession/#parameters_7","title":"Parameters","text":"<p><code>prompt</code> String</p> <p><code>inferenceParams</code> InferenceParams</p> <p><code>cancellationToken</code> CancellationToken</p>"},{"location":"xmldocs/llama.chatsession/#returns_4","title":"Returns","text":"<p>IEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.chatsession/#chatasyncchathistory-inferenceparams-cancellationtoken","title":"ChatAsync(ChatHistory, InferenceParams, CancellationToken)","text":"<p>Get the response from the LLama model with chat histories.</p> <pre><code>public IAsyncEnumerable&lt;string&gt; ChatAsync(ChatHistory history, InferenceParams inferenceParams, CancellationToken cancellationToken)\n</code></pre>"},{"location":"xmldocs/llama.chatsession/#parameters_8","title":"Parameters","text":"<p><code>history</code> ChatHistory</p> <p><code>inferenceParams</code> InferenceParams</p> <p><code>cancellationToken</code> CancellationToken</p>"},{"location":"xmldocs/llama.chatsession/#returns_5","title":"Returns","text":"<p>IAsyncEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.chatsession/#chatasyncstring-inferenceparams-cancellationtoken","title":"ChatAsync(String, InferenceParams, CancellationToken)","text":"<p>Get the response from the LLama model with chat histories asynchronously.</p> <pre><code>public IAsyncEnumerable&lt;string&gt; ChatAsync(string prompt, InferenceParams inferenceParams, CancellationToken cancellationToken)\n</code></pre>"},{"location":"xmldocs/llama.chatsession/#parameters_9","title":"Parameters","text":"<p><code>prompt</code> String</p> <p><code>inferenceParams</code> InferenceParams</p> <p><code>cancellationToken</code> CancellationToken</p>"},{"location":"xmldocs/llama.chatsession/#returns_6","title":"Returns","text":"<p>IAsyncEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.common.authorrole/","title":"AuthorRole","text":"<p>Namespace: LLama.Common</p> <pre><code>public enum AuthorRole\n</code></pre> <p>Inheritance Object \u2192 ValueType \u2192 Enum \u2192 AuthorRole Implements IComparable, IFormattable, IConvertible</p>"},{"location":"xmldocs/llama.common.authorrole/#fields","title":"Fields","text":"Name Value Description"},{"location":"xmldocs/llama.common.chathistory/","title":"ChatHistory","text":"<p>Namespace: LLama.Common</p> <p>The chat history class</p> <pre><code>public class ChatHistory\n</code></pre> <p>Inheritance Object \u2192 ChatHistory</p>"},{"location":"xmldocs/llama.common.chathistory/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.common.chathistory/#messages","title":"Messages","text":"<p>List of messages in the chat</p> <pre><code>public List&lt;Message&gt; Messages { get; }\n</code></pre>"},{"location":"xmldocs/llama.common.chathistory/#property-value","title":"Property Value","text":"<p>List&lt;Message&gt;</p>"},{"location":"xmldocs/llama.common.chathistory/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.common.chathistory/#chathistory_1","title":"ChatHistory()","text":"<p>Create a new instance of the chat content class</p> <pre><code>public ChatHistory()\n</code></pre>"},{"location":"xmldocs/llama.common.chathistory/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.common.chathistory/#addmessageauthorrole-string","title":"AddMessage(AuthorRole, String)","text":"<p>Add a message to the chat history</p> <pre><code>public void AddMessage(AuthorRole authorRole, string content)\n</code></pre>"},{"location":"xmldocs/llama.common.chathistory/#parameters","title":"Parameters","text":"<p><code>authorRole</code> AuthorRole Role of the message author</p> <p><code>content</code> String Message content</p>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/","title":"FixedSizeQueue&lt;T&gt;","text":"<p>Namespace: LLama.Common</p> <p>A queue with fixed storage size.  Currently it's only a naive implementation and needs to be further optimized in the future.</p> <pre><code>public class FixedSizeQueue&lt;T&gt; : , System.Collections.IEnumerable\n</code></pre>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code></p> <p>Inheritance Object \u2192 FixedSizeQueue&lt;T&gt; Implements IEnumerable&lt;T&gt;, IEnumerable</p>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.common.fixedsizequeue-1/#count","title":"Count","text":"<pre><code>public int Count { get; }\n</code></pre>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#capacity","title":"Capacity","text":"<pre><code>public int Capacity { get; }\n</code></pre>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.common.fixedsizequeue-1/#fixedsizequeueint32","title":"FixedSizeQueue(Int32)","text":"<pre><code>public FixedSizeQueue(int size)\n</code></pre>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#parameters","title":"Parameters","text":"<p><code>size</code> Int32</p>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#fixedsizequeueint32-ienumerablet","title":"FixedSizeQueue(Int32, IEnumerable&lt;T&gt;)","text":"<pre><code>public FixedSizeQueue(int size, IEnumerable&lt;T&gt; data)\n</code></pre>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#parameters_1","title":"Parameters","text":"<p><code>size</code> Int32</p> <p><code>data</code> IEnumerable&lt;T&gt;</p>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.common.fixedsizequeue-1/#fillwitht","title":"FillWith(T)","text":"<pre><code>public FixedSizeQueue&lt;T&gt; FillWith(T value)\n</code></pre>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#parameters_2","title":"Parameters","text":"<p><code>value</code> T</p>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#returns","title":"Returns","text":"<p>FixedSizeQueue&lt;T&gt;</p>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#enqueuet","title":"Enqueue(T)","text":"<p>Enquene an element.</p> <pre><code>public void Enqueue(T item)\n</code></pre>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#parameters_3","title":"Parameters","text":"<p><code>item</code> T</p>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#toarray","title":"ToArray()","text":"<pre><code>public T[] ToArray()\n</code></pre>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#returns_1","title":"Returns","text":"<p>T[]</p>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#getenumerator","title":"GetEnumerator()","text":"<pre><code>public IEnumerator&lt;T&gt; GetEnumerator()\n</code></pre>"},{"location":"xmldocs/llama.common.fixedsizequeue-1/#returns_2","title":"Returns","text":"<p>IEnumerator&lt;T&gt;</p>"},{"location":"xmldocs/llama.common.illamalogger/","title":"ILLamaLogger","text":"<p>Namespace: LLama.Common</p> <pre><code>public interface ILLamaLogger\n</code></pre>"},{"location":"xmldocs/llama.common.illamalogger/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.common.illamalogger/#logstring-string-loglevel","title":"Log(String, String, LogLevel)","text":"<p>Write the log in cosutomized way</p> <pre><code>void Log(string source, string message, LogLevel level)\n</code></pre>"},{"location":"xmldocs/llama.common.illamalogger/#parameters","title":"Parameters","text":"<p><code>source</code> String The source of the log. It may be a method name or class name.</p> <p><code>message</code> String The message.</p> <p><code>level</code> LogLevel The log level.</p>"},{"location":"xmldocs/llama.common.inferenceparams/","title":"InferenceParams","text":"<p>Namespace: LLama.Common</p> <pre><code>public class InferenceParams\n</code></pre> <p>Inheritance Object \u2192 InferenceParams</p>"},{"location":"xmldocs/llama.common.inferenceparams/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.common.inferenceparams/#tokenskeep","title":"TokensKeep","text":"<p>number of tokens to keep from initial prompt</p> <pre><code>public int TokensKeep { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.common.inferenceparams/#maxtokens","title":"MaxTokens","text":"<p>how many new tokens to predict (n_predict), set to -1 to inifinitely generate response  until it complete.</p> <pre><code>public int MaxTokens { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.common.inferenceparams/#logitbias","title":"LogitBias","text":"<p>logit bias for specific tokens</p> <pre><code>public Dictionary&lt;int, float&gt; LogitBias { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_2","title":"Property Value","text":"<p>Dictionary&lt;Int32, Single&gt;</p>"},{"location":"xmldocs/llama.common.inferenceparams/#antiprompts","title":"AntiPrompts","text":"<p>Sequences where the model will stop generating further tokens.</p> <pre><code>public IEnumerable&lt;string&gt; AntiPrompts { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_3","title":"Property Value","text":"<p>IEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.common.inferenceparams/#pathsession","title":"PathSession","text":"<p>path to file for saving/loading model eval state</p> <pre><code>public string PathSession { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_4","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.common.inferenceparams/#inputsuffix","title":"InputSuffix","text":"<p>string to suffix user inputs with</p> <pre><code>public string InputSuffix { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_5","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.common.inferenceparams/#inputprefix","title":"InputPrefix","text":"<p>string to prefix user inputs with</p> <pre><code>public string InputPrefix { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_6","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.common.inferenceparams/#topk","title":"TopK","text":"<p>0 or lower to use vocab size</p> <pre><code>public int TopK { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_7","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.common.inferenceparams/#topp","title":"TopP","text":"<p>1.0 = disabled</p> <pre><code>public float TopP { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_8","title":"Property Value","text":"<p>Single</p>"},{"location":"xmldocs/llama.common.inferenceparams/#tfsz","title":"TfsZ","text":"<p>1.0 = disabled</p> <pre><code>public float TfsZ { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_9","title":"Property Value","text":"<p>Single</p>"},{"location":"xmldocs/llama.common.inferenceparams/#typicalp","title":"TypicalP","text":"<p>1.0 = disabled</p> <pre><code>public float TypicalP { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_10","title":"Property Value","text":"<p>Single</p>"},{"location":"xmldocs/llama.common.inferenceparams/#temperature","title":"Temperature","text":"<p>1.0 = disabled</p> <pre><code>public float Temperature { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_11","title":"Property Value","text":"<p>Single</p>"},{"location":"xmldocs/llama.common.inferenceparams/#repeatpenalty","title":"RepeatPenalty","text":"<p>1.0 = disabled</p> <pre><code>public float RepeatPenalty { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_12","title":"Property Value","text":"<p>Single</p>"},{"location":"xmldocs/llama.common.inferenceparams/#repeatlasttokenscount","title":"RepeatLastTokensCount","text":"<p>last n tokens to penalize (0 = disable penalty, -1 = context size) (repeat_last_n)</p> <pre><code>public int RepeatLastTokensCount { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_13","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.common.inferenceparams/#frequencypenalty","title":"FrequencyPenalty","text":"<p>frequency penalty coefficient  0.0 = disabled</p> <pre><code>public float FrequencyPenalty { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_14","title":"Property Value","text":"<p>Single</p>"},{"location":"xmldocs/llama.common.inferenceparams/#presencepenalty","title":"PresencePenalty","text":"<p>presence penalty coefficient  0.0 = disabled</p> <pre><code>public float PresencePenalty { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_15","title":"Property Value","text":"<p>Single</p>"},{"location":"xmldocs/llama.common.inferenceparams/#mirostat","title":"Mirostat","text":"<p>Mirostat uses tokens instead of words.  algorithm described in the paper https://arxiv.org/abs/2007.14966.  0 = disabled, 1 = mirostat, 2 = mirostat 2.0</p> <pre><code>public MiroStateType Mirostat { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_16","title":"Property Value","text":"<p>MiroStateType</p>"},{"location":"xmldocs/llama.common.inferenceparams/#mirostattau","title":"MirostatTau","text":"<p>target entropy</p> <pre><code>public float MirostatTau { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_17","title":"Property Value","text":"<p>Single</p>"},{"location":"xmldocs/llama.common.inferenceparams/#mirostateta","title":"MirostatEta","text":"<p>learning rate</p> <pre><code>public float MirostatEta { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_18","title":"Property Value","text":"<p>Single</p>"},{"location":"xmldocs/llama.common.inferenceparams/#penalizenl","title":"PenalizeNL","text":"<p>consider newlines as a repeatable token (penalize_nl)</p> <pre><code>public bool PenalizeNL { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.inferenceparams/#property-value_19","title":"Property Value","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.common.inferenceparams/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.common.inferenceparams/#inferenceparams_1","title":"InferenceParams()","text":"<pre><code>public InferenceParams()\n</code></pre>"},{"location":"xmldocs/llama.common.llamadefaultlogger/","title":"LLamaDefaultLogger","text":"<p>Namespace: LLama.Common</p> <p>The default logger of LLamaSharp. On default it write to console. User methods of <code>LLamaLogger.Default</code> to change the behavior.  It's more recommended to inherit <code>ILLamaLogger</code> to cosutomize the behavior.</p> <pre><code>public sealed class LLamaDefaultLogger : ILLamaLogger\n</code></pre> <p>Inheritance Object \u2192 LLamaDefaultLogger Implements ILLamaLogger</p>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.common.llamadefaultlogger/#default","title":"Default","text":"<pre><code>public static LLamaDefaultLogger Default { get; }\n</code></pre>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#property-value","title":"Property Value","text":"<p>LLamaDefaultLogger</p>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.common.llamadefaultlogger/#enableconsole","title":"EnableConsole()","text":"<pre><code>public LLamaDefaultLogger EnableConsole()\n</code></pre>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#returns","title":"Returns","text":"<p>LLamaDefaultLogger</p>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#disableconsole","title":"DisableConsole()","text":"<pre><code>public LLamaDefaultLogger DisableConsole()\n</code></pre>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#returns_1","title":"Returns","text":"<p>LLamaDefaultLogger</p>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#enablefilestring-filemode","title":"EnableFile(String, FileMode)","text":"<pre><code>public LLamaDefaultLogger EnableFile(string filename, FileMode mode)\n</code></pre>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#parameters","title":"Parameters","text":"<p><code>filename</code> String</p> <p><code>mode</code> FileMode</p>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#returns_2","title":"Returns","text":"<p>LLamaDefaultLogger</p>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#disablefilestring","title":"DisableFile(String)","text":"<pre><code>public LLamaDefaultLogger DisableFile(string filename)\n</code></pre>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#parameters_1","title":"Parameters","text":"<p><code>filename</code> String</p>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#returns_3","title":"Returns","text":"<p>LLamaDefaultLogger</p>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#logstring-string-loglevel","title":"Log(String, String, LogLevel)","text":"<pre><code>public void Log(string source, string message, LogLevel level)\n</code></pre>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#parameters_2","title":"Parameters","text":"<p><code>source</code> String</p> <p><code>message</code> String</p> <p><code>level</code> LogLevel</p>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#infostring","title":"Info(String)","text":"<pre><code>public void Info(string message)\n</code></pre>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#parameters_3","title":"Parameters","text":"<p><code>message</code> String</p>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#warnstring","title":"Warn(String)","text":"<pre><code>public void Warn(string message)\n</code></pre>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#parameters_4","title":"Parameters","text":"<p><code>message</code> String</p>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#errorstring","title":"Error(String)","text":"<pre><code>public void Error(string message)\n</code></pre>"},{"location":"xmldocs/llama.common.llamadefaultlogger/#parameters_5","title":"Parameters","text":"<p><code>message</code> String</p>"},{"location":"xmldocs/llama.common.mirostatetype/","title":"MiroStateType","text":"<p>Namespace: LLama.Common</p> <pre><code>public enum MiroStateType\n</code></pre> <p>Inheritance Object \u2192 ValueType \u2192 Enum \u2192 MiroStateType Implements IComparable, IFormattable, IConvertible</p>"},{"location":"xmldocs/llama.common.mirostatetype/#fields","title":"Fields","text":"Name Value Description"},{"location":"xmldocs/llama.common.modelparams/","title":"ModelParams","text":"<p>Namespace: LLama.Common</p> <pre><code>public class ModelParams\n</code></pre> <p>Inheritance Object \u2192 ModelParams</p>"},{"location":"xmldocs/llama.common.modelparams/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.common.modelparams/#contextsize","title":"ContextSize","text":"<p>Model context size (n_ctx)</p> <pre><code>public int ContextSize { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.modelparams/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.common.modelparams/#gpulayercount","title":"GpuLayerCount","text":"<p>Number of layers to run in VRAM / GPU memory (n_gpu_layers)</p> <pre><code>public int GpuLayerCount { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.modelparams/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.common.modelparams/#seed","title":"Seed","text":"<p>Seed for the random number generator (seed)</p> <pre><code>public int Seed { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.modelparams/#property-value_2","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.common.modelparams/#usefp16memory","title":"UseFp16Memory","text":"<p>Use f16 instead of f32 for memory kv (memory_f16)</p> <pre><code>public bool UseFp16Memory { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.modelparams/#property-value_3","title":"Property Value","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.common.modelparams/#usememorymap","title":"UseMemorymap","text":"<p>Use mmap for faster loads (use_mmap)</p> <pre><code>public bool UseMemorymap { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.modelparams/#property-value_4","title":"Property Value","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.common.modelparams/#usememorylock","title":"UseMemoryLock","text":"<p>Use mlock to keep model in memory (use_mlock)</p> <pre><code>public bool UseMemoryLock { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.modelparams/#property-value_5","title":"Property Value","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.common.modelparams/#perplexity","title":"Perplexity","text":"<p>Compute perplexity over the prompt (perplexity)</p> <pre><code>public bool Perplexity { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.modelparams/#property-value_6","title":"Property Value","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.common.modelparams/#modelpath","title":"ModelPath","text":"<p>Model path (model)</p> <pre><code>public string ModelPath { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.modelparams/#property-value_7","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.common.modelparams/#loraadapter","title":"LoraAdapter","text":"<p>lora adapter path (lora_adapter)</p> <pre><code>public string LoraAdapter { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.modelparams/#property-value_8","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.common.modelparams/#lorabase","title":"LoraBase","text":"<p>base model path for the lora adapter (lora_base)</p> <pre><code>public string LoraBase { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.modelparams/#property-value_9","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.common.modelparams/#threads","title":"Threads","text":"<p>Number of threads (-1 = autodetect) (n_threads)</p> <pre><code>public int Threads { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.modelparams/#property-value_10","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.common.modelparams/#batchsize","title":"BatchSize","text":"<p>batch size for prompt processing (must be &gt;=32 to use BLAS) (n_batch)</p> <pre><code>public int BatchSize { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.modelparams/#property-value_11","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.common.modelparams/#converteostonewline","title":"ConvertEosToNewLine","text":"<p>Whether to convert eos to newline during the inference.</p> <pre><code>public bool ConvertEosToNewLine { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.modelparams/#property-value_12","title":"Property Value","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.common.modelparams/#embeddingmode","title":"EmbeddingMode","text":"<p>Whether to use embedding mode. (embedding) Note that if this is set to true,   The LLamaModel won't produce text response anymore.</p> <pre><code>public bool EmbeddingMode { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.common.modelparams/#property-value_13","title":"Property Value","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.common.modelparams/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.common.modelparams/#modelparamsstring-int32-int32-int32-boolean-boolean-boolean-boolean-string-string-int32-int32-boolean-boolean","title":"ModelParams(String, Int32, Int32, Int32, Boolean, Boolean, Boolean, Boolean, String, String, Int32, Int32, Boolean, Boolean)","text":"<pre><code>public ModelParams(string modelPath, int contextSize, int gpuLayerCount, int seed, bool useFp16Memory, bool useMemorymap, bool useMemoryLock, bool perplexity, string loraAdapter, string loraBase, int threads, int batchSize, bool convertEosToNewLine, bool embeddingMode)\n</code></pre>"},{"location":"xmldocs/llama.common.modelparams/#parameters","title":"Parameters","text":"<p><code>modelPath</code> String The model path.</p> <p><code>contextSize</code> Int32 Model context size (n_ctx)</p> <p><code>gpuLayerCount</code> Int32 Number of layers to run in VRAM / GPU memory (n_gpu_layers)</p> <p><code>seed</code> Int32 Seed for the random number generator (seed)</p> <p><code>useFp16Memory</code> Boolean Whether to use f16 instead of f32 for memory kv (memory_f16)</p> <p><code>useMemorymap</code> Boolean Whether to use mmap for faster loads (use_mmap)</p> <p><code>useMemoryLock</code> Boolean Whether to use mlock to keep model in memory (use_mlock)</p> <p><code>perplexity</code> Boolean Thether to compute perplexity over the prompt (perplexity)</p> <p><code>loraAdapter</code> String Lora adapter path (lora_adapter)</p> <p><code>loraBase</code> String Base model path for the lora adapter (lora_base)</p> <p><code>threads</code> Int32 Number of threads (-1 = autodetect) (n_threads)</p> <p><code>batchSize</code> Int32 Batch size for prompt processing (must be &gt;=32 to use BLAS) (n_batch)</p> <p><code>convertEosToNewLine</code> Boolean Whether to convert eos to newline during the inference.</p> <p><code>embeddingMode</code> Boolean Whether to use embedding mode. (embedding) Note that if this is set to true, The LLamaModel won't produce text response anymore.</p>"},{"location":"xmldocs/llama.exceptions.runtimeerror/","title":"RuntimeError","text":"<p>Namespace: LLama.Exceptions</p> <pre><code>public class RuntimeError : System.Exception, System.Runtime.Serialization.ISerializable\n</code></pre> <p>Inheritance Object \u2192 Exception \u2192 RuntimeError Implements ISerializable</p>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.exceptions.runtimeerror/#targetsite","title":"TargetSite","text":"<pre><code>public MethodBase TargetSite { get; }\n</code></pre>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#property-value","title":"Property Value","text":"<p>MethodBase</p>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#message","title":"Message","text":"<pre><code>public string Message { get; }\n</code></pre>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#property-value_1","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#data","title":"Data","text":"<pre><code>public IDictionary Data { get; }\n</code></pre>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#property-value_2","title":"Property Value","text":"<p>IDictionary</p>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#innerexception","title":"InnerException","text":"<pre><code>public Exception InnerException { get; }\n</code></pre>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#property-value_3","title":"Property Value","text":"<p>Exception</p>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#helplink","title":"HelpLink","text":"<pre><code>public string HelpLink { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#property-value_4","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#source","title":"Source","text":"<pre><code>public string Source { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#property-value_5","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#hresult","title":"HResult","text":"<pre><code>public int HResult { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#property-value_6","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#stacktrace","title":"StackTrace","text":"<pre><code>public string StackTrace { get; }\n</code></pre>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#property-value_7","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.exceptions.runtimeerror/#runtimeerror_1","title":"RuntimeError()","text":"<pre><code>public RuntimeError()\n</code></pre>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#runtimeerrorstring","title":"RuntimeError(String)","text":"<pre><code>public RuntimeError(string message)\n</code></pre>"},{"location":"xmldocs/llama.exceptions.runtimeerror/#parameters","title":"Parameters","text":"<p><code>message</code> String</p>"},{"location":"xmldocs/llama.extensions.dictionaryextension/","title":"DictionaryExtension","text":"<p>Namespace: LLama.Extensions</p> <pre><code>public static class DictionaryExtension\n</code></pre> <p>Inheritance Object \u2192 DictionaryExtension</p>"},{"location":"xmldocs/llama.extensions.dictionaryextension/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.extensions.dictionaryextension/#deconstructt1-t2keyvaluepairt1-t2-t1-t2","title":"Deconstruct&lt;T1, T2&gt;(KeyValuePair&lt;T1, T2&gt;, T1&amp;, T2&amp;)","text":"<pre><code>public static void Deconstruct&lt;T1, T2&gt;(KeyValuePair&lt;T1, T2&gt; pair, T1&amp; first, T2&amp; second)\n</code></pre>"},{"location":"xmldocs/llama.extensions.dictionaryextension/#type-parameters","title":"Type Parameters","text":"<p><code>T1</code></p> <p><code>T2</code></p>"},{"location":"xmldocs/llama.extensions.dictionaryextension/#parameters","title":"Parameters","text":"<p><code>pair</code> KeyValuePair&lt;T1, T2&gt;</p> <p><code>first</code> T1&amp;</p> <p><code>second</code> T2&amp;</p>"},{"location":"xmldocs/llama.extensions.dictionaryextension/#updatet1-t2dictionaryt1-t2-idictionaryt1-t2","title":"Update&lt;T1, T2&gt;(Dictionary&lt;T1, T2&gt;, IDictionary&lt;T1, T2&gt;)","text":"<pre><code>public static void Update&lt;T1, T2&gt;(Dictionary&lt;T1, T2&gt; dic, IDictionary&lt;T1, T2&gt; other)\n</code></pre>"},{"location":"xmldocs/llama.extensions.dictionaryextension/#type-parameters_1","title":"Type Parameters","text":"<p><code>T1</code></p> <p><code>T2</code></p>"},{"location":"xmldocs/llama.extensions.dictionaryextension/#parameters_1","title":"Parameters","text":"<p><code>dic</code> Dictionary&lt;T1, T2&gt;</p> <p><code>other</code> IDictionary&lt;T1, T2&gt;</p>"},{"location":"xmldocs/llama.extensions.dictionaryextension/#getordefaultt1-t2dictionaryt1-t2-t1-t2","title":"GetOrDefault&lt;T1, T2&gt;(Dictionary&lt;T1, T2&gt;, T1, T2)","text":"<pre><code>public static T2 GetOrDefault&lt;T1, T2&gt;(Dictionary&lt;T1, T2&gt; dic, T1 key, T2 defaultValue)\n</code></pre>"},{"location":"xmldocs/llama.extensions.dictionaryextension/#type-parameters_2","title":"Type Parameters","text":"<p><code>T1</code></p> <p><code>T2</code></p>"},{"location":"xmldocs/llama.extensions.dictionaryextension/#parameters_2","title":"Parameters","text":"<p><code>dic</code> Dictionary&lt;T1, T2&gt;</p> <p><code>key</code> T1</p> <p><code>defaultValue</code> T2</p>"},{"location":"xmldocs/llama.extensions.dictionaryextension/#returns","title":"Returns","text":"<p>T2</p>"},{"location":"xmldocs/llama.instructexecutor/","title":"InstructExecutor","text":"<p>Namespace: LLama</p> <p>The LLama executor for instruct mode.</p> <pre><code>public class InstructExecutor : StatefulExecutorBase, LLama.Abstractions.ILLamaExecutor\n</code></pre> <p>Inheritance Object \u2192 StatefulExecutorBase \u2192 InstructExecutor Implements ILLamaExecutor</p>"},{"location":"xmldocs/llama.instructexecutor/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.instructexecutor/#model","title":"Model","text":"<p>The mode used by the executor.</p> <pre><code>public LLamaModel Model { get; }\n</code></pre>"},{"location":"xmldocs/llama.instructexecutor/#property-value","title":"Property Value","text":"<p>LLamaModel</p>"},{"location":"xmldocs/llama.instructexecutor/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.instructexecutor/#instructexecutorllamamodel-string-string","title":"InstructExecutor(LLamaModel, String, String)","text":"<pre><code>public InstructExecutor(LLamaModel model, string instructionPrefix, string instructionSuffix)\n</code></pre>"},{"location":"xmldocs/llama.instructexecutor/#parameters","title":"Parameters","text":"<p><code>model</code> LLamaModel</p> <p><code>instructionPrefix</code> String</p> <p><code>instructionSuffix</code> String</p>"},{"location":"xmldocs/llama.instructexecutor/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.instructexecutor/#getstatedata","title":"GetStateData()","text":"<pre><code>public ExecutorBaseState GetStateData()\n</code></pre>"},{"location":"xmldocs/llama.instructexecutor/#returns","title":"Returns","text":"<p>ExecutorBaseState</p>"},{"location":"xmldocs/llama.instructexecutor/#loadstateexecutorbasestate","title":"LoadState(ExecutorBaseState)","text":"<pre><code>public void LoadState(ExecutorBaseState data)\n</code></pre>"},{"location":"xmldocs/llama.instructexecutor/#parameters_1","title":"Parameters","text":"<p><code>data</code> ExecutorBaseState</p>"},{"location":"xmldocs/llama.instructexecutor/#savestatestring","title":"SaveState(String)","text":"<pre><code>public void SaveState(string filename)\n</code></pre>"},{"location":"xmldocs/llama.instructexecutor/#parameters_2","title":"Parameters","text":"<p><code>filename</code> String</p>"},{"location":"xmldocs/llama.instructexecutor/#loadstatestring","title":"LoadState(String)","text":"<pre><code>public void LoadState(string filename)\n</code></pre>"},{"location":"xmldocs/llama.instructexecutor/#parameters_3","title":"Parameters","text":"<p><code>filename</code> String</p>"},{"location":"xmldocs/llama.instructexecutor/#getloopconditioninferstateargs","title":"GetLoopCondition(InferStateArgs)","text":"<pre><code>protected bool GetLoopCondition(InferStateArgs args)\n</code></pre>"},{"location":"xmldocs/llama.instructexecutor/#parameters_4","title":"Parameters","text":"<p><code>args</code> InferStateArgs</p>"},{"location":"xmldocs/llama.instructexecutor/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.instructexecutor/#preprocessinputsstring-inferstateargs","title":"PreprocessInputs(String, InferStateArgs)","text":"<pre><code>protected void PreprocessInputs(string text, InferStateArgs args)\n</code></pre>"},{"location":"xmldocs/llama.instructexecutor/#parameters_5","title":"Parameters","text":"<p><code>text</code> String</p> <p><code>args</code> InferStateArgs</p>"},{"location":"xmldocs/llama.instructexecutor/#postprocessinferenceparams-inferstateargs-ienumerable1","title":"PostProcess(InferenceParams, InferStateArgs, IEnumerable`1&amp;)","text":"<pre><code>protected bool PostProcess(InferenceParams inferenceParams, InferStateArgs args, IEnumerable`1&amp; extraOutputs)\n</code></pre>"},{"location":"xmldocs/llama.instructexecutor/#parameters_6","title":"Parameters","text":"<p><code>inferenceParams</code> InferenceParams</p> <p><code>args</code> InferStateArgs</p> <p><code>extraOutputs</code> IEnumerable`1&amp;</p>"},{"location":"xmldocs/llama.instructexecutor/#returns_2","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.instructexecutor/#inferinternalinferenceparams-inferstateargs","title":"InferInternal(InferenceParams, InferStateArgs)","text":"<pre><code>protected void InferInternal(InferenceParams inferenceParams, InferStateArgs args)\n</code></pre>"},{"location":"xmldocs/llama.instructexecutor/#parameters_7","title":"Parameters","text":"<p><code>inferenceParams</code> InferenceParams</p> <p><code>args</code> InferStateArgs</p>"},{"location":"xmldocs/llama.interactiveexecutor/","title":"InteractiveExecutor","text":"<p>Namespace: LLama</p> <p>The LLama executor for interactive mode.</p> <pre><code>public class InteractiveExecutor : StatefulExecutorBase, LLama.Abstractions.ILLamaExecutor\n</code></pre> <p>Inheritance Object \u2192 StatefulExecutorBase \u2192 InteractiveExecutor Implements ILLamaExecutor</p>"},{"location":"xmldocs/llama.interactiveexecutor/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.interactiveexecutor/#model","title":"Model","text":"<p>The mode used by the executor.</p> <pre><code>public LLamaModel Model { get; }\n</code></pre>"},{"location":"xmldocs/llama.interactiveexecutor/#property-value","title":"Property Value","text":"<p>LLamaModel</p>"},{"location":"xmldocs/llama.interactiveexecutor/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.interactiveexecutor/#interactiveexecutorllamamodel","title":"InteractiveExecutor(LLamaModel)","text":"<pre><code>public InteractiveExecutor(LLamaModel model)\n</code></pre>"},{"location":"xmldocs/llama.interactiveexecutor/#parameters","title":"Parameters","text":"<p><code>model</code> LLamaModel</p>"},{"location":"xmldocs/llama.interactiveexecutor/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.interactiveexecutor/#getstatedata","title":"GetStateData()","text":"<pre><code>public ExecutorBaseState GetStateData()\n</code></pre>"},{"location":"xmldocs/llama.interactiveexecutor/#returns","title":"Returns","text":"<p>ExecutorBaseState</p>"},{"location":"xmldocs/llama.interactiveexecutor/#loadstateexecutorbasestate","title":"LoadState(ExecutorBaseState)","text":"<pre><code>public void LoadState(ExecutorBaseState data)\n</code></pre>"},{"location":"xmldocs/llama.interactiveexecutor/#parameters_1","title":"Parameters","text":"<p><code>data</code> ExecutorBaseState</p>"},{"location":"xmldocs/llama.interactiveexecutor/#savestatestring","title":"SaveState(String)","text":"<pre><code>public void SaveState(string filename)\n</code></pre>"},{"location":"xmldocs/llama.interactiveexecutor/#parameters_2","title":"Parameters","text":"<p><code>filename</code> String</p>"},{"location":"xmldocs/llama.interactiveexecutor/#loadstatestring","title":"LoadState(String)","text":"<pre><code>public void LoadState(string filename)\n</code></pre>"},{"location":"xmldocs/llama.interactiveexecutor/#parameters_3","title":"Parameters","text":"<p><code>filename</code> String</p>"},{"location":"xmldocs/llama.interactiveexecutor/#getloopconditioninferstateargs","title":"GetLoopCondition(InferStateArgs)","text":"<p>Define whether to continue the loop to generate responses.</p> <pre><code>protected bool GetLoopCondition(InferStateArgs args)\n</code></pre>"},{"location":"xmldocs/llama.interactiveexecutor/#parameters_4","title":"Parameters","text":"<p><code>args</code> InferStateArgs</p>"},{"location":"xmldocs/llama.interactiveexecutor/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.interactiveexecutor/#preprocessinputsstring-inferstateargs","title":"PreprocessInputs(String, InferStateArgs)","text":"<pre><code>protected void PreprocessInputs(string text, InferStateArgs args)\n</code></pre>"},{"location":"xmldocs/llama.interactiveexecutor/#parameters_5","title":"Parameters","text":"<p><code>text</code> String</p> <p><code>args</code> InferStateArgs</p>"},{"location":"xmldocs/llama.interactiveexecutor/#postprocessinferenceparams-inferstateargs-ienumerable1","title":"PostProcess(InferenceParams, InferStateArgs, IEnumerable`1&amp;)","text":"<p>Return whether to break the generation.</p> <pre><code>protected bool PostProcess(InferenceParams inferenceParams, InferStateArgs args, IEnumerable`1&amp; extraOutputs)\n</code></pre>"},{"location":"xmldocs/llama.interactiveexecutor/#parameters_6","title":"Parameters","text":"<p><code>inferenceParams</code> InferenceParams</p> <p><code>args</code> InferStateArgs</p> <p><code>extraOutputs</code> IEnumerable`1&amp;</p>"},{"location":"xmldocs/llama.interactiveexecutor/#returns_2","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.interactiveexecutor/#inferinternalinferenceparams-inferstateargs","title":"InferInternal(InferenceParams, InferStateArgs)","text":"<pre><code>protected void InferInternal(InferenceParams inferenceParams, InferStateArgs args)\n</code></pre>"},{"location":"xmldocs/llama.interactiveexecutor/#parameters_7","title":"Parameters","text":"<p><code>inferenceParams</code> InferenceParams</p> <p><code>args</code> InferStateArgs</p>"},{"location":"xmldocs/llama.llamaembedder/","title":"LLamaEmbedder","text":"<p>Namespace: LLama</p> <p>The embedder for LLama, which supports getting embeddings from text.</p> <pre><code>public class LLamaEmbedder : System.IDisposable\n</code></pre> <p>Inheritance Object \u2192 LLamaEmbedder Implements IDisposable</p>"},{"location":"xmldocs/llama.llamaembedder/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.llamaembedder/#llamaembeddermodelparams","title":"LLamaEmbedder(ModelParams)","text":"<pre><code>public LLamaEmbedder(ModelParams params)\n</code></pre>"},{"location":"xmldocs/llama.llamaembedder/#parameters","title":"Parameters","text":"<p><code>params</code> ModelParams</p>"},{"location":"xmldocs/llama.llamaembedder/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.llamaembedder/#getembeddingsstring-int32-boolean-string","title":"GetEmbeddings(String, Int32, Boolean, String)","text":"<p>Get the embeddings of the text.</p> <pre><code>public Single[] GetEmbeddings(string text, int threads, bool addBos, string encoding)\n</code></pre>"},{"location":"xmldocs/llama.llamaembedder/#parameters_1","title":"Parameters","text":"<p><code>text</code> String</p> <p><code>threads</code> Int32 Threads used for inference.</p> <p><code>addBos</code> Boolean Add bos to the text.</p> <p><code>encoding</code> String</p>"},{"location":"xmldocs/llama.llamaembedder/#returns","title":"Returns","text":"<p>Single[]</p>"},{"location":"xmldocs/llama.llamaembedder/#exceptions","title":"Exceptions","text":"<p>RuntimeError</p>"},{"location":"xmldocs/llama.llamaembedder/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose()\n</code></pre>"},{"location":"xmldocs/llama.llamamodel/","title":"LLamaModel","text":"<p>Namespace: LLama</p> <p>The abstraction of a LLama model, which holds the context in the native library.</p> <pre><code>public class LLamaModel : System.IDisposable\n</code></pre> <p>Inheritance Object \u2192 LLamaModel Implements IDisposable</p>"},{"location":"xmldocs/llama.llamamodel/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.llamamodel/#contextsize","title":"ContextSize","text":"<p>The context size.</p> <pre><code>public int ContextSize { get; }\n</code></pre>"},{"location":"xmldocs/llama.llamamodel/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.llamamodel/#params","title":"Params","text":"<p>The model params set for this model.</p> <pre><code>public ModelParams Params { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.llamamodel/#property-value_1","title":"Property Value","text":"<p>ModelParams</p>"},{"location":"xmldocs/llama.llamamodel/#nativehandle","title":"NativeHandle","text":"<p>The native handle, which is used to be passed to the native APIs. Please avoid using it   unless you know what is the usage of the Native API.</p> <pre><code>public SafeLLamaContextHandle NativeHandle { get; }\n</code></pre>"},{"location":"xmldocs/llama.llamamodel/#property-value_2","title":"Property Value","text":"<p>SafeLLamaContextHandle</p>"},{"location":"xmldocs/llama.llamamodel/#encoding","title":"Encoding","text":"<p>The encoding set for this model to deal with text input.</p> <pre><code>public Encoding Encoding { get; }\n</code></pre>"},{"location":"xmldocs/llama.llamamodel/#property-value_3","title":"Property Value","text":"<p>Encoding</p>"},{"location":"xmldocs/llama.llamamodel/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.llamamodel/#llamamodelmodelparams-string-illamalogger","title":"LLamaModel(ModelParams, String, ILLamaLogger)","text":"<pre><code>public LLamaModel(ModelParams Params, string encoding, ILLamaLogger logger)\n</code></pre>"},{"location":"xmldocs/llama.llamamodel/#parameters","title":"Parameters","text":"<p><code>Params</code> ModelParams Model params.</p> <p><code>encoding</code> String Encoding to deal with text input.</p> <p><code>logger</code> ILLamaLogger The logger.</p>"},{"location":"xmldocs/llama.llamamodel/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.llamamodel/#tokenizestring-boolean","title":"Tokenize(String, Boolean)","text":"<p>Tokenize a string.</p> <pre><code>public IEnumerable&lt;int&gt; Tokenize(string text, bool addBos)\n</code></pre>"},{"location":"xmldocs/llama.llamamodel/#parameters_1","title":"Parameters","text":"<p><code>text</code> String</p> <p><code>addBos</code> Boolean Whether to add a bos to the text.</p>"},{"location":"xmldocs/llama.llamamodel/#returns","title":"Returns","text":"<p>IEnumerable&lt;Int32&gt;</p>"},{"location":"xmldocs/llama.llamamodel/#detokenizeienumerableint32","title":"DeTokenize(IEnumerable&lt;Int32&gt;)","text":"<p>Detokenize the tokens to text.</p> <pre><code>public string DeTokenize(IEnumerable&lt;int&gt; tokens)\n</code></pre>"},{"location":"xmldocs/llama.llamamodel/#parameters_2","title":"Parameters","text":"<p><code>tokens</code> IEnumerable&lt;Int32&gt;</p>"},{"location":"xmldocs/llama.llamamodel/#returns_1","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.llamamodel/#savestatestring","title":"SaveState(String)","text":"<p>Save the state to specified path.</p> <pre><code>public void SaveState(string filename)\n</code></pre>"},{"location":"xmldocs/llama.llamamodel/#parameters_3","title":"Parameters","text":"<p><code>filename</code> String</p>"},{"location":"xmldocs/llama.llamamodel/#getstatedata","title":"GetStateData()","text":"<p>Get the state data as a byte array.</p> <pre><code>public Byte[] GetStateData()\n</code></pre>"},{"location":"xmldocs/llama.llamamodel/#returns_2","title":"Returns","text":"<p>Byte[]</p>"},{"location":"xmldocs/llama.llamamodel/#loadstatestring","title":"LoadState(String)","text":"<p>Load the state from specified path.</p> <pre><code>public void LoadState(string filename)\n</code></pre>"},{"location":"xmldocs/llama.llamamodel/#parameters_4","title":"Parameters","text":"<p><code>filename</code> String</p>"},{"location":"xmldocs/llama.llamamodel/#exceptions","title":"Exceptions","text":"<p>RuntimeError</p>"},{"location":"xmldocs/llama.llamamodel/#loadstatebyte","title":"LoadState(Byte[])","text":"<p>Load the state from memory.</p> <pre><code>public void LoadState(Byte[] stateData)\n</code></pre>"},{"location":"xmldocs/llama.llamamodel/#parameters_5","title":"Parameters","text":"<p><code>stateData</code> Byte[]</p>"},{"location":"xmldocs/llama.llamamodel/#exceptions_1","title":"Exceptions","text":"<p>RuntimeError</p>"},{"location":"xmldocs/llama.llamamodel/#samplellamatokendataarray-single-mirostatetype-single-single-int32-single-single-single","title":"Sample(LLamaTokenDataArray, Single, MiroStateType, Single, Single, Int32, Single, Single, Single)","text":"<p>Perform the sampling. Please don't use it unless you fully know what it does.</p> <pre><code>public int Sample(LLamaTokenDataArray candidates, float temperature, MiroStateType mirostat, float mirostatTau, float mirostatEta, int topK, float topP, float tfsZ, float typicalP)\n</code></pre>"},{"location":"xmldocs/llama.llamamodel/#parameters_6","title":"Parameters","text":"<p><code>candidates</code> LLamaTokenDataArray</p> <p><code>temperature</code> Single</p> <p><code>mirostat</code> MiroStateType</p> <p><code>mirostatTau</code> Single</p> <p><code>mirostatEta</code> Single</p> <p><code>topK</code> Int32</p> <p><code>topP</code> Single</p> <p><code>tfsZ</code> Single</p> <p><code>typicalP</code> Single</p>"},{"location":"xmldocs/llama.llamamodel/#returns_3","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.llamamodel/#applypenaltyienumerableint32-dictionaryint32-single-int32-single-single-single-boolean","title":"ApplyPenalty(IEnumerable&lt;Int32&gt;, Dictionary&lt;Int32, Single&gt;, Int32, Single, Single, Single, Boolean)","text":"<p>Apply the penalty for the tokens. Please don't use it unless you fully know what it does.</p> <pre><code>public LLamaTokenDataArray ApplyPenalty(IEnumerable&lt;int&gt; lastTokens, Dictionary&lt;int, float&gt; logitBias, int repeatLastTokensCount, float repeatPenalty, float alphaFrequency, float alphaPresence, bool penalizeNL)\n</code></pre>"},{"location":"xmldocs/llama.llamamodel/#parameters_7","title":"Parameters","text":"<p><code>lastTokens</code> IEnumerable&lt;Int32&gt;</p> <p><code>logitBias</code> Dictionary&lt;Int32, Single&gt;</p> <p><code>repeatLastTokensCount</code> Int32</p> <p><code>repeatPenalty</code> Single</p> <p><code>alphaFrequency</code> Single</p> <p><code>alphaPresence</code> Single</p> <p><code>penalizeNL</code> Boolean</p>"},{"location":"xmldocs/llama.llamamodel/#returns_4","title":"Returns","text":"<p>LLamaTokenDataArray</p>"},{"location":"xmldocs/llama.llamamodel/#evalint32-int32","title":"Eval(Int32[], Int32)","text":"<pre><code>public int Eval(Int32[] tokens, int pastTokensCount)\n</code></pre>"},{"location":"xmldocs/llama.llamamodel/#parameters_8","title":"Parameters","text":"<p><code>tokens</code> Int32[]</p> <p><code>pastTokensCount</code> Int32</p>"},{"location":"xmldocs/llama.llamamodel/#returns_5","title":"Returns","text":"<p>Int32 The updated <code>pastTokensCount</code>.</p>"},{"location":"xmldocs/llama.llamamodel/#exceptions_2","title":"Exceptions","text":"<p>RuntimeError</p>"},{"location":"xmldocs/llama.llamamodel/#generateresultienumerableint32","title":"GenerateResult(IEnumerable&lt;Int32&gt;)","text":"<pre><code>internal IEnumerable&lt;string&gt; GenerateResult(IEnumerable&lt;int&gt; ids)\n</code></pre>"},{"location":"xmldocs/llama.llamamodel/#parameters_9","title":"Parameters","text":"<p><code>ids</code> IEnumerable&lt;Int32&gt;</p>"},{"location":"xmldocs/llama.llamamodel/#returns_6","title":"Returns","text":"<p>IEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.llamamodel/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose()\n</code></pre>"},{"location":"xmldocs/llama.llamaquantizer/","title":"LLamaQuantizer","text":"<p>Namespace: LLama</p> <p>The quantizer to quantize the model.</p> <pre><code>public static class LLamaQuantizer\n</code></pre> <p>Inheritance Object \u2192 LLamaQuantizer</p>"},{"location":"xmldocs/llama.llamaquantizer/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.llamaquantizer/#quantizestring-string-llamaftype-int32","title":"Quantize(String, String, LLamaFtype, Int32)","text":"<p>Quantize the model.</p> <pre><code>public static bool Quantize(string srcFileName, string dstFilename, LLamaFtype ftype, int nthread)\n</code></pre>"},{"location":"xmldocs/llama.llamaquantizer/#parameters","title":"Parameters","text":"<p><code>srcFileName</code> String The model file to be quantized.</p> <p><code>dstFilename</code> String The path to save the quantized model.</p> <p><code>ftype</code> LLamaFtype The type of quantization.</p> <p><code>nthread</code> Int32 Thread to be used during the quantization. By default it's the physical core number.</p>"},{"location":"xmldocs/llama.llamaquantizer/#returns","title":"Returns","text":"<p>Boolean Whether the quantization is successful.</p>"},{"location":"xmldocs/llama.llamaquantizer/#exceptions","title":"Exceptions","text":"<p>ArgumentException</p>"},{"location":"xmldocs/llama.llamaquantizer/#quantizestring-string-string-int32","title":"Quantize(String, String, String, Int32)","text":"<p>Quantize the model.</p> <pre><code>public static bool Quantize(string srcFileName, string dstFilename, string ftype, int nthread)\n</code></pre>"},{"location":"xmldocs/llama.llamaquantizer/#parameters_1","title":"Parameters","text":"<p><code>srcFileName</code> String The model file to be quantized.</p> <p><code>dstFilename</code> String The path to save the quantized model.</p> <p><code>ftype</code> String The type of quantization.</p> <p><code>nthread</code> Int32 Thread to be used during the quantization. By default it's the physical core number.</p>"},{"location":"xmldocs/llama.llamaquantizer/#returns_1","title":"Returns","text":"<p>Boolean Whether the quantization is successful.</p>"},{"location":"xmldocs/llama.llamaquantizer/#exceptions_1","title":"Exceptions","text":"<p>ArgumentException</p>"},{"location":"xmldocs/llama.llamatransforms/","title":"LLamaTransforms","text":"<p>Namespace: LLama</p> <p>A class that contains all the transforms provided internally by LLama.</p> <pre><code>public class LLamaTransforms\n</code></pre> <p>Inheritance Object \u2192 LLamaTransforms</p>"},{"location":"xmldocs/llama.llamatransforms/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.llamatransforms/#llamatransforms_1","title":"LLamaTransforms()","text":"<pre><code>public LLamaTransforms()\n</code></pre>"},{"location":"xmldocs/llama.native.llamacontextparams/","title":"LLamaContextParams","text":"<p>Namespace: LLama.Native</p> <pre><code>public struct LLamaContextParams\n</code></pre> <p>Inheritance Object \u2192 ValueType \u2192 LLamaContextParams</p>"},{"location":"xmldocs/llama.native.llamacontextparams/#fields","title":"Fields","text":""},{"location":"xmldocs/llama.native.llamacontextparams/#n_ctx","title":"n_ctx","text":"<p>text context</p> <pre><code>public int n_ctx;\n</code></pre>"},{"location":"xmldocs/llama.native.llamacontextparams/#n_gpu_layers","title":"n_gpu_layers","text":"<p>number of layers to store in VRAM</p> <pre><code>public int n_gpu_layers;\n</code></pre>"},{"location":"xmldocs/llama.native.llamacontextparams/#seed","title":"seed","text":"<p>RNG seed, -1 for random</p> <pre><code>public int seed;\n</code></pre>"},{"location":"xmldocs/llama.native.llamacontextparams/#f16_kv","title":"f16_kv","text":"<p>use fp16 for KV cache</p> <pre><code>public bool f16_kv;\n</code></pre>"},{"location":"xmldocs/llama.native.llamacontextparams/#logits_all","title":"logits_all","text":"<p>the llama_eval() call computes all logits, not just the last one</p> <pre><code>public bool logits_all;\n</code></pre>"},{"location":"xmldocs/llama.native.llamacontextparams/#vocab_only","title":"vocab_only","text":"<p>only load the vocabulary, no weights</p> <pre><code>public bool vocab_only;\n</code></pre>"},{"location":"xmldocs/llama.native.llamacontextparams/#use_mmap","title":"use_mmap","text":"<p>use mmap if possible</p> <pre><code>public bool use_mmap;\n</code></pre>"},{"location":"xmldocs/llama.native.llamacontextparams/#use_mlock","title":"use_mlock","text":"<p>force system to keep model in RAM</p> <pre><code>public bool use_mlock;\n</code></pre>"},{"location":"xmldocs/llama.native.llamacontextparams/#embedding","title":"embedding","text":"<p>embedding mode only</p> <pre><code>public bool embedding;\n</code></pre>"},{"location":"xmldocs/llama.native.llamacontextparams/#progress_callback","title":"progress_callback","text":"<p>called with a progress value between 0 and 1, pass NULL to disable</p> <pre><code>public IntPtr progress_callback;\n</code></pre>"},{"location":"xmldocs/llama.native.llamacontextparams/#progress_callback_user_data","title":"progress_callback_user_data","text":"<p>context pointer passed to the progress callback</p> <pre><code>public IntPtr progress_callback_user_data;\n</code></pre>"},{"location":"xmldocs/llama.native.llamaftype/","title":"LLamaFtype","text":"<p>Namespace: LLama.Native</p> <pre><code>public enum LLamaFtype\n</code></pre> <p>Inheritance Object \u2192 ValueType \u2192 Enum \u2192 LLamaFtype Implements IComparable, IFormattable, IConvertible</p>"},{"location":"xmldocs/llama.native.llamaftype/#fields","title":"Fields","text":"Name Value Description"},{"location":"xmldocs/llama.native.llamatokendata/","title":"LLamaTokenData","text":"<p>Namespace: LLama.Native</p> <pre><code>public struct LLamaTokenData\n</code></pre> <p>Inheritance Object \u2192 ValueType \u2192 LLamaTokenData</p>"},{"location":"xmldocs/llama.native.llamatokendata/#fields","title":"Fields","text":""},{"location":"xmldocs/llama.native.llamatokendata/#id","title":"id","text":"<p>token id</p> <pre><code>public int id;\n</code></pre>"},{"location":"xmldocs/llama.native.llamatokendata/#logit","title":"logit","text":"<p>log-odds of the token</p> <pre><code>public float logit;\n</code></pre>"},{"location":"xmldocs/llama.native.llamatokendata/#p","title":"p","text":"<p>probability of the token</p> <pre><code>public float p;\n</code></pre>"},{"location":"xmldocs/llama.native.llamatokendata/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.native.llamatokendata/#llamatokendataint32-single-single","title":"LLamaTokenData(Int32, Single, Single)","text":"<pre><code>LLamaTokenData(int id, float logit, float p)\n</code></pre>"},{"location":"xmldocs/llama.native.llamatokendata/#parameters","title":"Parameters","text":"<p><code>id</code> Int32</p> <p><code>logit</code> Single</p> <p><code>p</code> Single</p>"},{"location":"xmldocs/llama.native.llamatokendataarray/","title":"LLamaTokenDataArray","text":"<p>Namespace: LLama.Native</p> <pre><code>public struct LLamaTokenDataArray\n</code></pre> <p>Inheritance Object \u2192 ValueType \u2192 LLamaTokenDataArray</p>"},{"location":"xmldocs/llama.native.llamatokendataarray/#fields","title":"Fields","text":""},{"location":"xmldocs/llama.native.llamatokendataarray/#data","title":"data","text":"<pre><code>public Memory&lt;LLamaTokenData&gt; data;\n</code></pre>"},{"location":"xmldocs/llama.native.llamatokendataarray/#size","title":"size","text":"<pre><code>public ulong size;\n</code></pre>"},{"location":"xmldocs/llama.native.llamatokendataarray/#sorted","title":"sorted","text":"<pre><code>public bool sorted;\n</code></pre>"},{"location":"xmldocs/llama.native.llamatokendataarray/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.native.llamatokendataarray/#llamatokendataarrayllamatokendata-uint64-boolean","title":"LLamaTokenDataArray(LLamaTokenData[], UInt64, Boolean)","text":"<pre><code>LLamaTokenDataArray(LLamaTokenData[] data, ulong size, bool sorted)\n</code></pre>"},{"location":"xmldocs/llama.native.llamatokendataarray/#parameters","title":"Parameters","text":"<p><code>data</code> LLamaTokenData[]</p> <p><code>size</code> UInt64</p> <p><code>sorted</code> Boolean</p>"},{"location":"xmldocs/llama.native.llamatokendataarraynative/","title":"LLamaTokenDataArrayNative","text":"<p>Namespace: LLama.Native</p> <pre><code>public struct LLamaTokenDataArrayNative\n</code></pre> <p>Inheritance Object \u2192 ValueType \u2192 LLamaTokenDataArrayNative</p>"},{"location":"xmldocs/llama.native.llamatokendataarraynative/#fields","title":"Fields","text":""},{"location":"xmldocs/llama.native.llamatokendataarraynative/#data","title":"data","text":"<pre><code>public IntPtr data;\n</code></pre>"},{"location":"xmldocs/llama.native.llamatokendataarraynative/#size","title":"size","text":"<pre><code>public ulong size;\n</code></pre>"},{"location":"xmldocs/llama.native.llamatokendataarraynative/#sorted","title":"sorted","text":"<pre><code>public bool sorted;\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/","title":"NativeApi","text":"<p>Namespace: LLama.Native</p> <pre><code>public class NativeApi\n</code></pre> <p>Inheritance Object \u2192 NativeApi</p>"},{"location":"xmldocs/llama.native.nativeapi/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.native.nativeapi/#nativeapi_1","title":"NativeApi()","text":"<pre><code>public NativeApi()\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.native.nativeapi/#llama_print_timingssafellamacontexthandle","title":"llama_print_timings(SafeLLamaContextHandle)","text":"<pre><code>public static void llama_print_timings(SafeLLamaContextHandle ctx)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_reset_timingssafellamacontexthandle","title":"llama_reset_timings(SafeLLamaContextHandle)","text":"<pre><code>public static void llama_reset_timings(SafeLLamaContextHandle ctx)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_1","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_print_system_info","title":"llama_print_system_info()","text":"<p>Print system information</p> <pre><code>public static IntPtr llama_print_system_info()\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#returns","title":"Returns","text":"<p>IntPtr</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_model_quantizestring-string-llamaftype-int32","title":"llama_model_quantize(String, String, LLamaFtype, Int32)","text":"<pre><code>public static int llama_model_quantize(string fname_inp, string fname_out, LLamaFtype ftype, int nthread)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_2","title":"Parameters","text":"<p><code>fname_inp</code> String</p> <p><code>fname_out</code> String</p> <p><code>ftype</code> LLamaFtype</p> <p><code>nthread</code> Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_1","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_sample_repetition_penaltysafellamacontexthandle-intptr-int32-uint64-single","title":"llama_sample_repetition_penalty(SafeLLamaContextHandle, IntPtr, Int32[], UInt64, Single)","text":"<p>Repetition penalty described in CTRL academic paper https://arxiv.org/abs/1909.05858, with negative logit fix.</p> <pre><code>public static void llama_sample_repetition_penalty(SafeLLamaContextHandle ctx, IntPtr candidates, Int32[] last_tokens, ulong last_tokens_size, float penalty)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_3","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>candidates</code> IntPtr Pointer to LLamaTokenDataArray</p> <p><code>last_tokens</code> Int32[]</p> <p><code>last_tokens_size</code> UInt64</p> <p><code>penalty</code> Single</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_sample_frequency_and_presence_penaltiessafellamacontexthandle-intptr-int32-uint64-single-single","title":"llama_sample_frequency_and_presence_penalties(SafeLLamaContextHandle, IntPtr, Int32[], UInt64, Single, Single)","text":"<p>Frequency and presence penalties described in OpenAI API https://platform.openai.com/docs/api-reference/parameter-details.</p> <pre><code>public static void llama_sample_frequency_and_presence_penalties(SafeLLamaContextHandle ctx, IntPtr candidates, Int32[] last_tokens, ulong last_tokens_size, float alpha_frequency, float alpha_presence)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_4","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>candidates</code> IntPtr Pointer to LLamaTokenDataArray</p> <p><code>last_tokens</code> Int32[]</p> <p><code>last_tokens_size</code> UInt64</p> <p><code>alpha_frequency</code> Single</p> <p><code>alpha_presence</code> Single</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_sample_softmaxsafellamacontexthandle-intptr","title":"llama_sample_softmax(SafeLLamaContextHandle, IntPtr)","text":"<p>Sorts candidate tokens by their logits in descending order and calculate probabilities based on logits.</p> <pre><code>public static void llama_sample_softmax(SafeLLamaContextHandle ctx, IntPtr candidates)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_5","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>candidates</code> IntPtr Pointer to LLamaTokenDataArray</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_sample_top_ksafellamacontexthandle-intptr-int32-uint64","title":"llama_sample_top_k(SafeLLamaContextHandle, IntPtr, Int32, UInt64)","text":"<p>Top-K sampling described in academic paper \"The Curious Case of Neural Text Degeneration\" https://arxiv.org/abs/1904.09751</p> <pre><code>public static void llama_sample_top_k(SafeLLamaContextHandle ctx, IntPtr candidates, int k, ulong min_keep)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_6","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>candidates</code> IntPtr Pointer to LLamaTokenDataArray</p> <p><code>k</code> Int32</p> <p><code>min_keep</code> UInt64</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_sample_top_psafellamacontexthandle-intptr-single-uint64","title":"llama_sample_top_p(SafeLLamaContextHandle, IntPtr, Single, UInt64)","text":"<p>Nucleus sampling described in academic paper \"The Curious Case of Neural Text Degeneration\" https://arxiv.org/abs/1904.09751</p> <pre><code>public static void llama_sample_top_p(SafeLLamaContextHandle ctx, IntPtr candidates, float p, ulong min_keep)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_7","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>candidates</code> IntPtr Pointer to LLamaTokenDataArray</p> <p><code>p</code> Single</p> <p><code>min_keep</code> UInt64</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_sample_tail_freesafellamacontexthandle-intptr-single-uint64","title":"llama_sample_tail_free(SafeLLamaContextHandle, IntPtr, Single, UInt64)","text":"<p>Tail Free Sampling described in https://www.trentonbricken.com/Tail-Free-Sampling/.</p> <pre><code>public static void llama_sample_tail_free(SafeLLamaContextHandle ctx, IntPtr candidates, float z, ulong min_keep)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_8","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>candidates</code> IntPtr Pointer to LLamaTokenDataArray</p> <p><code>z</code> Single</p> <p><code>min_keep</code> UInt64</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_sample_typicalsafellamacontexthandle-intptr-single-uint64","title":"llama_sample_typical(SafeLLamaContextHandle, IntPtr, Single, UInt64)","text":"<p>Locally Typical Sampling implementation described in the paper https://arxiv.org/abs/2202.00666.</p> <pre><code>public static void llama_sample_typical(SafeLLamaContextHandle ctx, IntPtr candidates, float p, ulong min_keep)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_9","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>candidates</code> IntPtr Pointer to LLamaTokenDataArray</p> <p><code>p</code> Single</p> <p><code>min_keep</code> UInt64</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_sample_temperaturesafellamacontexthandle-intptr-single","title":"llama_sample_temperature(SafeLLamaContextHandle, IntPtr, Single)","text":"<pre><code>public static void llama_sample_temperature(SafeLLamaContextHandle ctx, IntPtr candidates, float temp)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_10","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>candidates</code> IntPtr</p> <p><code>temp</code> Single</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_sample_token_mirostatsafellamacontexthandle-intptr-single-single-int32-single","title":"llama_sample_token_mirostat(SafeLLamaContextHandle, IntPtr, Single, Single, Int32, Single*)","text":"<p>Mirostat 1.0 algorithm described in the paper https://arxiv.org/abs/2007.14966. Uses tokens instead of words.</p> <pre><code>public static int llama_sample_token_mirostat(SafeLLamaContextHandle ctx, IntPtr candidates, float tau, float eta, int m, Single* mu)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_11","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>candidates</code> IntPtr A vector of <code>llama_token_data</code> containing the candidate tokens, their probabilities (p), and log-odds (logit) for the current position in the generated text.</p> <p><code>tau</code> Single The target cross-entropy (or surprise) value you want to achieve for the generated text. A higher value corresponds to more surprising or less predictable text, while a lower value corresponds to less surprising or more predictable text.</p> <p><code>eta</code> Single The learning rate used to update <code>mu</code> based on the error between the target and observed surprisal of the sampled word. A larger learning rate will cause <code>mu</code> to be updated more quickly, while a smaller learning rate will result in slower updates.</p> <p><code>m</code> Int32 The number of tokens considered in the estimation of <code>s_hat</code>. This is an arbitrary value that is used to calculate <code>s_hat</code>, which in turn helps to calculate the value of <code>k</code>. In the paper, they use <code>m = 100</code>, but you can experiment with different values to see how it affects the performance of the algorithm.</p> <p><code>mu</code> Single* Maximum cross-entropy. This value is initialized to be twice the target cross-entropy (<code>2 * tau</code>) and is updated in the algorithm based on the error between the target and observed surprisal.</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_sample_token_mirostat_v2safellamacontexthandle-intptr-single-single-single","title":"llama_sample_token_mirostat_v2(SafeLLamaContextHandle, IntPtr, Single, Single, Single*)","text":"<p>Mirostat 2.0 algorithm described in the paper https://arxiv.org/abs/2007.14966. Uses tokens instead of words.</p> <pre><code>public static int llama_sample_token_mirostat_v2(SafeLLamaContextHandle ctx, IntPtr candidates, float tau, float eta, Single* mu)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_12","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>candidates</code> IntPtr A vector of <code>llama_token_data</code> containing the candidate tokens, their probabilities (p), and log-odds (logit) for the current position in the generated text.</p> <p><code>tau</code> Single The target cross-entropy (or surprise) value you want to achieve for the generated text. A higher value corresponds to more surprising or less predictable text, while a lower value corresponds to less surprising or more predictable text.</p> <p><code>eta</code> Single The learning rate used to update <code>mu</code> based on the error between the target and observed surprisal of the sampled word. A larger learning rate will cause <code>mu</code> to be updated more quickly, while a smaller learning rate will result in slower updates.</p> <p><code>mu</code> Single* Maximum cross-entropy. This value is initialized to be twice the target cross-entropy (<code>2 * tau</code>) and is updated in the algorithm based on the error between the target and observed surprisal.</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_3","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_sample_token_greedysafellamacontexthandle-intptr","title":"llama_sample_token_greedy(SafeLLamaContextHandle, IntPtr)","text":"<p>Selects the token with the highest probability.</p> <pre><code>public static int llama_sample_token_greedy(SafeLLamaContextHandle ctx, IntPtr candidates)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_13","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>candidates</code> IntPtr Pointer to LLamaTokenDataArray</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_4","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_sample_tokensafellamacontexthandle-intptr","title":"llama_sample_token(SafeLLamaContextHandle, IntPtr)","text":"<p>Randomly selects a token from the candidates based on their probabilities.</p> <pre><code>public static int llama_sample_token(SafeLLamaContextHandle ctx, IntPtr candidates)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_14","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>candidates</code> IntPtr Pointer to LLamaTokenDataArray</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_5","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_empty_call","title":"llama_empty_call()","text":"<pre><code>public static bool llama_empty_call()\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#returns_6","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_context_default_params","title":"llama_context_default_params()","text":"<pre><code>public static LLamaContextParams llama_context_default_params()\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#returns_7","title":"Returns","text":"<p>LLamaContextParams</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_mmap_supported","title":"llama_mmap_supported()","text":"<pre><code>public static bool llama_mmap_supported()\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#returns_8","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_mlock_supported","title":"llama_mlock_supported()","text":"<pre><code>public static bool llama_mlock_supported()\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#returns_9","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_init_from_filestring-llamacontextparams","title":"llama_init_from_file(String, LLamaContextParams)","text":"<p>Various functions for loading a ggml llama model.  Allocate (almost) all memory needed for the model.  Return NULL on failure</p> <pre><code>public static IntPtr llama_init_from_file(string path_model, LLamaContextParams params_)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_15","title":"Parameters","text":"<p><code>path_model</code> String</p> <p><code>params_</code> LLamaContextParams</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_10","title":"Returns","text":"<p>IntPtr</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_init_backend","title":"llama_init_backend()","text":"<p>not great API - very likely to change.   Initialize the llama + ggml backend  Call once at the start of the program</p> <pre><code>public static void llama_init_backend()\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#llama_freeintptr","title":"llama_free(IntPtr)","text":"<p>Frees all allocated memory</p> <pre><code>public static void llama_free(IntPtr ctx)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_16","title":"Parameters","text":"<p><code>ctx</code> IntPtr</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_apply_lora_from_filesafellamacontexthandle-string-string-int32","title":"llama_apply_lora_from_file(SafeLLamaContextHandle, String, String, Int32)","text":"<p>Apply a LoRA adapter to a loaded model  path_base_model is the path to a higher quality model to use as a base for  the layers modified by the adapter. Can be NULL to use the current loaded model.  The model needs to be reloaded before applying a new adapter, otherwise the adapter  will be applied on top of the previous one</p> <pre><code>public static int llama_apply_lora_from_file(SafeLLamaContextHandle ctx, string path_lora, string path_base_model, int n_threads)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_17","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>path_lora</code> String</p> <p><code>path_base_model</code> String</p> <p><code>n_threads</code> Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_11","title":"Returns","text":"<p>Int32 Returns 0 on success</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_get_kv_cache_token_countsafellamacontexthandle","title":"llama_get_kv_cache_token_count(SafeLLamaContextHandle)","text":"<p>Returns the number of tokens in the KV cache</p> <pre><code>public static int llama_get_kv_cache_token_count(SafeLLamaContextHandle ctx)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_18","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_12","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_set_rng_seedsafellamacontexthandle-int32","title":"llama_set_rng_seed(SafeLLamaContextHandle, Int32)","text":"<p>Sets the current rng seed.</p> <pre><code>public static void llama_set_rng_seed(SafeLLamaContextHandle ctx, int seed)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_19","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>seed</code> Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_get_state_sizesafellamacontexthandle","title":"llama_get_state_size(SafeLLamaContextHandle)","text":"<p>Returns the maximum size in bytes of the state (rng, logits, embedding  and kv_cache) - will often be smaller after compacting tokens</p> <pre><code>public static ulong llama_get_state_size(SafeLLamaContextHandle ctx)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_20","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_13","title":"Returns","text":"<p>UInt64</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_copy_state_datasafellamacontexthandle-byte","title":"llama_copy_state_data(SafeLLamaContextHandle, Byte[])","text":"<p>Copies the state to the specified destination address.  Destination needs to have allocated enough memory.  Returns the number of bytes copied</p> <pre><code>public static ulong llama_copy_state_data(SafeLLamaContextHandle ctx, Byte[] dest)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_21","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>dest</code> Byte[]</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_14","title":"Returns","text":"<p>UInt64</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_set_state_datasafellamacontexthandle-byte","title":"llama_set_state_data(SafeLLamaContextHandle, Byte[])","text":"<p>Set the state reading from the specified address  Returns the number of bytes read</p> <pre><code>public static ulong llama_set_state_data(SafeLLamaContextHandle ctx, Byte[] src)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_22","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>src</code> Byte[]</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_15","title":"Returns","text":"<p>UInt64</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_load_session_filesafellamacontexthandle-string-int32-uint64-uint64","title":"llama_load_session_file(SafeLLamaContextHandle, String, Int32[], UInt64, UInt64*)","text":"<p>Load session file</p> <pre><code>public static bool llama_load_session_file(SafeLLamaContextHandle ctx, string path_session, Int32[] tokens_out, ulong n_token_capacity, UInt64* n_token_count_out)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_23","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>path_session</code> String</p> <p><code>tokens_out</code> Int32[]</p> <p><code>n_token_capacity</code> UInt64</p> <p><code>n_token_count_out</code> UInt64*</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_16","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_save_session_filesafellamacontexthandle-string-int32-uint64","title":"llama_save_session_file(SafeLLamaContextHandle, String, Int32[], UInt64)","text":"<p>Save session file</p> <pre><code>public static bool llama_save_session_file(SafeLLamaContextHandle ctx, string path_session, Int32[] tokens, ulong n_token_count)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_24","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>path_session</code> String</p> <p><code>tokens</code> Int32[]</p> <p><code>n_token_count</code> UInt64</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_17","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_evalsafellamacontexthandle-int32-int32-int32-int32","title":"llama_eval(SafeLLamaContextHandle, Int32[], Int32, Int32, Int32)","text":"<p>Run the llama inference to obtain the logits and probabilities for the next token.  tokens + n_tokens is the provided batch of new tokens to process  n_past is the number of tokens to use from previous eval calls</p> <pre><code>public static int llama_eval(SafeLLamaContextHandle ctx, Int32[] tokens, int n_tokens, int n_past, int n_threads)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_25","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>tokens</code> Int32[]</p> <p><code>n_tokens</code> Int32</p> <p><code>n_past</code> Int32</p> <p><code>n_threads</code> Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_18","title":"Returns","text":"<p>Int32 Returns 0 on success</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_eval_with_pointersafellamacontexthandle-int32-int32-int32-int32","title":"llama_eval_with_pointer(SafeLLamaContextHandle, Int32*, Int32, Int32, Int32)","text":"<pre><code>public static int llama_eval_with_pointer(SafeLLamaContextHandle ctx, Int32* tokens, int n_tokens, int n_past, int n_threads)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_26","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>tokens</code> Int32*</p> <p><code>n_tokens</code> Int32</p> <p><code>n_past</code> Int32</p> <p><code>n_threads</code> Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_19","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_tokenizesafellamacontexthandle-string-encoding-int32-int32-boolean","title":"llama_tokenize(SafeLLamaContextHandle, String, Encoding, Int32[], Int32, Boolean)","text":"<p>Convert the provided text into tokens.  The tokens pointer must be large enough to hold the resulting tokens.  Returns the number of tokens on success, no more than n_max_tokens  Returns a negative number on failure - the number of tokens that would have been returned</p> <pre><code>public static int llama_tokenize(SafeLLamaContextHandle ctx, string text, Encoding encoding, Int32[] tokens, int n_max_tokens, bool add_bos)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_27","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>text</code> String</p> <p><code>encoding</code> Encoding</p> <p><code>tokens</code> Int32[]</p> <p><code>n_max_tokens</code> Int32</p> <p><code>add_bos</code> Boolean</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_20","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_tokenize_nativesafellamacontexthandle-sbyte-int32-int32-boolean","title":"llama_tokenize_native(SafeLLamaContextHandle, SByte[], Int32[], Int32, Boolean)","text":"<pre><code>public static int llama_tokenize_native(SafeLLamaContextHandle ctx, SByte[] text, Int32[] tokens, int n_max_tokens, bool add_bos)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_28","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>text</code> SByte[]</p> <p><code>tokens</code> Int32[]</p> <p><code>n_max_tokens</code> Int32</p> <p><code>add_bos</code> Boolean</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_21","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_n_vocabsafellamacontexthandle","title":"llama_n_vocab(SafeLLamaContextHandle)","text":"<pre><code>public static int llama_n_vocab(SafeLLamaContextHandle ctx)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_29","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_22","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_n_ctxsafellamacontexthandle","title":"llama_n_ctx(SafeLLamaContextHandle)","text":"<pre><code>public static int llama_n_ctx(SafeLLamaContextHandle ctx)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_30","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_23","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_n_embdsafellamacontexthandle","title":"llama_n_embd(SafeLLamaContextHandle)","text":"<pre><code>public static int llama_n_embd(SafeLLamaContextHandle ctx)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_31","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_24","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_get_logitssafellamacontexthandle","title":"llama_get_logits(SafeLLamaContextHandle)","text":"<p>Token logits obtained from the last call to llama_eval()  The logits for the last token are stored in the last row  Can be mutated in order to change the probabilities of the next token  Rows: n_tokens  Cols: n_vocab</p> <pre><code>public static Single* llama_get_logits(SafeLLamaContextHandle ctx)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_32","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_25","title":"Returns","text":"<p>Single*</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_get_embeddingssafellamacontexthandle","title":"llama_get_embeddings(SafeLLamaContextHandle)","text":"<p>Get the embeddings for the input  shape: [n_embd] (1-dimensional)</p> <pre><code>public static Single* llama_get_embeddings(SafeLLamaContextHandle ctx)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_33","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_26","title":"Returns","text":"<p>Single*</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_token_to_strsafellamacontexthandle-int32","title":"llama_token_to_str(SafeLLamaContextHandle, Int32)","text":"<p>Token Id -&gt; String. Uses the vocabulary in the provided context</p> <pre><code>public static IntPtr llama_token_to_str(SafeLLamaContextHandle ctx, int token)\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#parameters_34","title":"Parameters","text":"<p><code>ctx</code> SafeLLamaContextHandle</p> <p><code>token</code> Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#returns_27","title":"Returns","text":"<p>IntPtr Pointer to a string.</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_token_bos","title":"llama_token_bos()","text":"<pre><code>public static int llama_token_bos()\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#returns_28","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_token_eos","title":"llama_token_eos()","text":"<pre><code>public static int llama_token_eos()\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#returns_29","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.native.nativeapi/#llama_token_nl","title":"llama_token_nl()","text":"<pre><code>public static int llama_token_nl()\n</code></pre>"},{"location":"xmldocs/llama.native.nativeapi/#returns_30","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.native.safellamacontexthandle/","title":"SafeLLamaContextHandle","text":"<p>Namespace: LLama.Native</p> <pre><code>public class SafeLLamaContextHandle : SafeLLamaHandleBase, System.IDisposable\n</code></pre> <p>Inheritance Object \u2192 CriticalFinalizerObject \u2192 SafeHandle \u2192 SafeLLamaHandleBase \u2192 SafeLLamaContextHandle Implements IDisposable</p>"},{"location":"xmldocs/llama.native.safellamacontexthandle/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.native.safellamacontexthandle/#isinvalid","title":"IsInvalid","text":"<pre><code>public bool IsInvalid { get; }\n</code></pre>"},{"location":"xmldocs/llama.native.safellamacontexthandle/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.native.safellamacontexthandle/#isclosed","title":"IsClosed","text":"<pre><code>public bool IsClosed { get; }\n</code></pre>"},{"location":"xmldocs/llama.native.safellamacontexthandle/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.native.safellamacontexthandle/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.native.safellamacontexthandle/#safellamacontexthandleintptr","title":"SafeLLamaContextHandle(IntPtr)","text":"<pre><code>public SafeLLamaContextHandle(IntPtr handle)\n</code></pre>"},{"location":"xmldocs/llama.native.safellamacontexthandle/#parameters","title":"Parameters","text":"<p><code>handle</code> IntPtr</p>"},{"location":"xmldocs/llama.native.safellamacontexthandle/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.native.safellamacontexthandle/#releasehandle","title":"ReleaseHandle()","text":"<pre><code>protected bool ReleaseHandle()\n</code></pre>"},{"location":"xmldocs/llama.native.safellamacontexthandle/#returns","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.native.safellamahandlebase/","title":"SafeLLamaHandleBase","text":"<p>Namespace: LLama.Native</p> <pre><code>public abstract class SafeLLamaHandleBase : System.Runtime.InteropServices.SafeHandle, System.IDisposable\n</code></pre> <p>Inheritance Object \u2192 CriticalFinalizerObject \u2192 SafeHandle \u2192 SafeLLamaHandleBase Implements IDisposable</p>"},{"location":"xmldocs/llama.native.safellamahandlebase/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.native.safellamahandlebase/#isinvalid","title":"IsInvalid","text":"<pre><code>public bool IsInvalid { get; }\n</code></pre>"},{"location":"xmldocs/llama.native.safellamahandlebase/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.native.safellamahandlebase/#isclosed","title":"IsClosed","text":"<pre><code>public bool IsClosed { get; }\n</code></pre>"},{"location":"xmldocs/llama.native.safellamahandlebase/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.native.safellamahandlebase/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.native.safellamahandlebase/#tostring","title":"ToString()","text":"<pre><code>public string ToString()\n</code></pre>"},{"location":"xmldocs/llama.native.safellamahandlebase/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/","title":"ChatCompletion","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class ChatCompletion : System.IEquatable`1[[LLama.OldVersion.ChatCompletion, LLamaSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null]]\n</code></pre> <p>Inheritance Object \u2192 ChatCompletion Implements IEquatable&lt;ChatCompletion&gt;</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.chatcompletion/#id","title":"Id","text":"<pre><code>public string Id { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#object","title":"Object","text":"<pre><code>public string Object { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#property-value_1","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#created","title":"Created","text":"<pre><code>public int Created { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#property-value_2","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#model","title":"Model","text":"<pre><code>public string Model { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#property-value_3","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#choices","title":"Choices","text":"<pre><code>public ChatCompletionChoice[] Choices { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#property-value_4","title":"Property Value","text":"<p>ChatCompletionChoice[]</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#usage","title":"Usage","text":"<pre><code>public CompletionUsage Usage { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#property-value_5","title":"Property Value","text":"<p>CompletionUsage</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.chatcompletion/#chatcompletionstring-string-int32-string-chatcompletionchoice-completionusage","title":"ChatCompletion(String, String, Int32, String, ChatCompletionChoice[], CompletionUsage)","text":"<pre><code>public ChatCompletion(string Id, string Object, int Created, string Model, ChatCompletionChoice[] Choices, CompletionUsage Usage)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#parameters","title":"Parameters","text":"<p><code>Id</code> String</p> <p><code>Object</code> String</p> <p><code>Created</code> Int32</p> <p><code>Model</code> String</p> <p><code>Choices</code> ChatCompletionChoice[]</p> <p><code>Usage</code> CompletionUsage</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.chatcompletion/#tostring","title":"ToString()","text":"<pre><code>public string ToString()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#printmembersstringbuilder","title":"PrintMembers(StringBuilder)","text":"<pre><code>protected bool PrintMembers(StringBuilder builder)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#parameters_1","title":"Parameters","text":"<p><code>builder</code> StringBuilder</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#gethashcode","title":"GetHashCode()","text":"<pre><code>public int GetHashCode()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#equalsobject","title":"Equals(Object)","text":"<pre><code>public bool Equals(object obj)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#parameters_2","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#equalschatcompletion","title":"Equals(ChatCompletion)","text":"<pre><code>public bool Equals(ChatCompletion other)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#parameters_3","title":"Parameters","text":"<p><code>other</code> ChatCompletion</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#clone","title":"&lt;Clone&gt;$()","text":"<pre><code>public ChatCompletion &lt;Clone&gt;$()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#returns_5","title":"Returns","text":"<p>ChatCompletion</p>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#deconstructstring-string-int32-string-chatcompletionchoice-completionusage","title":"Deconstruct(String&amp;, String&amp;, Int32&amp;, String&amp;, ChatCompletionChoice[]&amp;, CompletionUsage&amp;)","text":"<pre><code>public void Deconstruct(String&amp; Id, String&amp; Object, Int32&amp; Created, String&amp; Model, ChatCompletionChoice[]&amp; Choices, CompletionUsage&amp; Usage)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletion/#parameters_4","title":"Parameters","text":"<p><code>Id</code> String&amp;</p> <p><code>Object</code> String&amp;</p> <p><code>Created</code> Int32&amp;</p> <p><code>Model</code> String&amp;</p> <p><code>Choices</code> ChatCompletionChoice[]&amp;</p> <p><code>Usage</code> CompletionUsage&amp;</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/","title":"ChatCompletionChoice","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class ChatCompletionChoice : System.IEquatable`1[[LLama.OldVersion.ChatCompletionChoice, LLamaSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null]]\n</code></pre> <p>Inheritance Object \u2192 ChatCompletionChoice Implements IEquatable&lt;ChatCompletionChoice&gt;</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#index","title":"Index","text":"<pre><code>public int Index { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#message","title":"Message","text":"<pre><code>public ChatCompletionMessage Message { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#property-value_1","title":"Property Value","text":"<p>ChatCompletionMessage</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#finishreason","title":"FinishReason","text":"<pre><code>public string FinishReason { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#property-value_2","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#chatcompletionchoiceint32-chatcompletionmessage-string","title":"ChatCompletionChoice(Int32, ChatCompletionMessage, String)","text":"<pre><code>public ChatCompletionChoice(int Index, ChatCompletionMessage Message, string FinishReason)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#parameters","title":"Parameters","text":"<p><code>Index</code> Int32</p> <p><code>Message</code> ChatCompletionMessage</p> <p><code>FinishReason</code> String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#tostring","title":"ToString()","text":"<pre><code>public string ToString()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#printmembersstringbuilder","title":"PrintMembers(StringBuilder)","text":"<pre><code>protected bool PrintMembers(StringBuilder builder)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#parameters_1","title":"Parameters","text":"<p><code>builder</code> StringBuilder</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#gethashcode","title":"GetHashCode()","text":"<pre><code>public int GetHashCode()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#equalsobject","title":"Equals(Object)","text":"<pre><code>public bool Equals(object obj)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#parameters_2","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#equalschatcompletionchoice","title":"Equals(ChatCompletionChoice)","text":"<pre><code>public bool Equals(ChatCompletionChoice other)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#parameters_3","title":"Parameters","text":"<p><code>other</code> ChatCompletionChoice</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#clone","title":"&lt;Clone&gt;$()","text":"<pre><code>public ChatCompletionChoice &lt;Clone&gt;$()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#returns_5","title":"Returns","text":"<p>ChatCompletionChoice</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#deconstructint32-chatcompletionmessage-string","title":"Deconstruct(Int32&amp;, ChatCompletionMessage&amp;, String&amp;)","text":"<pre><code>public void Deconstruct(Int32&amp; Index, ChatCompletionMessage&amp; Message, String&amp; FinishReason)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchoice/#parameters_4","title":"Parameters","text":"<p><code>Index</code> Int32&amp;</p> <p><code>Message</code> ChatCompletionMessage&amp;</p> <p><code>FinishReason</code> String&amp;</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/","title":"ChatCompletionChunk","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class ChatCompletionChunk : System.IEquatable`1[[LLama.OldVersion.ChatCompletionChunk, LLamaSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null]]\n</code></pre> <p>Inheritance Object \u2192 ChatCompletionChunk Implements IEquatable&lt;ChatCompletionChunk&gt;</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#id","title":"Id","text":"<pre><code>public string Id { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#model","title":"Model","text":"<pre><code>public string Model { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#property-value_1","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#object","title":"Object","text":"<pre><code>public string Object { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#property-value_2","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#created","title":"Created","text":"<pre><code>public int Created { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#property-value_3","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#choices","title":"Choices","text":"<pre><code>public ChatCompletionChunkChoice[] Choices { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#property-value_4","title":"Property Value","text":"<p>ChatCompletionChunkChoice[]</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#chatcompletionchunkstring-string-string-int32-chatcompletionchunkchoice","title":"ChatCompletionChunk(String, String, String, Int32, ChatCompletionChunkChoice[])","text":"<pre><code>public ChatCompletionChunk(string Id, string Model, string Object, int Created, ChatCompletionChunkChoice[] Choices)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#parameters","title":"Parameters","text":"<p><code>Id</code> String</p> <p><code>Model</code> String</p> <p><code>Object</code> String</p> <p><code>Created</code> Int32</p> <p><code>Choices</code> ChatCompletionChunkChoice[]</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#tostring","title":"ToString()","text":"<pre><code>public string ToString()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#printmembersstringbuilder","title":"PrintMembers(StringBuilder)","text":"<pre><code>protected bool PrintMembers(StringBuilder builder)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#parameters_1","title":"Parameters","text":"<p><code>builder</code> StringBuilder</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#gethashcode","title":"GetHashCode()","text":"<pre><code>public int GetHashCode()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#equalsobject","title":"Equals(Object)","text":"<pre><code>public bool Equals(object obj)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#parameters_2","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#equalschatcompletionchunk","title":"Equals(ChatCompletionChunk)","text":"<pre><code>public bool Equals(ChatCompletionChunk other)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#parameters_3","title":"Parameters","text":"<p><code>other</code> ChatCompletionChunk</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#clone","title":"&lt;Clone&gt;$()","text":"<pre><code>public ChatCompletionChunk &lt;Clone&gt;$()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#returns_5","title":"Returns","text":"<p>ChatCompletionChunk</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#deconstructstring-string-string-int32-chatcompletionchunkchoice","title":"Deconstruct(String&amp;, String&amp;, String&amp;, Int32&amp;, ChatCompletionChunkChoice[]&amp;)","text":"<pre><code>public void Deconstruct(String&amp; Id, String&amp; Model, String&amp; Object, Int32&amp; Created, ChatCompletionChunkChoice[]&amp; Choices)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunk/#parameters_4","title":"Parameters","text":"<p><code>Id</code> String&amp;</p> <p><code>Model</code> String&amp;</p> <p><code>Object</code> String&amp;</p> <p><code>Created</code> Int32&amp;</p> <p><code>Choices</code> ChatCompletionChunkChoice[]&amp;</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/","title":"ChatCompletionChunkChoice","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class ChatCompletionChunkChoice : System.IEquatable`1[[LLama.OldVersion.ChatCompletionChunkChoice, LLamaSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null]]\n</code></pre> <p>Inheritance Object \u2192 ChatCompletionChunkChoice Implements IEquatable&lt;ChatCompletionChunkChoice&gt;</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#index","title":"Index","text":"<pre><code>public int Index { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#delta","title":"Delta","text":"<pre><code>public ChatCompletionChunkDelta Delta { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#property-value_1","title":"Property Value","text":"<p>ChatCompletionChunkDelta</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#finishreason","title":"FinishReason","text":"<pre><code>public string FinishReason { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#property-value_2","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#chatcompletionchunkchoiceint32-chatcompletionchunkdelta-string","title":"ChatCompletionChunkChoice(Int32, ChatCompletionChunkDelta, String)","text":"<pre><code>public ChatCompletionChunkChoice(int Index, ChatCompletionChunkDelta Delta, string FinishReason)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#parameters","title":"Parameters","text":"<p><code>Index</code> Int32</p> <p><code>Delta</code> ChatCompletionChunkDelta</p> <p><code>FinishReason</code> String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#tostring","title":"ToString()","text":"<pre><code>public string ToString()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#printmembersstringbuilder","title":"PrintMembers(StringBuilder)","text":"<pre><code>protected bool PrintMembers(StringBuilder builder)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#parameters_1","title":"Parameters","text":"<p><code>builder</code> StringBuilder</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#gethashcode","title":"GetHashCode()","text":"<pre><code>public int GetHashCode()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#equalsobject","title":"Equals(Object)","text":"<pre><code>public bool Equals(object obj)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#parameters_2","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#equalschatcompletionchunkchoice","title":"Equals(ChatCompletionChunkChoice)","text":"<pre><code>public bool Equals(ChatCompletionChunkChoice other)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#parameters_3","title":"Parameters","text":"<p><code>other</code> ChatCompletionChunkChoice</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#clone","title":"&lt;Clone&gt;$()","text":"<pre><code>public ChatCompletionChunkChoice &lt;Clone&gt;$()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#returns_5","title":"Returns","text":"<p>ChatCompletionChunkChoice</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#deconstructint32-chatcompletionchunkdelta-string","title":"Deconstruct(Int32&amp;, ChatCompletionChunkDelta&amp;, String&amp;)","text":"<pre><code>public void Deconstruct(Int32&amp; Index, ChatCompletionChunkDelta&amp; Delta, String&amp; FinishReason)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkchoice/#parameters_4","title":"Parameters","text":"<p><code>Index</code> Int32&amp;</p> <p><code>Delta</code> ChatCompletionChunkDelta&amp;</p> <p><code>FinishReason</code> String&amp;</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/","title":"ChatCompletionChunkDelta","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class ChatCompletionChunkDelta : System.IEquatable`1[[LLama.OldVersion.ChatCompletionChunkDelta, LLamaSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null]]\n</code></pre> <p>Inheritance Object \u2192 ChatCompletionChunkDelta Implements IEquatable&lt;ChatCompletionChunkDelta&gt;</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#role","title":"Role","text":"<pre><code>public string Role { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#content","title":"Content","text":"<pre><code>public string Content { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#property-value_1","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#chatcompletionchunkdeltastring-string","title":"ChatCompletionChunkDelta(String, String)","text":"<pre><code>public ChatCompletionChunkDelta(string Role, string Content)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#parameters","title":"Parameters","text":"<p><code>Role</code> String</p> <p><code>Content</code> String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#tostring","title":"ToString()","text":"<pre><code>public string ToString()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#printmembersstringbuilder","title":"PrintMembers(StringBuilder)","text":"<pre><code>protected bool PrintMembers(StringBuilder builder)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#parameters_1","title":"Parameters","text":"<p><code>builder</code> StringBuilder</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#gethashcode","title":"GetHashCode()","text":"<pre><code>public int GetHashCode()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#equalsobject","title":"Equals(Object)","text":"<pre><code>public bool Equals(object obj)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#parameters_2","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#equalschatcompletionchunkdelta","title":"Equals(ChatCompletionChunkDelta)","text":"<pre><code>public bool Equals(ChatCompletionChunkDelta other)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#parameters_3","title":"Parameters","text":"<p><code>other</code> ChatCompletionChunkDelta</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#clone","title":"&lt;Clone&gt;$()","text":"<pre><code>public ChatCompletionChunkDelta &lt;Clone&gt;$()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#returns_5","title":"Returns","text":"<p>ChatCompletionChunkDelta</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#deconstructstring-string","title":"Deconstruct(String&amp;, String&amp;)","text":"<pre><code>public void Deconstruct(String&amp; Role, String&amp; Content)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionchunkdelta/#parameters_4","title":"Parameters","text":"<p><code>Role</code> String&amp;</p> <p><code>Content</code> String&amp;</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/","title":"ChatCompletionMessage","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class ChatCompletionMessage : System.IEquatable`1[[LLama.OldVersion.ChatCompletionMessage, LLamaSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null]]\n</code></pre> <p>Inheritance Object \u2192 ChatCompletionMessage Implements IEquatable&lt;ChatCompletionMessage&gt;</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#role","title":"Role","text":"<pre><code>public ChatRole Role { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#property-value","title":"Property Value","text":"<p>ChatRole</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#content","title":"Content","text":"<pre><code>public string Content { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#property-value_1","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#name","title":"Name","text":"<pre><code>public string Name { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#property-value_2","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#chatcompletionmessagechatrole-string-string","title":"ChatCompletionMessage(ChatRole, String, String)","text":"<pre><code>public ChatCompletionMessage(ChatRole Role, string Content, string Name)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#parameters","title":"Parameters","text":"<p><code>Role</code> ChatRole</p> <p><code>Content</code> String</p> <p><code>Name</code> String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#tostring","title":"ToString()","text":"<pre><code>public string ToString()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#printmembersstringbuilder","title":"PrintMembers(StringBuilder)","text":"<pre><code>protected bool PrintMembers(StringBuilder builder)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#parameters_1","title":"Parameters","text":"<p><code>builder</code> StringBuilder</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#gethashcode","title":"GetHashCode()","text":"<pre><code>public int GetHashCode()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#equalsobject","title":"Equals(Object)","text":"<pre><code>public bool Equals(object obj)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#parameters_2","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#equalschatcompletionmessage","title":"Equals(ChatCompletionMessage)","text":"<pre><code>public bool Equals(ChatCompletionMessage other)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#parameters_3","title":"Parameters","text":"<p><code>other</code> ChatCompletionMessage</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#clone","title":"&lt;Clone&gt;$()","text":"<pre><code>public ChatCompletionMessage &lt;Clone&gt;$()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#returns_5","title":"Returns","text":"<p>ChatCompletionMessage</p>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#deconstructchatrole-string-string","title":"Deconstruct(ChatRole&amp;, String&amp;, String&amp;)","text":"<pre><code>public void Deconstruct(ChatRole&amp; Role, String&amp; Content, String&amp; Name)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatcompletionmessage/#parameters_4","title":"Parameters","text":"<p><code>Role</code> ChatRole&amp;</p> <p><code>Content</code> String&amp;</p> <p><code>Name</code> String&amp;</p>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/","title":"ChatMessageRecord","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class ChatMessageRecord : System.IEquatable`1[[LLama.OldVersion.ChatMessageRecord, LLamaSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null]]\n</code></pre> <p>Inheritance Object \u2192 ChatMessageRecord Implements IEquatable&lt;ChatMessageRecord&gt;</p>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#message","title":"Message","text":"<pre><code>public ChatCompletionMessage Message { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#property-value","title":"Property Value","text":"<p>ChatCompletionMessage</p>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#time","title":"Time","text":"<pre><code>public DateTime Time { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#property-value_1","title":"Property Value","text":"<p>DateTime</p>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#chatmessagerecordchatcompletionmessage-datetime","title":"ChatMessageRecord(ChatCompletionMessage, DateTime)","text":"<pre><code>public ChatMessageRecord(ChatCompletionMessage Message, DateTime Time)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#parameters","title":"Parameters","text":"<p><code>Message</code> ChatCompletionMessage</p> <p><code>Time</code> DateTime</p>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#tostring","title":"ToString()","text":"<pre><code>public string ToString()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#printmembersstringbuilder","title":"PrintMembers(StringBuilder)","text":"<pre><code>protected bool PrintMembers(StringBuilder builder)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#parameters_1","title":"Parameters","text":"<p><code>builder</code> StringBuilder</p>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#gethashcode","title":"GetHashCode()","text":"<pre><code>public int GetHashCode()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#equalsobject","title":"Equals(Object)","text":"<pre><code>public bool Equals(object obj)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#parameters_2","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#equalschatmessagerecord","title":"Equals(ChatMessageRecord)","text":"<pre><code>public bool Equals(ChatMessageRecord other)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#parameters_3","title":"Parameters","text":"<p><code>other</code> ChatMessageRecord</p>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#clone","title":"&lt;Clone&gt;$()","text":"<pre><code>public ChatMessageRecord &lt;Clone&gt;$()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#returns_5","title":"Returns","text":"<p>ChatMessageRecord</p>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#deconstructchatcompletionmessage-datetime","title":"Deconstruct(ChatCompletionMessage&amp;, DateTime&amp;)","text":"<pre><code>public void Deconstruct(ChatCompletionMessage&amp; Message, DateTime&amp; Time)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatmessagerecord/#parameters_4","title":"Parameters","text":"<p><code>Message</code> ChatCompletionMessage&amp;</p> <p><code>Time</code> DateTime&amp;</p>"},{"location":"xmldocs/llama.oldversion.chatrole/","title":"ChatRole","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public enum ChatRole\n</code></pre> <p>Inheritance Object \u2192 ValueType \u2192 Enum \u2192 ChatRole Implements IComparable, IFormattable, IConvertible</p>"},{"location":"xmldocs/llama.oldversion.chatrole/#fields","title":"Fields","text":"Name Value Description"},{"location":"xmldocs/llama.oldversion.chatsession-1/","title":"ChatSession&lt;T&gt;","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class ChatSession&lt;T&gt;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatsession-1/#type-parameters","title":"Type Parameters","text":"<p><code>T</code></p> <p>Inheritance Object \u2192 ChatSession&lt;T&gt;</p>"},{"location":"xmldocs/llama.oldversion.chatsession-1/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.chatsession-1/#chatsessiont_1","title":"ChatSession(T)","text":"<pre><code>public ChatSession(T model)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatsession-1/#parameters","title":"Parameters","text":"<p><code>model</code> T</p>"},{"location":"xmldocs/llama.oldversion.chatsession-1/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.chatsession-1/#chatstring-string-string","title":"Chat(String, String, String)","text":"<pre><code>public IEnumerable&lt;string&gt; Chat(string text, string prompt, string encoding)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatsession-1/#parameters_1","title":"Parameters","text":"<p><code>text</code> String</p> <p><code>prompt</code> String</p> <p><code>encoding</code> String</p>"},{"location":"xmldocs/llama.oldversion.chatsession-1/#returns","title":"Returns","text":"<p>IEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.oldversion.chatsession-1/#withpromptstring-string","title":"WithPrompt(String, String)","text":"<pre><code>public ChatSession&lt;T&gt; WithPrompt(string prompt, string encoding)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatsession-1/#parameters_2","title":"Parameters","text":"<p><code>prompt</code> String</p> <p><code>encoding</code> String</p>"},{"location":"xmldocs/llama.oldversion.chatsession-1/#returns_1","title":"Returns","text":"<p>ChatSession&lt;T&gt;</p>"},{"location":"xmldocs/llama.oldversion.chatsession-1/#withpromptfilestring-string","title":"WithPromptFile(String, String)","text":"<pre><code>public ChatSession&lt;T&gt; WithPromptFile(string promptFilename, string encoding)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatsession-1/#parameters_3","title":"Parameters","text":"<p><code>promptFilename</code> String</p> <p><code>encoding</code> String</p>"},{"location":"xmldocs/llama.oldversion.chatsession-1/#returns_2","title":"Returns","text":"<p>ChatSession&lt;T&gt;</p>"},{"location":"xmldocs/llama.oldversion.chatsession-1/#withantipromptstring","title":"WithAntiprompt(String[])","text":"<p>Set the keyword to split the return value of chat AI.</p> <pre><code>public ChatSession&lt;T&gt; WithAntiprompt(String[] antiprompt)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.chatsession-1/#parameters_4","title":"Parameters","text":"<p><code>antiprompt</code> String[]</p>"},{"location":"xmldocs/llama.oldversion.chatsession-1/#returns_3","title":"Returns","text":"<p>ChatSession&lt;T&gt;</p>"},{"location":"xmldocs/llama.oldversion.completion/","title":"Completion","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class Completion : System.IEquatable`1[[LLama.OldVersion.Completion, LLamaSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null]]\n</code></pre> <p>Inheritance Object \u2192 Completion Implements IEquatable&lt;Completion&gt;</p>"},{"location":"xmldocs/llama.oldversion.completion/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.completion/#id","title":"Id","text":"<pre><code>public string Id { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completion/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.completion/#object","title":"Object","text":"<pre><code>public string Object { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completion/#property-value_1","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.completion/#created","title":"Created","text":"<pre><code>public int Created { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completion/#property-value_2","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.completion/#model","title":"Model","text":"<pre><code>public string Model { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completion/#property-value_3","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.completion/#choices","title":"Choices","text":"<pre><code>public CompletionChoice[] Choices { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completion/#property-value_4","title":"Property Value","text":"<p>CompletionChoice[]</p>"},{"location":"xmldocs/llama.oldversion.completion/#usage","title":"Usage","text":"<pre><code>public CompletionUsage Usage { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completion/#property-value_5","title":"Property Value","text":"<p>CompletionUsage</p>"},{"location":"xmldocs/llama.oldversion.completion/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.completion/#completionstring-string-int32-string-completionchoice-completionusage","title":"Completion(String, String, Int32, String, CompletionChoice[], CompletionUsage)","text":"<pre><code>public Completion(string Id, string Object, int Created, string Model, CompletionChoice[] Choices, CompletionUsage Usage)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completion/#parameters","title":"Parameters","text":"<p><code>Id</code> String</p> <p><code>Object</code> String</p> <p><code>Created</code> Int32</p> <p><code>Model</code> String</p> <p><code>Choices</code> CompletionChoice[]</p> <p><code>Usage</code> CompletionUsage</p>"},{"location":"xmldocs/llama.oldversion.completion/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.completion/#tostring","title":"ToString()","text":"<pre><code>public string ToString()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completion/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.completion/#printmembersstringbuilder","title":"PrintMembers(StringBuilder)","text":"<pre><code>protected bool PrintMembers(StringBuilder builder)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completion/#parameters_1","title":"Parameters","text":"<p><code>builder</code> StringBuilder</p>"},{"location":"xmldocs/llama.oldversion.completion/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.completion/#gethashcode","title":"GetHashCode()","text":"<pre><code>public int GetHashCode()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completion/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.completion/#equalsobject","title":"Equals(Object)","text":"<pre><code>public bool Equals(object obj)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completion/#parameters_2","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"xmldocs/llama.oldversion.completion/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.completion/#equalscompletion","title":"Equals(Completion)","text":"<pre><code>public bool Equals(Completion other)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completion/#parameters_3","title":"Parameters","text":"<p><code>other</code> Completion</p>"},{"location":"xmldocs/llama.oldversion.completion/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.completion/#clone","title":"&lt;Clone&gt;$()","text":"<pre><code>public Completion &lt;Clone&gt;$()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completion/#returns_5","title":"Returns","text":"<p>Completion</p>"},{"location":"xmldocs/llama.oldversion.completion/#deconstructstring-string-int32-string-completionchoice-completionusage","title":"Deconstruct(String&amp;, String&amp;, Int32&amp;, String&amp;, CompletionChoice[]&amp;, CompletionUsage&amp;)","text":"<pre><code>public void Deconstruct(String&amp; Id, String&amp; Object, Int32&amp; Created, String&amp; Model, CompletionChoice[]&amp; Choices, CompletionUsage&amp; Usage)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completion/#parameters_4","title":"Parameters","text":"<p><code>Id</code> String&amp;</p> <p><code>Object</code> String&amp;</p> <p><code>Created</code> Int32&amp;</p> <p><code>Model</code> String&amp;</p> <p><code>Choices</code> CompletionChoice[]&amp;</p> <p><code>Usage</code> CompletionUsage&amp;</p>"},{"location":"xmldocs/llama.oldversion.completionchoice/","title":"CompletionChoice","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class CompletionChoice : System.IEquatable`1[[LLama.OldVersion.CompletionChoice, LLamaSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null]]\n</code></pre> <p>Inheritance Object \u2192 CompletionChoice Implements IEquatable&lt;CompletionChoice&gt;</p>"},{"location":"xmldocs/llama.oldversion.completionchoice/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.completionchoice/#text","title":"Text","text":"<pre><code>public string Text { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchoice/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.completionchoice/#index","title":"Index","text":"<pre><code>public int Index { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchoice/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.completionchoice/#logprobs","title":"Logprobs","text":"<pre><code>public CompletionLogprobs Logprobs { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchoice/#property-value_2","title":"Property Value","text":"<p>CompletionLogprobs</p>"},{"location":"xmldocs/llama.oldversion.completionchoice/#finishreason","title":"FinishReason","text":"<pre><code>public string FinishReason { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchoice/#property-value_3","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.completionchoice/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.completionchoice/#completionchoicestring-int32-completionlogprobs-string","title":"CompletionChoice(String, Int32, CompletionLogprobs, String)","text":"<pre><code>public CompletionChoice(string Text, int Index, CompletionLogprobs Logprobs, string FinishReason)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchoice/#parameters","title":"Parameters","text":"<p><code>Text</code> String</p> <p><code>Index</code> Int32</p> <p><code>Logprobs</code> CompletionLogprobs</p> <p><code>FinishReason</code> String</p>"},{"location":"xmldocs/llama.oldversion.completionchoice/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.completionchoice/#tostring","title":"ToString()","text":"<pre><code>public string ToString()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchoice/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.completionchoice/#printmembersstringbuilder","title":"PrintMembers(StringBuilder)","text":"<pre><code>protected bool PrintMembers(StringBuilder builder)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchoice/#parameters_1","title":"Parameters","text":"<p><code>builder</code> StringBuilder</p>"},{"location":"xmldocs/llama.oldversion.completionchoice/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.completionchoice/#gethashcode","title":"GetHashCode()","text":"<pre><code>public int GetHashCode()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchoice/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.completionchoice/#equalsobject","title":"Equals(Object)","text":"<pre><code>public bool Equals(object obj)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchoice/#parameters_2","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"xmldocs/llama.oldversion.completionchoice/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.completionchoice/#equalscompletionchoice","title":"Equals(CompletionChoice)","text":"<pre><code>public bool Equals(CompletionChoice other)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchoice/#parameters_3","title":"Parameters","text":"<p><code>other</code> CompletionChoice</p>"},{"location":"xmldocs/llama.oldversion.completionchoice/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.completionchoice/#clone","title":"&lt;Clone&gt;$()","text":"<pre><code>public CompletionChoice &lt;Clone&gt;$()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchoice/#returns_5","title":"Returns","text":"<p>CompletionChoice</p>"},{"location":"xmldocs/llama.oldversion.completionchoice/#deconstructstring-int32-completionlogprobs-string","title":"Deconstruct(String&amp;, Int32&amp;, CompletionLogprobs&amp;, String&amp;)","text":"<pre><code>public void Deconstruct(String&amp; Text, Int32&amp; Index, CompletionLogprobs&amp; Logprobs, String&amp; FinishReason)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchoice/#parameters_4","title":"Parameters","text":"<p><code>Text</code> String&amp;</p> <p><code>Index</code> Int32&amp;</p> <p><code>Logprobs</code> CompletionLogprobs&amp;</p> <p><code>FinishReason</code> String&amp;</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/","title":"CompletionChunk","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class CompletionChunk : System.IEquatable`1[[LLama.OldVersion.CompletionChunk, LLamaSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null]]\n</code></pre> <p>Inheritance Object \u2192 CompletionChunk Implements IEquatable&lt;CompletionChunk&gt;</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.completionchunk/#id","title":"Id","text":"<pre><code>public string Id { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchunk/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/#object","title":"Object","text":"<pre><code>public string Object { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchunk/#property-value_1","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/#created","title":"Created","text":"<pre><code>public int Created { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchunk/#property-value_2","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/#model","title":"Model","text":"<pre><code>public string Model { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchunk/#property-value_3","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/#choices","title":"Choices","text":"<pre><code>public CompletionChoice[] Choices { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchunk/#property-value_4","title":"Property Value","text":"<p>CompletionChoice[]</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.completionchunk/#completionchunkstring-string-int32-string-completionchoice","title":"CompletionChunk(String, String, Int32, String, CompletionChoice[])","text":"<pre><code>public CompletionChunk(string Id, string Object, int Created, string Model, CompletionChoice[] Choices)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchunk/#parameters","title":"Parameters","text":"<p><code>Id</code> String</p> <p><code>Object</code> String</p> <p><code>Created</code> Int32</p> <p><code>Model</code> String</p> <p><code>Choices</code> CompletionChoice[]</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.completionchunk/#tostring","title":"ToString()","text":"<pre><code>public string ToString()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchunk/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/#printmembersstringbuilder","title":"PrintMembers(StringBuilder)","text":"<pre><code>protected bool PrintMembers(StringBuilder builder)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchunk/#parameters_1","title":"Parameters","text":"<p><code>builder</code> StringBuilder</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/#gethashcode","title":"GetHashCode()","text":"<pre><code>public int GetHashCode()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchunk/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/#equalsobject","title":"Equals(Object)","text":"<pre><code>public bool Equals(object obj)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchunk/#parameters_2","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/#equalscompletionchunk","title":"Equals(CompletionChunk)","text":"<pre><code>public bool Equals(CompletionChunk other)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchunk/#parameters_3","title":"Parameters","text":"<p><code>other</code> CompletionChunk</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/#clone","title":"&lt;Clone&gt;$()","text":"<pre><code>public CompletionChunk &lt;Clone&gt;$()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchunk/#returns_5","title":"Returns","text":"<p>CompletionChunk</p>"},{"location":"xmldocs/llama.oldversion.completionchunk/#deconstructstring-string-int32-string-completionchoice","title":"Deconstruct(String&amp;, String&amp;, Int32&amp;, String&amp;, CompletionChoice[]&amp;)","text":"<pre><code>public void Deconstruct(String&amp; Id, String&amp; Object, Int32&amp; Created, String&amp; Model, CompletionChoice[]&amp; Choices)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionchunk/#parameters_4","title":"Parameters","text":"<p><code>Id</code> String&amp;</p> <p><code>Object</code> String&amp;</p> <p><code>Created</code> Int32&amp;</p> <p><code>Model</code> String&amp;</p> <p><code>Choices</code> CompletionChoice[]&amp;</p>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/","title":"CompletionLogprobs","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class CompletionLogprobs : System.IEquatable`1[[LLama.OldVersion.CompletionLogprobs, LLamaSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null]]\n</code></pre> <p>Inheritance Object \u2192 CompletionLogprobs Implements IEquatable&lt;CompletionLogprobs&gt;</p>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.completionlogprobs/#textoffset","title":"TextOffset","text":"<pre><code>public Int32[] TextOffset { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#property-value","title":"Property Value","text":"<p>Int32[]</p>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#tokenlogprobs","title":"TokenLogProbs","text":"<pre><code>public Single[] TokenLogProbs { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#property-value_1","title":"Property Value","text":"<p>Single[]</p>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#tokens","title":"Tokens","text":"<pre><code>public String[] Tokens { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#property-value_2","title":"Property Value","text":"<p>String[]</p>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#toplogprobs","title":"TopLogprobs","text":"<pre><code>public Dictionary`2[] TopLogprobs { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#property-value_3","title":"Property Value","text":"<p>Dictionary`2[]</p>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.completionlogprobs/#completionlogprobsint32-single-string-dictionary2","title":"CompletionLogprobs(Int32[], Single[], String[], Dictionary`2[])","text":"<pre><code>public CompletionLogprobs(Int32[] TextOffset, Single[] TokenLogProbs, String[] Tokens, Dictionary`2[] TopLogprobs)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#parameters","title":"Parameters","text":"<p><code>TextOffset</code> Int32[]</p> <p><code>TokenLogProbs</code> Single[]</p> <p><code>Tokens</code> String[]</p> <p><code>TopLogprobs</code> Dictionary`2[]</p>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.completionlogprobs/#tostring","title":"ToString()","text":"<pre><code>public string ToString()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#printmembersstringbuilder","title":"PrintMembers(StringBuilder)","text":"<pre><code>protected bool PrintMembers(StringBuilder builder)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#parameters_1","title":"Parameters","text":"<p><code>builder</code> StringBuilder</p>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#gethashcode","title":"GetHashCode()","text":"<pre><code>public int GetHashCode()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#equalsobject","title":"Equals(Object)","text":"<pre><code>public bool Equals(object obj)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#parameters_2","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#equalscompletionlogprobs","title":"Equals(CompletionLogprobs)","text":"<pre><code>public bool Equals(CompletionLogprobs other)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#parameters_3","title":"Parameters","text":"<p><code>other</code> CompletionLogprobs</p>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#clone","title":"&lt;Clone&gt;$()","text":"<pre><code>public CompletionLogprobs &lt;Clone&gt;$()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#returns_5","title":"Returns","text":"<p>CompletionLogprobs</p>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#deconstructint32-single-string-dictionary2","title":"Deconstruct(Int32[]&amp;, Single[]&amp;, String[]&amp;, Dictionary`2[]&amp;)","text":"<pre><code>public void Deconstruct(Int32[]&amp; TextOffset, Single[]&amp; TokenLogProbs, String[]&amp; Tokens, Dictionary`2[]&amp; TopLogprobs)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionlogprobs/#parameters_4","title":"Parameters","text":"<p><code>TextOffset</code> Int32[]&amp;</p> <p><code>TokenLogProbs</code> Single[]&amp;</p> <p><code>Tokens</code> String[]&amp;</p> <p><code>TopLogprobs</code> Dictionary`2[]&amp;</p>"},{"location":"xmldocs/llama.oldversion.completionusage/","title":"CompletionUsage","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class CompletionUsage : System.IEquatable`1[[LLama.OldVersion.CompletionUsage, LLamaSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null]]\n</code></pre> <p>Inheritance Object \u2192 CompletionUsage Implements IEquatable&lt;CompletionUsage&gt;</p>"},{"location":"xmldocs/llama.oldversion.completionusage/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.completionusage/#prompttokens","title":"PromptTokens","text":"<pre><code>public int PromptTokens { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionusage/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.completionusage/#completiontokens","title":"CompletionTokens","text":"<pre><code>public int CompletionTokens { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionusage/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.completionusage/#totaltokens","title":"TotalTokens","text":"<pre><code>public int TotalTokens { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionusage/#property-value_2","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.completionusage/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.completionusage/#completionusageint32-int32-int32","title":"CompletionUsage(Int32, Int32, Int32)","text":"<pre><code>public CompletionUsage(int PromptTokens, int CompletionTokens, int TotalTokens)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionusage/#parameters","title":"Parameters","text":"<p><code>PromptTokens</code> Int32</p> <p><code>CompletionTokens</code> Int32</p> <p><code>TotalTokens</code> Int32</p>"},{"location":"xmldocs/llama.oldversion.completionusage/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.completionusage/#tostring","title":"ToString()","text":"<pre><code>public string ToString()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionusage/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.completionusage/#printmembersstringbuilder","title":"PrintMembers(StringBuilder)","text":"<pre><code>protected bool PrintMembers(StringBuilder builder)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionusage/#parameters_1","title":"Parameters","text":"<p><code>builder</code> StringBuilder</p>"},{"location":"xmldocs/llama.oldversion.completionusage/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.completionusage/#gethashcode","title":"GetHashCode()","text":"<pre><code>public int GetHashCode()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionusage/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.completionusage/#equalsobject","title":"Equals(Object)","text":"<pre><code>public bool Equals(object obj)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionusage/#parameters_2","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"xmldocs/llama.oldversion.completionusage/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.completionusage/#equalscompletionusage","title":"Equals(CompletionUsage)","text":"<pre><code>public bool Equals(CompletionUsage other)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionusage/#parameters_3","title":"Parameters","text":"<p><code>other</code> CompletionUsage</p>"},{"location":"xmldocs/llama.oldversion.completionusage/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.completionusage/#clone","title":"&lt;Clone&gt;$()","text":"<pre><code>public CompletionUsage &lt;Clone&gt;$()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionusage/#returns_5","title":"Returns","text":"<p>CompletionUsage</p>"},{"location":"xmldocs/llama.oldversion.completionusage/#deconstructint32-int32-int32","title":"Deconstruct(Int32&amp;, Int32&amp;, Int32&amp;)","text":"<pre><code>public void Deconstruct(Int32&amp; PromptTokens, Int32&amp; CompletionTokens, Int32&amp; TotalTokens)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.completionusage/#parameters_4","title":"Parameters","text":"<p><code>PromptTokens</code> Int32&amp;</p> <p><code>CompletionTokens</code> Int32&amp;</p> <p><code>TotalTokens</code> Int32&amp;</p>"},{"location":"xmldocs/llama.oldversion.embedding/","title":"Embedding","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class Embedding : System.IEquatable`1[[LLama.OldVersion.Embedding, LLamaSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null]]\n</code></pre> <p>Inheritance Object \u2192 Embedding Implements IEquatable&lt;Embedding&gt;</p>"},{"location":"xmldocs/llama.oldversion.embedding/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.embedding/#object","title":"Object","text":"<pre><code>public string Object { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embedding/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.embedding/#model","title":"Model","text":"<pre><code>public string Model { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embedding/#property-value_1","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.embedding/#data","title":"Data","text":"<pre><code>public EmbeddingData[] Data { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embedding/#property-value_2","title":"Property Value","text":"<p>EmbeddingData[]</p>"},{"location":"xmldocs/llama.oldversion.embedding/#usage","title":"Usage","text":"<pre><code>public EmbeddingUsage Usage { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embedding/#property-value_3","title":"Property Value","text":"<p>EmbeddingUsage</p>"},{"location":"xmldocs/llama.oldversion.embedding/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.embedding/#embeddingstring-string-embeddingdata-embeddingusage","title":"Embedding(String, String, EmbeddingData[], EmbeddingUsage)","text":"<pre><code>public Embedding(string Object, string Model, EmbeddingData[] Data, EmbeddingUsage Usage)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embedding/#parameters","title":"Parameters","text":"<p><code>Object</code> String</p> <p><code>Model</code> String</p> <p><code>Data</code> EmbeddingData[]</p> <p><code>Usage</code> EmbeddingUsage</p>"},{"location":"xmldocs/llama.oldversion.embedding/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.embedding/#tostring","title":"ToString()","text":"<pre><code>public string ToString()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embedding/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.embedding/#printmembersstringbuilder","title":"PrintMembers(StringBuilder)","text":"<pre><code>protected bool PrintMembers(StringBuilder builder)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embedding/#parameters_1","title":"Parameters","text":"<p><code>builder</code> StringBuilder</p>"},{"location":"xmldocs/llama.oldversion.embedding/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.embedding/#gethashcode","title":"GetHashCode()","text":"<pre><code>public int GetHashCode()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embedding/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.embedding/#equalsobject","title":"Equals(Object)","text":"<pre><code>public bool Equals(object obj)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embedding/#parameters_2","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"xmldocs/llama.oldversion.embedding/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.embedding/#equalsembedding","title":"Equals(Embedding)","text":"<pre><code>public bool Equals(Embedding other)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embedding/#parameters_3","title":"Parameters","text":"<p><code>other</code> Embedding</p>"},{"location":"xmldocs/llama.oldversion.embedding/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.embedding/#clone","title":"&lt;Clone&gt;$()","text":"<pre><code>public Embedding &lt;Clone&gt;$()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embedding/#returns_5","title":"Returns","text":"<p>Embedding</p>"},{"location":"xmldocs/llama.oldversion.embedding/#deconstructstring-string-embeddingdata-embeddingusage","title":"Deconstruct(String&amp;, String&amp;, EmbeddingData[]&amp;, EmbeddingUsage&amp;)","text":"<pre><code>public void Deconstruct(String&amp; Object, String&amp; Model, EmbeddingData[]&amp; Data, EmbeddingUsage&amp; Usage)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embedding/#parameters_4","title":"Parameters","text":"<p><code>Object</code> String&amp;</p> <p><code>Model</code> String&amp;</p> <p><code>Data</code> EmbeddingData[]&amp;</p> <p><code>Usage</code> EmbeddingUsage&amp;</p>"},{"location":"xmldocs/llama.oldversion.embeddingdata/","title":"EmbeddingData","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class EmbeddingData : System.IEquatable`1[[LLama.OldVersion.EmbeddingData, LLamaSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null]]\n</code></pre> <p>Inheritance Object \u2192 EmbeddingData Implements IEquatable&lt;EmbeddingData&gt;</p>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.embeddingdata/#index","title":"Index","text":"<pre><code>public int Index { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#object","title":"Object","text":"<pre><code>public string Object { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#property-value_1","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#embedding","title":"Embedding","text":"<pre><code>public Single[] Embedding { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#property-value_2","title":"Property Value","text":"<p>Single[]</p>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.embeddingdata/#embeddingdataint32-string-single","title":"EmbeddingData(Int32, String, Single[])","text":"<pre><code>public EmbeddingData(int Index, string Object, Single[] Embedding)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#parameters","title":"Parameters","text":"<p><code>Index</code> Int32</p> <p><code>Object</code> String</p> <p><code>Embedding</code> Single[]</p>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.embeddingdata/#tostring","title":"ToString()","text":"<pre><code>public string ToString()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#printmembersstringbuilder","title":"PrintMembers(StringBuilder)","text":"<pre><code>protected bool PrintMembers(StringBuilder builder)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#parameters_1","title":"Parameters","text":"<p><code>builder</code> StringBuilder</p>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#gethashcode","title":"GetHashCode()","text":"<pre><code>public int GetHashCode()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#equalsobject","title":"Equals(Object)","text":"<pre><code>public bool Equals(object obj)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#parameters_2","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#equalsembeddingdata","title":"Equals(EmbeddingData)","text":"<pre><code>public bool Equals(EmbeddingData other)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#parameters_3","title":"Parameters","text":"<p><code>other</code> EmbeddingData</p>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#clone","title":"&lt;Clone&gt;$()","text":"<pre><code>public EmbeddingData &lt;Clone&gt;$()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#returns_5","title":"Returns","text":"<p>EmbeddingData</p>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#deconstructint32-string-single","title":"Deconstruct(Int32&amp;, String&amp;, Single[]&amp;)","text":"<pre><code>public void Deconstruct(Int32&amp; Index, String&amp; Object, Single[]&amp; Embedding)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingdata/#parameters_4","title":"Parameters","text":"<p><code>Index</code> Int32&amp;</p> <p><code>Object</code> String&amp;</p> <p><code>Embedding</code> Single[]&amp;</p>"},{"location":"xmldocs/llama.oldversion.embeddingusage/","title":"EmbeddingUsage","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class EmbeddingUsage : System.IEquatable`1[[LLama.OldVersion.EmbeddingUsage, LLamaSharp, Version=0.4.0.0, Culture=neutral, PublicKeyToken=null]]\n</code></pre> <p>Inheritance Object \u2192 EmbeddingUsage Implements IEquatable&lt;EmbeddingUsage&gt;</p>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.embeddingusage/#prompttokens","title":"PromptTokens","text":"<pre><code>public int PromptTokens { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#totaltokens","title":"TotalTokens","text":"<pre><code>public int TotalTokens { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.embeddingusage/#embeddingusageint32-int32","title":"EmbeddingUsage(Int32, Int32)","text":"<pre><code>public EmbeddingUsage(int PromptTokens, int TotalTokens)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#parameters","title":"Parameters","text":"<p><code>PromptTokens</code> Int32</p> <p><code>TotalTokens</code> Int32</p>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.embeddingusage/#tostring","title":"ToString()","text":"<pre><code>public string ToString()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#returns","title":"Returns","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#printmembersstringbuilder","title":"PrintMembers(StringBuilder)","text":"<pre><code>protected bool PrintMembers(StringBuilder builder)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#parameters_1","title":"Parameters","text":"<p><code>builder</code> StringBuilder</p>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#gethashcode","title":"GetHashCode()","text":"<pre><code>public int GetHashCode()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#returns_2","title":"Returns","text":"<p>Int32</p>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#equalsobject","title":"Equals(Object)","text":"<pre><code>public bool Equals(object obj)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#parameters_2","title":"Parameters","text":"<p><code>obj</code> Object</p>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#returns_3","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#equalsembeddingusage","title":"Equals(EmbeddingUsage)","text":"<pre><code>public bool Equals(EmbeddingUsage other)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#parameters_3","title":"Parameters","text":"<p><code>other</code> EmbeddingUsage</p>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#returns_4","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#clone","title":"&lt;Clone&gt;$()","text":"<pre><code>public EmbeddingUsage &lt;Clone&gt;$()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#returns_5","title":"Returns","text":"<p>EmbeddingUsage</p>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#deconstructint32-int32","title":"Deconstruct(Int32&amp;, Int32&amp;)","text":"<pre><code>public void Deconstruct(Int32&amp; PromptTokens, Int32&amp; TotalTokens)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.embeddingusage/#parameters_4","title":"Parameters","text":"<p><code>PromptTokens</code> Int32&amp;</p> <p><code>TotalTokens</code> Int32&amp;</p>"},{"location":"xmldocs/llama.oldversion.ichatmodel/","title":"IChatModel","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public interface IChatModel\n</code></pre>"},{"location":"xmldocs/llama.oldversion.ichatmodel/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.ichatmodel/#name","title":"Name","text":"<pre><code>public abstract string Name { get; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.ichatmodel/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.ichatmodel/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.ichatmodel/#chatstring-string-string","title":"Chat(String, String, String)","text":"<pre><code>IEnumerable&lt;string&gt; Chat(string text, string prompt, string encoding)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.ichatmodel/#parameters","title":"Parameters","text":"<p><code>text</code> String</p> <p><code>prompt</code> String</p> <p><code>encoding</code> String</p>"},{"location":"xmldocs/llama.oldversion.ichatmodel/#returns","title":"Returns","text":"<p>IEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.oldversion.ichatmodel/#initchatpromptstring-string","title":"InitChatPrompt(String, String)","text":"<p>Init a prompt for chat and automatically produce the next prompt during the chat.</p> <pre><code>void InitChatPrompt(string prompt, string encoding)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.ichatmodel/#parameters_1","title":"Parameters","text":"<p><code>prompt</code> String</p> <p><code>encoding</code> String</p>"},{"location":"xmldocs/llama.oldversion.ichatmodel/#initchatantipromptstring","title":"InitChatAntiprompt(String[])","text":"<pre><code>void InitChatAntiprompt(String[] antiprompt)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.ichatmodel/#parameters_2","title":"Parameters","text":"<p><code>antiprompt</code> String[]</p>"},{"location":"xmldocs/llama.oldversion.llamaembedder/","title":"LLamaEmbedder","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class LLamaEmbedder : System.IDisposable\n</code></pre> <p>Inheritance Object \u2192 LLamaEmbedder Implements IDisposable</p>"},{"location":"xmldocs/llama.oldversion.llamaembedder/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.llamaembedder/#llamaembedderllamaparams","title":"LLamaEmbedder(LLamaParams)","text":"<pre><code>public LLamaEmbedder(LLamaParams params)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaembedder/#parameters","title":"Parameters","text":"<p><code>params</code> LLamaParams</p>"},{"location":"xmldocs/llama.oldversion.llamaembedder/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.llamaembedder/#getembeddingsstring-int32-boolean-string","title":"GetEmbeddings(String, Int32, Boolean, String)","text":"<pre><code>public Single[] GetEmbeddings(string text, int n_thread, bool add_bos, string encoding)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaembedder/#parameters_1","title":"Parameters","text":"<p><code>text</code> String</p> <p><code>n_thread</code> Int32</p> <p><code>add_bos</code> Boolean</p> <p><code>encoding</code> String</p>"},{"location":"xmldocs/llama.oldversion.llamaembedder/#returns","title":"Returns","text":"<p>Single[]</p>"},{"location":"xmldocs/llama.oldversion.llamaembedder/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamamodel/","title":"LLamaModel","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public class LLamaModel : IChatModel, System.IDisposable\n</code></pre> <p>Inheritance Object \u2192 LLamaModel Implements IChatModel, IDisposable</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.oldversion.llamamodel/#name","title":"Name","text":"<pre><code>public string Name { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamamodel/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#verbose","title":"Verbose","text":"<pre><code>public bool Verbose { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamamodel/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#nativehandle","title":"NativeHandle","text":"<pre><code>public SafeLLamaContextHandle NativeHandle { get; }\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamamodel/#property-value_2","title":"Property Value","text":"<p>SafeLLamaContextHandle</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.llamamodel/#llamamodelstring-string-boolean-int32-int32-int32-int32-int32-int32-int32-dictionaryint32-single-int32-single-single-single-single-single-int32-single-single-int32-single-single-string-string-string-string-liststring-string-string-boolean-boolean-boolean-boolean-boolean-boolean-boolean-boolean-boolean-boolean-boolean-boolean-boolean-boolean-string","title":"LLamaModel(String, String, Boolean, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Dictionary&lt;Int32, Single&gt;, Int32, Single, Single, Single, Single, Single, Int32, Single, Single, Int32, Single, Single, String, String, String, String, List&lt;String&gt;, String, String, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, String)","text":"<p>Please refer <code>LLamaParams</code> to find the meanings of each arg. Be sure to have set the <code>n_gpu_layers</code>, otherwise it will   load 20 layers to gpu by default.</p> <pre><code>public LLamaModel(string model_path, string model_name, bool verbose, int seed, int n_threads, int n_predict, int n_ctx, int n_batch, int n_keep, int n_gpu_layers, Dictionary&lt;int, float&gt; logit_bias, int top_k, float top_p, float tfs_z, float typical_p, float temp, float repeat_penalty, int repeat_last_n, float frequency_penalty, float presence_penalty, int mirostat, float mirostat_tau, float mirostat_eta, string prompt, string path_session, string input_prefix, string input_suffix, List&lt;string&gt; antiprompt, string lora_adapter, string lora_base, bool memory_f16, bool random_prompt, bool use_color, bool interactive, bool embedding, bool interactive_first, bool prompt_cache_all, bool instruct, bool penalize_nl, bool perplexity, bool use_mmap, bool use_mlock, bool mem_test, bool verbose_prompt, string encoding)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamamodel/#parameters","title":"Parameters","text":"<p><code>model_path</code> String The model file path.</p> <p><code>model_name</code> String The model name.</p> <p><code>verbose</code> Boolean Whether to print details when running the model.</p> <p><code>seed</code> Int32</p> <p><code>n_threads</code> Int32</p> <p><code>n_predict</code> Int32</p> <p><code>n_ctx</code> Int32</p> <p><code>n_batch</code> Int32</p> <p><code>n_keep</code> Int32</p> <p><code>n_gpu_layers</code> Int32</p> <p><code>logit_bias</code> Dictionary&lt;Int32, Single&gt;</p> <p><code>top_k</code> Int32</p> <p><code>top_p</code> Single</p> <p><code>tfs_z</code> Single</p> <p><code>typical_p</code> Single</p> <p><code>temp</code> Single</p> <p><code>repeat_penalty</code> Single</p> <p><code>repeat_last_n</code> Int32</p> <p><code>frequency_penalty</code> Single</p> <p><code>presence_penalty</code> Single</p> <p><code>mirostat</code> Int32</p> <p><code>mirostat_tau</code> Single</p> <p><code>mirostat_eta</code> Single</p> <p><code>prompt</code> String</p> <p><code>path_session</code> String</p> <p><code>input_prefix</code> String</p> <p><code>input_suffix</code> String</p> <p><code>antiprompt</code> List&lt;String&gt;</p> <p><code>lora_adapter</code> String</p> <p><code>lora_base</code> String</p> <p><code>memory_f16</code> Boolean</p> <p><code>random_prompt</code> Boolean</p> <p><code>use_color</code> Boolean</p> <p><code>interactive</code> Boolean</p> <p><code>embedding</code> Boolean</p> <p><code>interactive_first</code> Boolean</p> <p><code>prompt_cache_all</code> Boolean</p> <p><code>instruct</code> Boolean</p> <p><code>penalize_nl</code> Boolean</p> <p><code>perplexity</code> Boolean</p> <p><code>use_mmap</code> Boolean</p> <p><code>use_mlock</code> Boolean</p> <p><code>mem_test</code> Boolean</p> <p><code>verbose_prompt</code> Boolean</p> <p><code>encoding</code> String</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#llamamodelllamaparams-string-boolean-string","title":"LLamaModel(LLamaParams, String, Boolean, String)","text":"<p>Please refer <code>LLamaParams</code> to find the meanings of each arg. Be sure to have set the <code>n_gpu_layers</code>, otherwise it will   load 20 layers to gpu by default.</p> <pre><code>public LLamaModel(LLamaParams params, string name, bool verbose, string encoding)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamamodel/#parameters_1","title":"Parameters","text":"<p><code>params</code> LLamaParams The LLamaModel params</p> <p><code>name</code> String Model name</p> <p><code>verbose</code> Boolean Whether to output the detailed info.</p> <p><code>encoding</code> String</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#exceptions","title":"Exceptions","text":"<p>RuntimeError</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.oldversion.llamamodel/#withpromptstring-string","title":"WithPrompt(String, String)","text":"<p>Apply a prompt to the model.</p> <pre><code>public LLamaModel WithPrompt(string prompt, string encoding)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamamodel/#parameters_2","title":"Parameters","text":"<p><code>prompt</code> String</p> <p><code>encoding</code> String</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#returns","title":"Returns","text":"<p>LLamaModel</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#exceptions_1","title":"Exceptions","text":"<p>ArgumentException</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#withpromptfilestring","title":"WithPromptFile(String)","text":"<p>Apply the prompt file to the model.</p> <pre><code>public LLamaModel WithPromptFile(string promptFileName)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamamodel/#parameters_3","title":"Parameters","text":"<p><code>promptFileName</code> String</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#returns_1","title":"Returns","text":"<p>LLamaModel</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#initchatpromptstring-string","title":"InitChatPrompt(String, String)","text":"<pre><code>public void InitChatPrompt(string prompt, string encoding)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamamodel/#parameters_4","title":"Parameters","text":"<p><code>prompt</code> String</p> <p><code>encoding</code> String</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#initchatantipromptstring","title":"InitChatAntiprompt(String[])","text":"<pre><code>public void InitChatAntiprompt(String[] antiprompt)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamamodel/#parameters_5","title":"Parameters","text":"<p><code>antiprompt</code> String[]</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#chatstring-string-string","title":"Chat(String, String, String)","text":"<p>Chat with the LLaMa model under interactive mode.</p> <pre><code>public IEnumerable&lt;string&gt; Chat(string text, string prompt, string encoding)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamamodel/#parameters_6","title":"Parameters","text":"<p><code>text</code> String</p> <p><code>prompt</code> String</p> <p><code>encoding</code> String</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#returns_2","title":"Returns","text":"<p>IEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#exceptions_2","title":"Exceptions","text":"<p>ArgumentException</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#savestatestring","title":"SaveState(String)","text":"<p>Save the state to specified path.</p> <pre><code>public void SaveState(string filename)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamamodel/#parameters_7","title":"Parameters","text":"<p><code>filename</code> String</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#loadstatestring-boolean","title":"LoadState(String, Boolean)","text":"<p>Load the state from specified path.</p> <pre><code>public void LoadState(string filename, bool clearPreviousEmbed)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamamodel/#parameters_8","title":"Parameters","text":"<p><code>filename</code> String</p> <p><code>clearPreviousEmbed</code> Boolean Whether to clear previous footprints of this model.</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#exceptions_3","title":"Exceptions","text":"<p>RuntimeError</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#tokenizestring-string","title":"Tokenize(String, String)","text":"<p>Tokenize a string.</p> <pre><code>public List&lt;int&gt; Tokenize(string text, string encoding)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamamodel/#parameters_9","title":"Parameters","text":"<p><code>text</code> String The utf-8 encoded string to tokenize.</p> <p><code>encoding</code> String</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#returns_3","title":"Returns","text":"<p>List&lt;Int32&gt; A list of tokens.</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#exceptions_4","title":"Exceptions","text":"<p>RuntimeError If the tokenization failed.</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#detokenizeienumerableint32","title":"DeTokenize(IEnumerable&lt;Int32&gt;)","text":"<p>Detokenize a list of tokens.</p> <pre><code>public string DeTokenize(IEnumerable&lt;int&gt; tokens)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamamodel/#parameters_10","title":"Parameters","text":"<p><code>tokens</code> IEnumerable&lt;Int32&gt; The list of tokens to detokenize.</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#returns_4","title":"Returns","text":"<p>String The detokenized string.</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#callstring-string","title":"Call(String, String)","text":"<p>Call the model to run inference.</p> <pre><code>public IEnumerable&lt;string&gt; Call(string text, string encoding)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamamodel/#parameters_11","title":"Parameters","text":"<p><code>text</code> String</p> <p><code>encoding</code> String</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#returns_5","title":"Returns","text":"<p>IEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#exceptions_5","title":"Exceptions","text":"<p>RuntimeError</p>"},{"location":"xmldocs/llama.oldversion.llamamodel/#dispose","title":"Dispose()","text":"<pre><code>public void Dispose()\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/","title":"LLamaParams","text":"<p>Namespace: LLama.OldVersion</p> <pre><code>public struct LLamaParams\n</code></pre> <p>Inheritance Object \u2192 ValueType \u2192 LLamaParams</p>"},{"location":"xmldocs/llama.oldversion.llamaparams/#fields","title":"Fields","text":""},{"location":"xmldocs/llama.oldversion.llamaparams/#seed","title":"seed","text":"<pre><code>public int seed;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#n_threads","title":"n_threads","text":"<pre><code>public int n_threads;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#n_predict","title":"n_predict","text":"<pre><code>public int n_predict;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#n_ctx","title":"n_ctx","text":"<pre><code>public int n_ctx;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#n_batch","title":"n_batch","text":"<pre><code>public int n_batch;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#n_keep","title":"n_keep","text":"<pre><code>public int n_keep;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#n_gpu_layers","title":"n_gpu_layers","text":"<pre><code>public int n_gpu_layers;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#logit_bias","title":"logit_bias","text":"<pre><code>public Dictionary&lt;int, float&gt; logit_bias;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#top_k","title":"top_k","text":"<pre><code>public int top_k;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#top_p","title":"top_p","text":"<pre><code>public float top_p;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#tfs_z","title":"tfs_z","text":"<pre><code>public float tfs_z;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#typical_p","title":"typical_p","text":"<pre><code>public float typical_p;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#temp","title":"temp","text":"<pre><code>public float temp;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#repeat_penalty","title":"repeat_penalty","text":"<pre><code>public float repeat_penalty;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#repeat_last_n","title":"repeat_last_n","text":"<pre><code>public int repeat_last_n;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#frequency_penalty","title":"frequency_penalty","text":"<pre><code>public float frequency_penalty;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#presence_penalty","title":"presence_penalty","text":"<pre><code>public float presence_penalty;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#mirostat","title":"mirostat","text":"<pre><code>public int mirostat;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#mirostat_tau","title":"mirostat_tau","text":"<pre><code>public float mirostat_tau;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#mirostat_eta","title":"mirostat_eta","text":"<pre><code>public float mirostat_eta;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#model","title":"model","text":"<pre><code>public string model;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#prompt","title":"prompt","text":"<pre><code>public string prompt;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#path_session","title":"path_session","text":"<pre><code>public string path_session;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#input_prefix","title":"input_prefix","text":"<pre><code>public string input_prefix;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#input_suffix","title":"input_suffix","text":"<pre><code>public string input_suffix;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#antiprompt","title":"antiprompt","text":"<pre><code>public List&lt;string&gt; antiprompt;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#lora_adapter","title":"lora_adapter","text":"<pre><code>public string lora_adapter;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#lora_base","title":"lora_base","text":"<pre><code>public string lora_base;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#memory_f16","title":"memory_f16","text":"<pre><code>public bool memory_f16;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#random_prompt","title":"random_prompt","text":"<pre><code>public bool random_prompt;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#use_color","title":"use_color","text":"<pre><code>public bool use_color;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#interactive","title":"interactive","text":"<pre><code>public bool interactive;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#prompt_cache_all","title":"prompt_cache_all","text":"<pre><code>public bool prompt_cache_all;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#embedding","title":"embedding","text":"<pre><code>public bool embedding;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#interactive_first","title":"interactive_first","text":"<pre><code>public bool interactive_first;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#instruct","title":"instruct","text":"<pre><code>public bool instruct;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#penalize_nl","title":"penalize_nl","text":"<pre><code>public bool penalize_nl;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#perplexity","title":"perplexity","text":"<pre><code>public bool perplexity;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#use_mmap","title":"use_mmap","text":"<pre><code>public bool use_mmap;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#use_mlock","title":"use_mlock","text":"<pre><code>public bool use_mlock;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#mem_test","title":"mem_test","text":"<pre><code>public bool mem_test;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#verbose_prompt","title":"verbose_prompt","text":"<pre><code>public bool verbose_prompt;\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.oldversion.llamaparams/#llamaparamsint32-int32-int32-int32-int32-int32-int32-dictionaryint32-single-int32-single-single-single-single-single-int32-single-single-int32-single-single-string-string-string-string-string-liststring-string-string-boolean-boolean-boolean-boolean-boolean-boolean-boolean-boolean-boolean-boolean-boolean-boolean-boolean-boolean","title":"LLamaParams(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Dictionary&lt;Int32, Single&gt;, Int32, Single, Single, Single, Single, Single, Int32, Single, Single, Int32, Single, Single, String, String, String, String, String, List&lt;String&gt;, String, String, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean, Boolean)","text":"<pre><code>LLamaParams(int seed, int n_threads, int n_predict, int n_ctx, int n_batch, int n_keep, int n_gpu_layers, Dictionary&lt;int, float&gt; logit_bias, int top_k, float top_p, float tfs_z, float typical_p, float temp, float repeat_penalty, int repeat_last_n, float frequency_penalty, float presence_penalty, int mirostat, float mirostat_tau, float mirostat_eta, string model, string prompt, string path_session, string input_prefix, string input_suffix, List&lt;string&gt; antiprompt, string lora_adapter, string lora_base, bool memory_f16, bool random_prompt, bool use_color, bool interactive, bool prompt_cache_all, bool embedding, bool interactive_first, bool instruct, bool penalize_nl, bool perplexity, bool use_mmap, bool use_mlock, bool mem_test, bool verbose_prompt)\n</code></pre>"},{"location":"xmldocs/llama.oldversion.llamaparams/#parameters","title":"Parameters","text":"<p><code>seed</code> Int32</p> <p><code>n_threads</code> Int32</p> <p><code>n_predict</code> Int32</p> <p><code>n_ctx</code> Int32</p> <p><code>n_batch</code> Int32</p> <p><code>n_keep</code> Int32</p> <p><code>n_gpu_layers</code> Int32</p> <p><code>logit_bias</code> Dictionary&lt;Int32, Single&gt;</p> <p><code>top_k</code> Int32</p> <p><code>top_p</code> Single</p> <p><code>tfs_z</code> Single</p> <p><code>typical_p</code> Single</p> <p><code>temp</code> Single</p> <p><code>repeat_penalty</code> Single</p> <p><code>repeat_last_n</code> Int32</p> <p><code>frequency_penalty</code> Single</p> <p><code>presence_penalty</code> Single</p> <p><code>mirostat</code> Int32</p> <p><code>mirostat_tau</code> Single</p> <p><code>mirostat_eta</code> Single</p> <p><code>model</code> String</p> <p><code>prompt</code> String</p> <p><code>path_session</code> String</p> <p><code>input_prefix</code> String</p> <p><code>input_suffix</code> String</p> <p><code>antiprompt</code> List&lt;String&gt;</p> <p><code>lora_adapter</code> String</p> <p><code>lora_base</code> String</p> <p><code>memory_f16</code> Boolean</p> <p><code>random_prompt</code> Boolean</p> <p><code>use_color</code> Boolean</p> <p><code>interactive</code> Boolean</p> <p><code>prompt_cache_all</code> Boolean</p> <p><code>embedding</code> Boolean</p> <p><code>interactive_first</code> Boolean</p> <p><code>instruct</code> Boolean</p> <p><code>penalize_nl</code> Boolean</p> <p><code>perplexity</code> Boolean</p> <p><code>use_mmap</code> Boolean</p> <p><code>use_mlock</code> Boolean</p> <p><code>mem_test</code> Boolean</p> <p><code>verbose_prompt</code> Boolean</p>"},{"location":"xmldocs/llama.resettablellamamodel/","title":"ResettableLLamaModel","text":"<p>Namespace: LLama</p> <p>A LLamaModel what could be reset. Note that using this class will consume about 10% more memories.</p> <pre><code>public class ResettableLLamaModel : LLamaModel, System.IDisposable\n</code></pre> <p>Inheritance Object \u2192 LLamaModel \u2192 ResettableLLamaModel Implements IDisposable</p>"},{"location":"xmldocs/llama.resettablellamamodel/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.resettablellamamodel/#originalstate","title":"OriginalState","text":"<p>The initial state of the model</p> <pre><code>public Byte[] OriginalState { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.resettablellamamodel/#property-value","title":"Property Value","text":"<p>Byte[]</p>"},{"location":"xmldocs/llama.resettablellamamodel/#contextsize","title":"ContextSize","text":"<p>The context size.</p> <pre><code>public int ContextSize { get; }\n</code></pre>"},{"location":"xmldocs/llama.resettablellamamodel/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"xmldocs/llama.resettablellamamodel/#params","title":"Params","text":"<p>The model params set for this model.</p> <pre><code>public ModelParams Params { get; set; }\n</code></pre>"},{"location":"xmldocs/llama.resettablellamamodel/#property-value_2","title":"Property Value","text":"<p>ModelParams</p>"},{"location":"xmldocs/llama.resettablellamamodel/#nativehandle","title":"NativeHandle","text":"<p>The native handle, which is used to be passed to the native APIs. Please avoid using it   unless you know what is the usage of the Native API.</p> <pre><code>public SafeLLamaContextHandle NativeHandle { get; }\n</code></pre>"},{"location":"xmldocs/llama.resettablellamamodel/#property-value_3","title":"Property Value","text":"<p>SafeLLamaContextHandle</p>"},{"location":"xmldocs/llama.resettablellamamodel/#encoding","title":"Encoding","text":"<p>The encoding set for this model to deal with text input.</p> <pre><code>public Encoding Encoding { get; }\n</code></pre>"},{"location":"xmldocs/llama.resettablellamamodel/#property-value_4","title":"Property Value","text":"<p>Encoding</p>"},{"location":"xmldocs/llama.resettablellamamodel/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.resettablellamamodel/#resettablellamamodelmodelparams-string","title":"ResettableLLamaModel(ModelParams, String)","text":"<pre><code>public ResettableLLamaModel(ModelParams Params, string encoding)\n</code></pre>"},{"location":"xmldocs/llama.resettablellamamodel/#parameters","title":"Parameters","text":"<p><code>Params</code> ModelParams</p> <p><code>encoding</code> String</p>"},{"location":"xmldocs/llama.resettablellamamodel/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.resettablellamamodel/#reset","title":"Reset()","text":"<p>Reset the state to the initial state.</p> <pre><code>public void Reset()\n</code></pre>"},{"location":"xmldocs/llama.statefulexecutorbase/","title":"StatefulExecutorBase","text":"<p>Namespace: LLama</p> <p>The base class for stateful LLama executors.</p> <pre><code>public abstract class StatefulExecutorBase : LLama.Abstractions.ILLamaExecutor\n</code></pre> <p>Inheritance Object \u2192 StatefulExecutorBase Implements ILLamaExecutor</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.statefulexecutorbase/#model","title":"Model","text":"<p>The mode used by the executor.</p> <pre><code>public LLamaModel Model { get; }\n</code></pre>"},{"location":"xmldocs/llama.statefulexecutorbase/#property-value","title":"Property Value","text":"<p>LLamaModel</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.statefulexecutorbase/#withsessionfilestring","title":"WithSessionFile(String)","text":"<p>This API is currently not verified.</p> <pre><code>public StatefulExecutorBase WithSessionFile(string filename)\n</code></pre>"},{"location":"xmldocs/llama.statefulexecutorbase/#parameters","title":"Parameters","text":"<p><code>filename</code> String</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#returns","title":"Returns","text":"<p>StatefulExecutorBase</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#exceptions","title":"Exceptions","text":"<p>ArgumentNullException</p> <p>RuntimeError</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#savesessionfilestring","title":"SaveSessionFile(String)","text":"<p>This API has not been verified currently.</p> <pre><code>public void SaveSessionFile(string filename)\n</code></pre>"},{"location":"xmldocs/llama.statefulexecutorbase/#parameters_1","title":"Parameters","text":"<p><code>filename</code> String</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#handlerunoutofcontextint32","title":"HandleRunOutOfContext(Int32)","text":"<p>After running out of the context, take some tokens from the original prompt and recompute the logits in batches.</p> <pre><code>protected void HandleRunOutOfContext(int tokensToKeep)\n</code></pre>"},{"location":"xmldocs/llama.statefulexecutorbase/#parameters_2","title":"Parameters","text":"<p><code>tokensToKeep</code> Int32</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#tryreusemathingprefix","title":"TryReuseMathingPrefix()","text":"<p>Try to reuse the matching prefix from the session file.</p> <pre><code>protected void TryReuseMathingPrefix()\n</code></pre>"},{"location":"xmldocs/llama.statefulexecutorbase/#getloopconditioninferstateargs","title":"GetLoopCondition(InferStateArgs)","text":"<p>Decide whether to continue the loop.</p> <pre><code>protected abstract bool GetLoopCondition(InferStateArgs args)\n</code></pre>"},{"location":"xmldocs/llama.statefulexecutorbase/#parameters_3","title":"Parameters","text":"<p><code>args</code> InferStateArgs</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#returns_1","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#preprocessinputsstring-inferstateargs","title":"PreprocessInputs(String, InferStateArgs)","text":"<p>Preprocess the inputs before the inference.</p> <pre><code>protected abstract void PreprocessInputs(string text, InferStateArgs args)\n</code></pre>"},{"location":"xmldocs/llama.statefulexecutorbase/#parameters_4","title":"Parameters","text":"<p><code>text</code> String</p> <p><code>args</code> InferStateArgs</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#postprocessinferenceparams-inferstateargs-ienumerable1","title":"PostProcess(InferenceParams, InferStateArgs, IEnumerable`1&amp;)","text":"<p>Do some post processing after the inference.</p> <pre><code>protected abstract bool PostProcess(InferenceParams inferenceParams, InferStateArgs args, IEnumerable`1&amp; extraOutputs)\n</code></pre>"},{"location":"xmldocs/llama.statefulexecutorbase/#parameters_5","title":"Parameters","text":"<p><code>inferenceParams</code> InferenceParams</p> <p><code>args</code> InferStateArgs</p> <p><code>extraOutputs</code> IEnumerable`1&amp;</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#returns_2","title":"Returns","text":"<p>Boolean</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#inferinternalinferenceparams-inferstateargs","title":"InferInternal(InferenceParams, InferStateArgs)","text":"<p>The core inference logic.</p> <pre><code>protected abstract void InferInternal(InferenceParams inferenceParams, InferStateArgs args)\n</code></pre>"},{"location":"xmldocs/llama.statefulexecutorbase/#parameters_6","title":"Parameters","text":"<p><code>inferenceParams</code> InferenceParams</p> <p><code>args</code> InferStateArgs</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#savestatestring","title":"SaveState(String)","text":"<p>Save the current state to a file.</p> <pre><code>public abstract void SaveState(string filename)\n</code></pre>"},{"location":"xmldocs/llama.statefulexecutorbase/#parameters_7","title":"Parameters","text":"<p><code>filename</code> String</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#getstatedata","title":"GetStateData()","text":"<p>Get the current state data.</p> <pre><code>public abstract ExecutorBaseState GetStateData()\n</code></pre>"},{"location":"xmldocs/llama.statefulexecutorbase/#returns_3","title":"Returns","text":"<p>ExecutorBaseState</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#loadstateexecutorbasestate","title":"LoadState(ExecutorBaseState)","text":"<p>Load the state from data.</p> <pre><code>public abstract void LoadState(ExecutorBaseState data)\n</code></pre>"},{"location":"xmldocs/llama.statefulexecutorbase/#parameters_8","title":"Parameters","text":"<p><code>data</code> ExecutorBaseState</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#loadstatestring","title":"LoadState(String)","text":"<p>Load the state from a file.</p> <pre><code>public abstract void LoadState(string filename)\n</code></pre>"},{"location":"xmldocs/llama.statefulexecutorbase/#parameters_9","title":"Parameters","text":"<p><code>filename</code> String</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#inferstring-inferenceparams-cancellationtoken","title":"Infer(String, InferenceParams, CancellationToken)","text":"<p>Execute the inference.</p> <pre><code>public IEnumerable&lt;string&gt; Infer(string text, InferenceParams inferenceParams, CancellationToken cancellationToken)\n</code></pre>"},{"location":"xmldocs/llama.statefulexecutorbase/#parameters_10","title":"Parameters","text":"<p><code>text</code> String</p> <p><code>inferenceParams</code> InferenceParams</p> <p><code>cancellationToken</code> CancellationToken</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#returns_4","title":"Returns","text":"<p>IEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#inferasyncstring-inferenceparams-cancellationtoken","title":"InferAsync(String, InferenceParams, CancellationToken)","text":"<p>Execute the inference asynchronously.</p> <pre><code>public IAsyncEnumerable&lt;string&gt; InferAsync(string text, InferenceParams inferenceParams, CancellationToken cancellationToken)\n</code></pre>"},{"location":"xmldocs/llama.statefulexecutorbase/#parameters_11","title":"Parameters","text":"<p><code>text</code> String</p> <p><code>inferenceParams</code> InferenceParams</p> <p><code>cancellationToken</code> CancellationToken</p>"},{"location":"xmldocs/llama.statefulexecutorbase/#returns_5","title":"Returns","text":"<p>IAsyncEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.statelessexecutor/","title":"StatelessExecutor","text":"<p>Namespace: LLama</p> <p>This executor infer the input as one-time job. Previous inputs won't impact on the   response to current input.</p> <pre><code>public class StatelessExecutor : LLama.Abstractions.ILLamaExecutor\n</code></pre> <p>Inheritance Object \u2192 StatelessExecutor Implements ILLamaExecutor</p>"},{"location":"xmldocs/llama.statelessexecutor/#properties","title":"Properties","text":""},{"location":"xmldocs/llama.statelessexecutor/#model","title":"Model","text":"<p>The mode used by the executor when running the inference.</p> <pre><code>public LLamaModel Model { get; }\n</code></pre>"},{"location":"xmldocs/llama.statelessexecutor/#property-value","title":"Property Value","text":"<p>LLamaModel</p>"},{"location":"xmldocs/llama.statelessexecutor/#constructors","title":"Constructors","text":""},{"location":"xmldocs/llama.statelessexecutor/#statelessexecutorllamamodel","title":"StatelessExecutor(LLamaModel)","text":"<pre><code>public StatelessExecutor(LLamaModel model)\n</code></pre>"},{"location":"xmldocs/llama.statelessexecutor/#parameters","title":"Parameters","text":"<p><code>model</code> LLamaModel The LLama model.</p>"},{"location":"xmldocs/llama.statelessexecutor/#methods","title":"Methods","text":""},{"location":"xmldocs/llama.statelessexecutor/#inferstring-inferenceparams-cancellationtoken","title":"Infer(String, InferenceParams, CancellationToken)","text":"<pre><code>public IEnumerable&lt;string&gt; Infer(string text, InferenceParams inferenceParams, CancellationToken cancellationToken)\n</code></pre>"},{"location":"xmldocs/llama.statelessexecutor/#parameters_1","title":"Parameters","text":"<p><code>text</code> String</p> <p><code>inferenceParams</code> InferenceParams</p> <p><code>cancellationToken</code> CancellationToken</p>"},{"location":"xmldocs/llama.statelessexecutor/#returns","title":"Returns","text":"<p>IEnumerable&lt;String&gt;</p>"},{"location":"xmldocs/llama.statelessexecutor/#inferasyncstring-inferenceparams-cancellationtoken","title":"InferAsync(String, InferenceParams, CancellationToken)","text":"<pre><code>public IAsyncEnumerable&lt;string&gt; InferAsync(string text, InferenceParams inferenceParams, CancellationToken token)\n</code></pre>"},{"location":"xmldocs/llama.statelessexecutor/#parameters_2","title":"Parameters","text":"<p><code>text</code> String</p> <p><code>inferenceParams</code> InferenceParams</p> <p><code>token</code> CancellationToken</p>"},{"location":"xmldocs/llama.statelessexecutor/#returns_1","title":"Returns","text":"<p>IAsyncEnumerable&lt;String&gt;</p>"}]}